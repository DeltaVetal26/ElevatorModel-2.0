
MainBoardFirmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ef8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08004080  08004080  00014080  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080040cc  080040cc  00020048  2**0
                  CONTENTS
  4 .ARM          00000000  080040cc  080040cc  00020048  2**0
                  CONTENTS
  5 .preinit_array 00000000  080040cc  080040cc  00020048  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080040cc  080040cc  000140cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080040d0  080040d0  000140d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000048  20000000  080040d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c4  20000048  0800411c  00020048  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000010c  0800411c  0002010c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009b96  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000016c2  00000000  00000000  00029c0e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000808  00000000  00000000  0002b2d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000750  00000000  00000000  0002bad8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001b1d5  00000000  00000000  0002c228  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007245  00000000  00000000  000473fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009b934  00000000  00000000  0004e642  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e9f76  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002104  00000000  00000000  000e9ff4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000048 	.word	0x20000048
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004068 	.word	0x08004068

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000004c 	.word	0x2000004c
 80001c4:	08004068 	.word	0x08004068

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_d2uiz>:
 8000540:	004a      	lsls	r2, r1, #1
 8000542:	d211      	bcs.n	8000568 <__aeabi_d2uiz+0x28>
 8000544:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000548:	d211      	bcs.n	800056e <__aeabi_d2uiz+0x2e>
 800054a:	d50d      	bpl.n	8000568 <__aeabi_d2uiz+0x28>
 800054c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000550:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000554:	d40e      	bmi.n	8000574 <__aeabi_d2uiz+0x34>
 8000556:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800055a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800055e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000562:	fa23 f002 	lsr.w	r0, r3, r2
 8000566:	4770      	bx	lr
 8000568:	f04f 0000 	mov.w	r0, #0
 800056c:	4770      	bx	lr
 800056e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000572:	d102      	bne.n	800057a <__aeabi_d2uiz+0x3a>
 8000574:	f04f 30ff 	mov.w	r0, #4294967295
 8000578:	4770      	bx	lr
 800057a:	f04f 0000 	mov.w	r0, #0
 800057e:	4770      	bx	lr

08000580 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000580:	b480      	push	{r7}
 8000582:	b083      	sub	sp, #12
 8000584:	af00      	add	r7, sp, #0
 8000586:	4603      	mov	r3, r0
 8000588:	6039      	str	r1, [r7, #0]
 800058a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800058c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000590:	2b00      	cmp	r3, #0
 8000592:	db0a      	blt.n	80005aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000594:	683b      	ldr	r3, [r7, #0]
 8000596:	b2da      	uxtb	r2, r3
 8000598:	490c      	ldr	r1, [pc, #48]	; (80005cc <__NVIC_SetPriority+0x4c>)
 800059a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800059e:	0112      	lsls	r2, r2, #4
 80005a0:	b2d2      	uxtb	r2, r2
 80005a2:	440b      	add	r3, r1
 80005a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80005a8:	e00a      	b.n	80005c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005aa:	683b      	ldr	r3, [r7, #0]
 80005ac:	b2da      	uxtb	r2, r3
 80005ae:	4908      	ldr	r1, [pc, #32]	; (80005d0 <__NVIC_SetPriority+0x50>)
 80005b0:	79fb      	ldrb	r3, [r7, #7]
 80005b2:	f003 030f 	and.w	r3, r3, #15
 80005b6:	3b04      	subs	r3, #4
 80005b8:	0112      	lsls	r2, r2, #4
 80005ba:	b2d2      	uxtb	r2, r2
 80005bc:	440b      	add	r3, r1
 80005be:	761a      	strb	r2, [r3, #24]
}
 80005c0:	bf00      	nop
 80005c2:	370c      	adds	r7, #12
 80005c4:	46bd      	mov	sp, r7
 80005c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ca:	4770      	bx	lr
 80005cc:	e000e100 	.word	0xe000e100
 80005d0:	e000ed00 	.word	0xe000ed00

080005d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	3b01      	subs	r3, #1
 80005e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80005e4:	d301      	bcc.n	80005ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80005e6:	2301      	movs	r3, #1
 80005e8:	e00f      	b.n	800060a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80005ea:	4a0a      	ldr	r2, [pc, #40]	; (8000614 <SysTick_Config+0x40>)
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	3b01      	subs	r3, #1
 80005f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80005f2:	210f      	movs	r1, #15
 80005f4:	f04f 30ff 	mov.w	r0, #4294967295
 80005f8:	f7ff ffc2 	bl	8000580 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80005fc:	4b05      	ldr	r3, [pc, #20]	; (8000614 <SysTick_Config+0x40>)
 80005fe:	2200      	movs	r2, #0
 8000600:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000602:	4b04      	ldr	r3, [pc, #16]	; (8000614 <SysTick_Config+0x40>)
 8000604:	2207      	movs	r2, #7
 8000606:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000608:	2300      	movs	r3, #0
}
 800060a:	4618      	mov	r0, r3
 800060c:	3708      	adds	r7, #8
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	e000e010 	.word	0xe000e010

08000618 <main>:
void updCurrentFloor();
// Events
void btnControl_PressEvent(uint8_t pressedFloor);


int main(void) {
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0

  HAL_Init();
 800061e:	f001 fb91 	bl	8001d44 <HAL_Init>
  SystemClock_Config();
 8000622:	f001 f9b9 	bl	8001998 <SystemClock_Config>
  MX_GPIO_Init();
 8000626:	f001 fa53 	bl	8001ad0 <MX_GPIO_Init>
  MX_I2C1_Init();
 800062a:	f001 fa11 	bl	8001a50 <MX_I2C1_Init>

  RCC->AHBENR |= (1 << 17) | (1 << 18); // PORTA and PORTB clock enabled
 800062e:	4b35      	ldr	r3, [pc, #212]	; (8000704 <main+0xec>)
 8000630:	695b      	ldr	r3, [r3, #20]
 8000632:	4a34      	ldr	r2, [pc, #208]	; (8000704 <main+0xec>)
 8000634:	f443 23c0 	orr.w	r3, r3, #393216	; 0x60000
 8000638:	6153      	str	r3, [r2, #20]

  // Config 1ms tick timer
  #define coreFrequency 24000000 // 24mHz core frequency
  SysTick_Config(coreFrequency / 1000);
 800063a:	f645 50c0 	movw	r0, #24000	; 0x5dc0
 800063e:	f7ff ffc9 	bl	80005d4 <SysTick_Config>

  HAL_Delay(2000);
 8000642:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000646:	f001 fbe3 	bl	8001e10 <HAL_Delay>

  // Init all modules
  floorBoard_Init();
 800064a:	f000 ff6d 	bl	8001528 <floorBoard_Init>
  ledIndicator_initPins();
 800064e:	f000 f9b7 	bl	80009c0 <ledIndicator_initPins>
  floorSensor_Init();
 8000652:	f000 fd5d 	bl	8001110 <floorSensor_Init>
  motionDrive_Init();
 8000656:	f000 fa97 	bl	8000b88 <motionDrive_Init>
  btnControl_Init();
 800065a:	f000 fe99 	bl	8001390 <btnControl_Init>

  // ON yellow led
  ledIndicator_setMode(STATIC, YELLOW_LED, 0);
 800065e:	2200      	movs	r2, #0
 8000660:	210c      	movs	r1, #12
 8000662:	2001      	movs	r0, #1
 8000664:	f000 f9e4 	bl	8000a30 <ledIndicator_setMode>
  HAL_Delay(2500);
 8000668:	f640 10c4 	movw	r0, #2500	; 0x9c4
 800066c:	f001 fbd0 	bl	8001e10 <HAL_Delay>

  // Get current floor
  updCurrentFloor();
 8000670:	f001 f87e 	bl	8001770 <updCurrentFloor>

  // Need calibration?
  uint8_t needCalibrateState = floorSensor_NeedCalibrate();
 8000674:	f000 fd74 	bl	8001160 <floorSensor_NeedCalibrate>
 8000678:	4603      	mov	r3, r0
 800067a:	71fb      	strb	r3, [r7, #7]
  switch (needCalibrateState) {
 800067c:	79fb      	ldrb	r3, [r7, #7]
 800067e:	2b04      	cmp	r3, #4
 8000680:	d82a      	bhi.n	80006d8 <main+0xc0>
 8000682:	a201      	add	r2, pc, #4	; (adr r2, 8000688 <main+0x70>)
 8000684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000688:	0800069d 	.word	0x0800069d
 800068c:	080006a9 	.word	0x080006a9
 8000690:	080006b1 	.word	0x080006b1
 8000694:	080006b9 	.word	0x080006b9
 8000698:	080006c1 	.word	0x080006c1
    case 0: // not need calibration
      ledIndicator_setMode(STATIC, GREEN_LED, 0);
 800069c:	2200      	movs	r2, #0
 800069e:	210d      	movs	r1, #13
 80006a0:	2001      	movs	r0, #1
 80006a2:	f000 f9c5 	bl	8000a30 <ledIndicator_setMode>
     break;
 80006a6:	e017      	b.n	80006d8 <main+0xc0>
    case 1: // down calibration
      floorSensor_calibrateControl(DOWN);
 80006a8:	2000      	movs	r0, #0
 80006aa:	f000 fe2f 	bl	800130c <floorSensor_calibrateControl>
     break;
 80006ae:	e013      	b.n	80006d8 <main+0xc0>
    case 2: // down calibration (risk)
      floorSensor_calibrateControl(DOWN);
 80006b0:	2000      	movs	r0, #0
 80006b2:	f000 fe2b 	bl	800130c <floorSensor_calibrateControl>
     break;
 80006b6:	e00f      	b.n	80006d8 <main+0xc0>
    case 3: // up calibration
      floorSensor_calibrateControl(UP);
 80006b8:	2001      	movs	r0, #1
 80006ba:	f000 fe27 	bl	800130c <floorSensor_calibrateControl>
     break;
 80006be:	e00b      	b.n	80006d8 <main+0xc0>
    case 4: // fault all sensor. Not operation?
      tripControl_VAR_driveLatch = 1;
 80006c0:	4b11      	ldr	r3, [pc, #68]	; (8000708 <main+0xf0>)
 80006c2:	2201      	movs	r2, #1
 80006c4:	701a      	strb	r2, [r3, #0]
      btnControl_VAR_pressAccess = 0;
 80006c6:	4b11      	ldr	r3, [pc, #68]	; (800070c <main+0xf4>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	701a      	strb	r2, [r3, #0]
      ledIndicator_setMode(STATIC, RED_LED, 0);
 80006cc:	2200      	movs	r2, #0
 80006ce:	2109      	movs	r1, #9
 80006d0:	2001      	movs	r0, #1
 80006d2:	f000 f9ad 	bl	8000a30 <ledIndicator_setMode>
     break;
 80006d6:	bf00      	nop
  }

  HAL_Delay(5000);
 80006d8:	f241 3088 	movw	r0, #5000	; 0x1388
 80006dc:	f001 fb98 	bl	8001e10 <HAL_Delay>

  // Loop
  while (1) {
    ledIndicator_loopBlink();
 80006e0:	f000 f9f8 	bl	8000ad4 <ledIndicator_loopBlink>
    floorSensor_Read();
 80006e4:	f000 fd86 	bl	80011f4 <floorSensor_Read>
    updCurrentFloor();
 80006e8:	f001 f842 	bl	8001770 <updCurrentFloor>
    btnControl_Read();
 80006ec:	f000 fe7e 	bl	80013ec <btnControl_Read>
    motionDrive_Loop();
 80006f0:	f000 fa82 	bl	8000bf8 <motionDrive_Loop>
    motionDrive_accelerateLoop();
 80006f4:	f000 fc7c 	bl	8000ff0 <motionDrive_accelerateLoop>
    tripControl_supervisor();
 80006f8:	f001 f8f8 	bl	80018ec <tripControl_supervisor>
    floorSensor_calibrateLoop();
 80006fc:	f000 fe26 	bl	800134c <floorSensor_calibrateLoop>
    ledIndicator_loopBlink();
 8000700:	e7ee      	b.n	80006e0 <main+0xc8>
 8000702:	bf00      	nop
 8000704:	40021000 	.word	0x40021000
 8000708:	20000076 	.word	0x20000076
 800070c:	2000002f 	.word	0x2000002f

08000710 <millis>:

// User functions
// ### TIMERS ###
// # User millis() timer
// Return current ms ticks value (ulong type)
static inline uint32_t millis() {
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0
  return msTicks;
 8000714:	4b03      	ldr	r3, [pc, #12]	; (8000724 <millis+0x14>)
 8000716:	681b      	ldr	r3, [r3, #0]
}
 8000718:	4618      	mov	r0, r3
 800071a:	46bd      	mov	sp, r7
 800071c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000720:	4770      	bx	lr
 8000722:	bf00      	nop
 8000724:	20000064 	.word	0x20000064

08000728 <micros>:
// # User micros() timer
// Return current micros ticks value (ulong type)
static inline uint32_t micros() {
 8000728:	b480      	push	{r7}
 800072a:	b083      	sub	sp, #12
 800072c:	af00      	add	r7, sp, #0
  uint32_t ms;
  uint32_t st;
  do {
    ms = msTicks;
 800072e:	4b11      	ldr	r3, [pc, #68]	; (8000774 <micros+0x4c>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	607b      	str	r3, [r7, #4]
    st = SysTick->VAL;
 8000734:	4b10      	ldr	r3, [pc, #64]	; (8000778 <micros+0x50>)
 8000736:	689b      	ldr	r3, [r3, #8]
 8000738:	603b      	str	r3, [r7, #0]
    asm volatile("nop");
 800073a:	bf00      	nop
    asm volatile("nop");
 800073c:	bf00      	nop
  } while (ms != msTicks);
 800073e:	4b0d      	ldr	r3, [pc, #52]	; (8000774 <micros+0x4c>)
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	687a      	ldr	r2, [r7, #4]
 8000744:	429a      	cmp	r2, r3
 8000746:	d1f2      	bne.n	800072e <micros+0x6>
  return ms * 1000 - st / ((SysTick->LOAD + 1) / 1000);
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800074e:	fb02 f203 	mul.w	r2, r2, r3
 8000752:	4b09      	ldr	r3, [pc, #36]	; (8000778 <micros+0x50>)
 8000754:	685b      	ldr	r3, [r3, #4]
 8000756:	3301      	adds	r3, #1
 8000758:	4908      	ldr	r1, [pc, #32]	; (800077c <micros+0x54>)
 800075a:	fba1 1303 	umull	r1, r3, r1, r3
 800075e:	099b      	lsrs	r3, r3, #6
 8000760:	6839      	ldr	r1, [r7, #0]
 8000762:	fbb1 f3f3 	udiv	r3, r1, r3
 8000766:	1ad3      	subs	r3, r2, r3
}
 8000768:	4618      	mov	r0, r3
 800076a:	370c      	adds	r7, #12
 800076c:	46bd      	mov	sp, r7
 800076e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000772:	4770      	bx	lr
 8000774:	20000064 	.word	0x20000064
 8000778:	e000e010 	.word	0xe000e010
 800077c:	10624dd3 	.word	0x10624dd3

08000780 <pinControl_setMode>:

// ### PIN control ###
// # Set pin mode
// Ex: pinControl_SetMode(28, OUTPUT); - set PB5 to OUTPUT mode
void pinControl_setMode(unsigned pin, unsigned mode) {
 8000780:	b480      	push	{r7}
 8000782:	b085      	sub	sp, #20
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
 8000788:	6039      	str	r1, [r7, #0]
  uint8_t pinArrPort = pinInfoArr[pin][0];
 800078a:	4929      	ldr	r1, [pc, #164]	; (8000830 <pinControl_setMode+0xb0>)
 800078c:	687a      	ldr	r2, [r7, #4]
 800078e:	4613      	mov	r3, r2
 8000790:	005b      	lsls	r3, r3, #1
 8000792:	4413      	add	r3, r2
 8000794:	440b      	add	r3, r1
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	73fb      	strb	r3, [r7, #15]
  uint8_t pinArrID = pinInfoArr[pin][1];
 800079a:	4925      	ldr	r1, [pc, #148]	; (8000830 <pinControl_setMode+0xb0>)
 800079c:	687a      	ldr	r2, [r7, #4]
 800079e:	4613      	mov	r3, r2
 80007a0:	005b      	lsls	r3, r3, #1
 80007a2:	4413      	add	r3, r2
 80007a4:	440b      	add	r3, r1
 80007a6:	3301      	adds	r3, #1
 80007a8:	781b      	ldrb	r3, [r3, #0]
 80007aa:	73bb      	strb	r3, [r7, #14]

  // get port
  if(pinArrPort == PORT_A) {
 80007ac:	7bfb      	ldrb	r3, [r7, #15]
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d11c      	bne.n	80007ec <pinControl_setMode+0x6c>
    GPIOA->MODER &= ~(BITMASK(2) << (2 * pinArrID));  // Clear bit
 80007b2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	7bba      	ldrb	r2, [r7, #14]
 80007ba:	0052      	lsls	r2, r2, #1
 80007bc:	2103      	movs	r1, #3
 80007be:	fa01 f202 	lsl.w	r2, r1, r2
 80007c2:	43d2      	mvns	r2, r2
 80007c4:	4611      	mov	r1, r2
 80007c6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80007ca:	400b      	ands	r3, r1
 80007cc:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= ((mode & BITMASK(2)) << (2 * pinArrID)); // Set bit
 80007ce:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80007d2:	681a      	ldr	r2, [r3, #0]
 80007d4:	683b      	ldr	r3, [r7, #0]
 80007d6:	f003 0103 	and.w	r1, r3, #3
 80007da:	7bbb      	ldrb	r3, [r7, #14]
 80007dc:	005b      	lsls	r3, r3, #1
 80007de:	fa01 f303 	lsl.w	r3, r1, r3
 80007e2:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 80007e6:	4313      	orrs	r3, r2
 80007e8:	600b      	str	r3, [r1, #0]
  } else if(pinArrPort == PORT_B) {
    GPIOB->MODER &= ~(BITMASK(2) << (2 * pinArrID));  // Clear bit
    GPIOB->MODER |= ((mode & BITMASK(2)) << (2 * pinArrID)); // Set bit
  }
}
 80007ea:	e01a      	b.n	8000822 <pinControl_setMode+0xa2>
  } else if(pinArrPort == PORT_B) {
 80007ec:	7bfb      	ldrb	r3, [r7, #15]
 80007ee:	2b01      	cmp	r3, #1
 80007f0:	d117      	bne.n	8000822 <pinControl_setMode+0xa2>
    GPIOB->MODER &= ~(BITMASK(2) << (2 * pinArrID));  // Clear bit
 80007f2:	4b10      	ldr	r3, [pc, #64]	; (8000834 <pinControl_setMode+0xb4>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	7bba      	ldrb	r2, [r7, #14]
 80007f8:	0052      	lsls	r2, r2, #1
 80007fa:	2103      	movs	r1, #3
 80007fc:	fa01 f202 	lsl.w	r2, r1, r2
 8000800:	43d2      	mvns	r2, r2
 8000802:	4611      	mov	r1, r2
 8000804:	4a0b      	ldr	r2, [pc, #44]	; (8000834 <pinControl_setMode+0xb4>)
 8000806:	400b      	ands	r3, r1
 8000808:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |= ((mode & BITMASK(2)) << (2 * pinArrID)); // Set bit
 800080a:	4b0a      	ldr	r3, [pc, #40]	; (8000834 <pinControl_setMode+0xb4>)
 800080c:	681a      	ldr	r2, [r3, #0]
 800080e:	683b      	ldr	r3, [r7, #0]
 8000810:	f003 0103 	and.w	r1, r3, #3
 8000814:	7bbb      	ldrb	r3, [r7, #14]
 8000816:	005b      	lsls	r3, r3, #1
 8000818:	fa01 f303 	lsl.w	r3, r1, r3
 800081c:	4905      	ldr	r1, [pc, #20]	; (8000834 <pinControl_setMode+0xb4>)
 800081e:	4313      	orrs	r3, r2
 8000820:	600b      	str	r3, [r1, #0]
}
 8000822:	bf00      	nop
 8000824:	3714      	adds	r7, #20
 8000826:	46bd      	mov	sp, r7
 8000828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082c:	4770      	bx	lr
 800082e:	bf00      	nop
 8000830:	20000000 	.word	0x20000000
 8000834:	48000400 	.word	0x48000400

08000838 <pinControl_setSpeed>:
// # Set pin speed
// Ex: pinControl_SetSpeed(GPIOB, 5, 01); - set PB5 to Medium speed
void pinControl_setSpeed(unsigned pin, unsigned speed) {
 8000838:	b480      	push	{r7}
 800083a:	b085      	sub	sp, #20
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
 8000840:	6039      	str	r1, [r7, #0]
  uint8_t pinArrPort = pinInfoArr[pin][0];
 8000842:	4929      	ldr	r1, [pc, #164]	; (80008e8 <pinControl_setSpeed+0xb0>)
 8000844:	687a      	ldr	r2, [r7, #4]
 8000846:	4613      	mov	r3, r2
 8000848:	005b      	lsls	r3, r3, #1
 800084a:	4413      	add	r3, r2
 800084c:	440b      	add	r3, r1
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	73fb      	strb	r3, [r7, #15]
  uint8_t pinArrID = pinInfoArr[pin][1];
 8000852:	4925      	ldr	r1, [pc, #148]	; (80008e8 <pinControl_setSpeed+0xb0>)
 8000854:	687a      	ldr	r2, [r7, #4]
 8000856:	4613      	mov	r3, r2
 8000858:	005b      	lsls	r3, r3, #1
 800085a:	4413      	add	r3, r2
 800085c:	440b      	add	r3, r1
 800085e:	3301      	adds	r3, #1
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	73bb      	strb	r3, [r7, #14]

  // get port
  if(pinArrPort == PORT_A) {
 8000864:	7bfb      	ldrb	r3, [r7, #15]
 8000866:	2b00      	cmp	r3, #0
 8000868:	d11c      	bne.n	80008a4 <pinControl_setSpeed+0x6c>
    GPIOA->OSPEEDR &= ~(BITMASK(2) << (2 * pinArrID));
 800086a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800086e:	689b      	ldr	r3, [r3, #8]
 8000870:	7bba      	ldrb	r2, [r7, #14]
 8000872:	0052      	lsls	r2, r2, #1
 8000874:	2103      	movs	r1, #3
 8000876:	fa01 f202 	lsl.w	r2, r1, r2
 800087a:	43d2      	mvns	r2, r2
 800087c:	4611      	mov	r1, r2
 800087e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000882:	400b      	ands	r3, r1
 8000884:	6093      	str	r3, [r2, #8]
    GPIOA->OSPEEDR |= ((speed & BITMASK(2)) << (2 * pinArrID));
 8000886:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800088a:	689a      	ldr	r2, [r3, #8]
 800088c:	683b      	ldr	r3, [r7, #0]
 800088e:	f003 0103 	and.w	r1, r3, #3
 8000892:	7bbb      	ldrb	r3, [r7, #14]
 8000894:	005b      	lsls	r3, r3, #1
 8000896:	fa01 f303 	lsl.w	r3, r1, r3
 800089a:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 800089e:	4313      	orrs	r3, r2
 80008a0:	608b      	str	r3, [r1, #8]
  } else if(pinArrPort == PORT_B) {
    GPIOB->OSPEEDR &= ~(BITMASK(2) << (2 * pinArrID));
    GPIOB->OSPEEDR |= ((speed & BITMASK(2)) << (2 * pinArrID));
  }
}
 80008a2:	e01a      	b.n	80008da <pinControl_setSpeed+0xa2>
  } else if(pinArrPort == PORT_B) {
 80008a4:	7bfb      	ldrb	r3, [r7, #15]
 80008a6:	2b01      	cmp	r3, #1
 80008a8:	d117      	bne.n	80008da <pinControl_setSpeed+0xa2>
    GPIOB->OSPEEDR &= ~(BITMASK(2) << (2 * pinArrID));
 80008aa:	4b10      	ldr	r3, [pc, #64]	; (80008ec <pinControl_setSpeed+0xb4>)
 80008ac:	689b      	ldr	r3, [r3, #8]
 80008ae:	7bba      	ldrb	r2, [r7, #14]
 80008b0:	0052      	lsls	r2, r2, #1
 80008b2:	2103      	movs	r1, #3
 80008b4:	fa01 f202 	lsl.w	r2, r1, r2
 80008b8:	43d2      	mvns	r2, r2
 80008ba:	4611      	mov	r1, r2
 80008bc:	4a0b      	ldr	r2, [pc, #44]	; (80008ec <pinControl_setSpeed+0xb4>)
 80008be:	400b      	ands	r3, r1
 80008c0:	6093      	str	r3, [r2, #8]
    GPIOB->OSPEEDR |= ((speed & BITMASK(2)) << (2 * pinArrID));
 80008c2:	4b0a      	ldr	r3, [pc, #40]	; (80008ec <pinControl_setSpeed+0xb4>)
 80008c4:	689a      	ldr	r2, [r3, #8]
 80008c6:	683b      	ldr	r3, [r7, #0]
 80008c8:	f003 0103 	and.w	r1, r3, #3
 80008cc:	7bbb      	ldrb	r3, [r7, #14]
 80008ce:	005b      	lsls	r3, r3, #1
 80008d0:	fa01 f303 	lsl.w	r3, r1, r3
 80008d4:	4905      	ldr	r1, [pc, #20]	; (80008ec <pinControl_setSpeed+0xb4>)
 80008d6:	4313      	orrs	r3, r2
 80008d8:	608b      	str	r3, [r1, #8]
}
 80008da:	bf00      	nop
 80008dc:	3714      	adds	r7, #20
 80008de:	46bd      	mov	sp, r7
 80008e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e4:	4770      	bx	lr
 80008e6:	bf00      	nop
 80008e8:	20000000 	.word	0x20000000
 80008ec:	48000400 	.word	0x48000400

080008f0 <pinControl_setState>:
// # Set pin state
// Ex: pinControl_SetState(28, HIGH); - set PB5 to HIGH state
void pinControl_setState(unsigned pin, unsigned mode) {
 80008f0:	b480      	push	{r7}
 80008f2:	b085      	sub	sp, #20
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
 80008f8:	6039      	str	r1, [r7, #0]
  uint8_t pinArrPort = pinInfoArr[pin][0];
 80008fa:	492f      	ldr	r1, [pc, #188]	; (80009b8 <pinControl_setState+0xc8>)
 80008fc:	687a      	ldr	r2, [r7, #4]
 80008fe:	4613      	mov	r3, r2
 8000900:	005b      	lsls	r3, r3, #1
 8000902:	4413      	add	r3, r2
 8000904:	440b      	add	r3, r1
 8000906:	781b      	ldrb	r3, [r3, #0]
 8000908:	73fb      	strb	r3, [r7, #15]
  uint8_t pinArrID = pinInfoArr[pin][1];
 800090a:	492b      	ldr	r1, [pc, #172]	; (80009b8 <pinControl_setState+0xc8>)
 800090c:	687a      	ldr	r2, [r7, #4]
 800090e:	4613      	mov	r3, r2
 8000910:	005b      	lsls	r3, r3, #1
 8000912:	4413      	add	r3, r2
 8000914:	440b      	add	r3, r1
 8000916:	3301      	adds	r3, #1
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	73bb      	strb	r3, [r7, #14]

  switch (mode) {
 800091c:	683b      	ldr	r3, [r7, #0]
 800091e:	2b00      	cmp	r3, #0
 8000920:	d020      	beq.n	8000964 <pinControl_setState+0x74>
 8000922:	2b01      	cmp	r3, #1
 8000924:	d000      	beq.n	8000928 <pinControl_setState+0x38>
    case LOW:
       if(pinArrPort == PORT_A) { GPIOA->BSRR |= (BITMASK(1) << (1 * 16 + pinArrID)); }
       else if(pinArrPort == PORT_B) { GPIOB->BSRR |= (BITMASK(1) << (1 * 16 + pinArrID)); }
      break;
  }
}
 8000926:	e040      	b.n	80009aa <pinControl_setState+0xba>
       if(pinArrPort == PORT_A) { GPIOA->BSRR |= (BITMASK(1) << (1 * pinArrID)); }
 8000928:	7bfb      	ldrb	r3, [r7, #15]
 800092a:	2b00      	cmp	r3, #0
 800092c:	d10c      	bne.n	8000948 <pinControl_setState+0x58>
 800092e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000932:	699b      	ldr	r3, [r3, #24]
 8000934:	7bba      	ldrb	r2, [r7, #14]
 8000936:	2101      	movs	r1, #1
 8000938:	fa01 f202 	lsl.w	r2, r1, r2
 800093c:	4611      	mov	r1, r2
 800093e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000942:	430b      	orrs	r3, r1
 8000944:	6193      	str	r3, [r2, #24]
      break;
 8000946:	e02d      	b.n	80009a4 <pinControl_setState+0xb4>
       else if(pinArrPort == PORT_B) { GPIOB->BSRR |= (BITMASK(1) << (1 * pinArrID)); }
 8000948:	7bfb      	ldrb	r3, [r7, #15]
 800094a:	2b01      	cmp	r3, #1
 800094c:	d12a      	bne.n	80009a4 <pinControl_setState+0xb4>
 800094e:	4b1b      	ldr	r3, [pc, #108]	; (80009bc <pinControl_setState+0xcc>)
 8000950:	699b      	ldr	r3, [r3, #24]
 8000952:	7bba      	ldrb	r2, [r7, #14]
 8000954:	2101      	movs	r1, #1
 8000956:	fa01 f202 	lsl.w	r2, r1, r2
 800095a:	4611      	mov	r1, r2
 800095c:	4a17      	ldr	r2, [pc, #92]	; (80009bc <pinControl_setState+0xcc>)
 800095e:	430b      	orrs	r3, r1
 8000960:	6193      	str	r3, [r2, #24]
      break;
 8000962:	e01f      	b.n	80009a4 <pinControl_setState+0xb4>
       if(pinArrPort == PORT_A) { GPIOA->BSRR |= (BITMASK(1) << (1 * 16 + pinArrID)); }
 8000964:	7bfb      	ldrb	r3, [r7, #15]
 8000966:	2b00      	cmp	r3, #0
 8000968:	d10d      	bne.n	8000986 <pinControl_setState+0x96>
 800096a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800096e:	699b      	ldr	r3, [r3, #24]
 8000970:	7bba      	ldrb	r2, [r7, #14]
 8000972:	3210      	adds	r2, #16
 8000974:	2101      	movs	r1, #1
 8000976:	fa01 f202 	lsl.w	r2, r1, r2
 800097a:	4611      	mov	r1, r2
 800097c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000980:	430b      	orrs	r3, r1
 8000982:	6193      	str	r3, [r2, #24]
      break;
 8000984:	e010      	b.n	80009a8 <pinControl_setState+0xb8>
       else if(pinArrPort == PORT_B) { GPIOB->BSRR |= (BITMASK(1) << (1 * 16 + pinArrID)); }
 8000986:	7bfb      	ldrb	r3, [r7, #15]
 8000988:	2b01      	cmp	r3, #1
 800098a:	d10d      	bne.n	80009a8 <pinControl_setState+0xb8>
 800098c:	4b0b      	ldr	r3, [pc, #44]	; (80009bc <pinControl_setState+0xcc>)
 800098e:	699b      	ldr	r3, [r3, #24]
 8000990:	7bba      	ldrb	r2, [r7, #14]
 8000992:	3210      	adds	r2, #16
 8000994:	2101      	movs	r1, #1
 8000996:	fa01 f202 	lsl.w	r2, r1, r2
 800099a:	4611      	mov	r1, r2
 800099c:	4a07      	ldr	r2, [pc, #28]	; (80009bc <pinControl_setState+0xcc>)
 800099e:	430b      	orrs	r3, r1
 80009a0:	6193      	str	r3, [r2, #24]
      break;
 80009a2:	e001      	b.n	80009a8 <pinControl_setState+0xb8>
      break;
 80009a4:	bf00      	nop
 80009a6:	e000      	b.n	80009aa <pinControl_setState+0xba>
      break;
 80009a8:	bf00      	nop
}
 80009aa:	bf00      	nop
 80009ac:	3714      	adds	r7, #20
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop
 80009b8:	20000000 	.word	0x20000000
 80009bc:	48000400 	.word	0x48000400

080009c0 <ledIndicator_initPins>:
}*/

// ### State indicator ###
// # Init indication LED's
// Doc: this function has set LED OUTPUT mode and LOW state
void ledIndicator_initPins(void) {
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
  uint8_t ledArray[3] = {RED_LED, YELLOW_LED, GREEN_LED};
 80009c6:	4a19      	ldr	r2, [pc, #100]	; (8000a2c <ledIndicator_initPins+0x6c>)
 80009c8:	1d3b      	adds	r3, r7, #4
 80009ca:	6812      	ldr	r2, [r2, #0]
 80009cc:	4611      	mov	r1, r2
 80009ce:	8019      	strh	r1, [r3, #0]
 80009d0:	3302      	adds	r3, #2
 80009d2:	0c12      	lsrs	r2, r2, #16
 80009d4:	701a      	strb	r2, [r3, #0]
  for(uint8_t pinN = 0; pinN < 3; pinN++) {
 80009d6:	2300      	movs	r3, #0
 80009d8:	71fb      	strb	r3, [r7, #7]
 80009da:	e020      	b.n	8000a1e <ledIndicator_initPins+0x5e>
    pinControl_setMode(ledArray[pinN], OUTPUT);
 80009dc:	79fb      	ldrb	r3, [r7, #7]
 80009de:	f107 0208 	add.w	r2, r7, #8
 80009e2:	4413      	add	r3, r2
 80009e4:	f813 3c04 	ldrb.w	r3, [r3, #-4]
 80009e8:	2101      	movs	r1, #1
 80009ea:	4618      	mov	r0, r3
 80009ec:	f7ff fec8 	bl	8000780 <pinControl_setMode>
    pinControl_setSpeed(ledArray[pinN], MEDIUM);
 80009f0:	79fb      	ldrb	r3, [r7, #7]
 80009f2:	f107 0208 	add.w	r2, r7, #8
 80009f6:	4413      	add	r3, r2
 80009f8:	f813 3c04 	ldrb.w	r3, [r3, #-4]
 80009fc:	2101      	movs	r1, #1
 80009fe:	4618      	mov	r0, r3
 8000a00:	f7ff ff1a 	bl	8000838 <pinControl_setSpeed>
    pinControl_setState(ledArray[pinN], LOW);
 8000a04:	79fb      	ldrb	r3, [r7, #7]
 8000a06:	f107 0208 	add.w	r2, r7, #8
 8000a0a:	4413      	add	r3, r2
 8000a0c:	f813 3c04 	ldrb.w	r3, [r3, #-4]
 8000a10:	2100      	movs	r1, #0
 8000a12:	4618      	mov	r0, r3
 8000a14:	f7ff ff6c 	bl	80008f0 <pinControl_setState>
  for(uint8_t pinN = 0; pinN < 3; pinN++) {
 8000a18:	79fb      	ldrb	r3, [r7, #7]
 8000a1a:	3301      	adds	r3, #1
 8000a1c:	71fb      	strb	r3, [r7, #7]
 8000a1e:	79fb      	ldrb	r3, [r7, #7]
 8000a20:	2b02      	cmp	r3, #2
 8000a22:	d9db      	bls.n	80009dc <ledIndicator_initPins+0x1c>
  }
}
 8000a24:	bf00      	nop
 8000a26:	3708      	adds	r7, #8
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	08004080 	.word	0x08004080

08000a30 <ledIndicator_setMode>:
// # Control indication mode
// Doc: this function selected LED indication mode, set-clear pixels
void ledIndicator_setMode(uint8_t mode, uint8_t ledName, uint16_t blinkTime) {
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b084      	sub	sp, #16
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	4603      	mov	r3, r0
 8000a38:	71fb      	strb	r3, [r7, #7]
 8000a3a:	460b      	mov	r3, r1
 8000a3c:	71bb      	strb	r3, [r7, #6]
 8000a3e:	4613      	mov	r3, r2
 8000a40:	80bb      	strh	r3, [r7, #4]
  uint8_t ledArray[3] = {RED_LED, YELLOW_LED, GREEN_LED};
 8000a42:	4a20      	ldr	r2, [pc, #128]	; (8000ac4 <ledIndicator_setMode+0x94>)
 8000a44:	f107 030c 	add.w	r3, r7, #12
 8000a48:	6812      	ldr	r2, [r2, #0]
 8000a4a:	4611      	mov	r1, r2
 8000a4c:	8019      	strh	r1, [r3, #0]
 8000a4e:	3302      	adds	r3, #2
 8000a50:	0c12      	lsrs	r2, r2, #16
 8000a52:	701a      	strb	r2, [r3, #0]

  // clear all leds and current mode
  for(uint8_t pinN = 0; pinN < 3; pinN++) { pinControl_setState(ledArray[pinN], LOW); }
 8000a54:	2300      	movs	r3, #0
 8000a56:	73fb      	strb	r3, [r7, #15]
 8000a58:	e00c      	b.n	8000a74 <ledIndicator_setMode+0x44>
 8000a5a:	7bfb      	ldrb	r3, [r7, #15]
 8000a5c:	f107 0210 	add.w	r2, r7, #16
 8000a60:	4413      	add	r3, r2
 8000a62:	f813 3c04 	ldrb.w	r3, [r3, #-4]
 8000a66:	2100      	movs	r1, #0
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f7ff ff41 	bl	80008f0 <pinControl_setState>
 8000a6e:	7bfb      	ldrb	r3, [r7, #15]
 8000a70:	3301      	adds	r3, #1
 8000a72:	73fb      	strb	r3, [r7, #15]
 8000a74:	7bfb      	ldrb	r3, [r7, #15]
 8000a76:	2b02      	cmp	r3, #2
 8000a78:	d9ef      	bls.n	8000a5a <ledIndicator_setMode+0x2a>
  ledIndicator_VAR_mode = 0;
 8000a7a:	4b13      	ldr	r3, [pc, #76]	; (8000ac8 <ledIndicator_setMode+0x98>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	701a      	strb	r2, [r3, #0]
  if(mode == CLEAR) { return; } // We have already cleared all LEDs
 8000a80:	79fb      	ldrb	r3, [r7, #7]
 8000a82:	2b03      	cmp	r3, #3
 8000a84:	d019      	beq.n	8000aba <ledIndicator_setMode+0x8a>

  // select mode
  switch (mode) {
 8000a86:	79fb      	ldrb	r3, [r7, #7]
 8000a88:	2b01      	cmp	r3, #1
 8000a8a:	d002      	beq.n	8000a92 <ledIndicator_setMode+0x62>
 8000a8c:	2b02      	cmp	r3, #2
 8000a8e:	d009      	beq.n	8000aa4 <ledIndicator_setMode+0x74>
 8000a90:	e014      	b.n	8000abc <ledIndicator_setMode+0x8c>
    case STATIC:
       pinControl_setState(ledName, HIGH);
 8000a92:	79bb      	ldrb	r3, [r7, #6]
 8000a94:	2101      	movs	r1, #1
 8000a96:	4618      	mov	r0, r3
 8000a98:	f7ff ff2a 	bl	80008f0 <pinControl_setState>
       ledIndicator_VAR_mode = 1;
 8000a9c:	4b0a      	ldr	r3, [pc, #40]	; (8000ac8 <ledIndicator_setMode+0x98>)
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	701a      	strb	r2, [r3, #0]
      break;
 8000aa2:	e00b      	b.n	8000abc <ledIndicator_setMode+0x8c>
    case BLINK:
       ledIndicator_VAR_ledName = ledName;
 8000aa4:	4a09      	ldr	r2, [pc, #36]	; (8000acc <ledIndicator_setMode+0x9c>)
 8000aa6:	79bb      	ldrb	r3, [r7, #6]
 8000aa8:	7013      	strb	r3, [r2, #0]
       ledIndicator_VAR_blinkT = blinkTime;
 8000aaa:	4a09      	ldr	r2, [pc, #36]	; (8000ad0 <ledIndicator_setMode+0xa0>)
 8000aac:	88bb      	ldrh	r3, [r7, #4]
 8000aae:	8013      	strh	r3, [r2, #0]
       ledIndicator_VAR_mode = 2;
 8000ab0:	4b05      	ldr	r3, [pc, #20]	; (8000ac8 <ledIndicator_setMode+0x98>)
 8000ab2:	2202      	movs	r2, #2
 8000ab4:	701a      	strb	r2, [r3, #0]
      break;
 8000ab6:	bf00      	nop
 8000ab8:	e000      	b.n	8000abc <ledIndicator_setMode+0x8c>
  if(mode == CLEAR) { return; } // We have already cleared all LEDs
 8000aba:	bf00      	nop
  }
}
 8000abc:	3710      	adds	r7, #16
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	08004080 	.word	0x08004080
 8000ac8:	20000068 	.word	0x20000068
 8000acc:	20000069 	.word	0x20000069
 8000ad0:	2000006a 	.word	0x2000006a

08000ad4 <ledIndicator_loopBlink>:
// # LED indication blink mode loop
// Doc: this function selected LED indication mode, set-clear led
void ledIndicator_loopBlink(void) {
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
  static uint32_t blinkTimer;
  static uint8_t  modeActive;
  uint8_t currentMode = ledIndicator_VAR_mode;
 8000ada:	4b26      	ldr	r3, [pc, #152]	; (8000b74 <ledIndicator_loopBlink+0xa0>)
 8000adc:	781b      	ldrb	r3, [r3, #0]
 8000ade:	71fb      	strb	r3, [r7, #7]


  // start-stop
  if(currentMode == 2 && !modeActive) {
 8000ae0:	79fb      	ldrb	r3, [r7, #7]
 8000ae2:	2b02      	cmp	r3, #2
 8000ae4:	d10b      	bne.n	8000afe <ledIndicator_loopBlink+0x2a>
 8000ae6:	4b24      	ldr	r3, [pc, #144]	; (8000b78 <ledIndicator_loopBlink+0xa4>)
 8000ae8:	781b      	ldrb	r3, [r3, #0]
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d107      	bne.n	8000afe <ledIndicator_loopBlink+0x2a>
    blinkTimer = millis();
 8000aee:	f7ff fe0f 	bl	8000710 <millis>
 8000af2:	4602      	mov	r2, r0
 8000af4:	4b21      	ldr	r3, [pc, #132]	; (8000b7c <ledIndicator_loopBlink+0xa8>)
 8000af6:	601a      	str	r2, [r3, #0]
    modeActive = 1;
 8000af8:	4b1f      	ldr	r3, [pc, #124]	; (8000b78 <ledIndicator_loopBlink+0xa4>)
 8000afa:	2201      	movs	r2, #1
 8000afc:	701a      	strb	r2, [r3, #0]
  }
  if(modeActive && currentMode != 2) {
 8000afe:	4b1e      	ldr	r3, [pc, #120]	; (8000b78 <ledIndicator_loopBlink+0xa4>)
 8000b00:	781b      	ldrb	r3, [r3, #0]
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d009      	beq.n	8000b1a <ledIndicator_loopBlink+0x46>
 8000b06:	79fb      	ldrb	r3, [r7, #7]
 8000b08:	2b02      	cmp	r3, #2
 8000b0a:	d006      	beq.n	8000b1a <ledIndicator_loopBlink+0x46>
    blinkTimer = 0;
 8000b0c:	4b1b      	ldr	r3, [pc, #108]	; (8000b7c <ledIndicator_loopBlink+0xa8>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	601a      	str	r2, [r3, #0]
    modeActive = 0;
 8000b12:	4b19      	ldr	r3, [pc, #100]	; (8000b78 <ledIndicator_loopBlink+0xa4>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	701a      	strb	r2, [r3, #0]
    return;
 8000b18:	e029      	b.n	8000b6e <ledIndicator_loopBlink+0x9a>
  }

  // loop (modeActive used for alternate function (change led state))
  if(modeActive) {
 8000b1a:	4b17      	ldr	r3, [pc, #92]	; (8000b78 <ledIndicator_loopBlink+0xa4>)
 8000b1c:	781b      	ldrb	r3, [r3, #0]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d025      	beq.n	8000b6e <ledIndicator_loopBlink+0x9a>
    if(millis() - blinkTimer >= ledIndicator_VAR_blinkT) {
 8000b22:	f7ff fdf5 	bl	8000710 <millis>
 8000b26:	4602      	mov	r2, r0
 8000b28:	4b14      	ldr	r3, [pc, #80]	; (8000b7c <ledIndicator_loopBlink+0xa8>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	1ad3      	subs	r3, r2, r3
 8000b2e:	4a14      	ldr	r2, [pc, #80]	; (8000b80 <ledIndicator_loopBlink+0xac>)
 8000b30:	8812      	ldrh	r2, [r2, #0]
 8000b32:	4293      	cmp	r3, r2
 8000b34:	d31b      	bcc.n	8000b6e <ledIndicator_loopBlink+0x9a>
      if(modeActive == 1) {
 8000b36:	4b10      	ldr	r3, [pc, #64]	; (8000b78 <ledIndicator_loopBlink+0xa4>)
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	2b01      	cmp	r3, #1
 8000b3c:	d109      	bne.n	8000b52 <ledIndicator_loopBlink+0x7e>
        pinControl_setState(ledIndicator_VAR_ledName, HIGH);
 8000b3e:	4b11      	ldr	r3, [pc, #68]	; (8000b84 <ledIndicator_loopBlink+0xb0>)
 8000b40:	781b      	ldrb	r3, [r3, #0]
 8000b42:	2101      	movs	r1, #1
 8000b44:	4618      	mov	r0, r3
 8000b46:	f7ff fed3 	bl	80008f0 <pinControl_setState>
        modeActive = 2;
 8000b4a:	4b0b      	ldr	r3, [pc, #44]	; (8000b78 <ledIndicator_loopBlink+0xa4>)
 8000b4c:	2202      	movs	r2, #2
 8000b4e:	701a      	strb	r2, [r3, #0]
 8000b50:	e008      	b.n	8000b64 <ledIndicator_loopBlink+0x90>
      } else {
        pinControl_setState(ledIndicator_VAR_ledName, LOW);
 8000b52:	4b0c      	ldr	r3, [pc, #48]	; (8000b84 <ledIndicator_loopBlink+0xb0>)
 8000b54:	781b      	ldrb	r3, [r3, #0]
 8000b56:	2100      	movs	r1, #0
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f7ff fec9 	bl	80008f0 <pinControl_setState>
        modeActive = 1;
 8000b5e:	4b06      	ldr	r3, [pc, #24]	; (8000b78 <ledIndicator_loopBlink+0xa4>)
 8000b60:	2201      	movs	r2, #1
 8000b62:	701a      	strb	r2, [r3, #0]
      }
      blinkTimer = millis();
 8000b64:	f7ff fdd4 	bl	8000710 <millis>
 8000b68:	4602      	mov	r2, r0
 8000b6a:	4b04      	ldr	r3, [pc, #16]	; (8000b7c <ledIndicator_loopBlink+0xa8>)
 8000b6c:	601a      	str	r2, [r3, #0]
    }
  }

}
 8000b6e:	3708      	adds	r7, #8
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	20000068 	.word	0x20000068
 8000b78:	20000079 	.word	0x20000079
 8000b7c:	2000007c 	.word	0x2000007c
 8000b80:	2000006a 	.word	0x2000006a
 8000b84:	20000069 	.word	0x20000069

08000b88 <motionDrive_Init>:

// ### Motion drive ###
// # Init driver
// Doc: this function init motor driver pins, return 1 (success init)
void motionDrive_Init(void) {
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
  uint8_t pinArray[3] = {mStepPin, mDirectionPin, mDriveStartPin};
 8000b8e:	4a19      	ldr	r2, [pc, #100]	; (8000bf4 <motionDrive_Init+0x6c>)
 8000b90:	1d3b      	adds	r3, r7, #4
 8000b92:	6812      	ldr	r2, [r2, #0]
 8000b94:	4611      	mov	r1, r2
 8000b96:	8019      	strh	r1, [r3, #0]
 8000b98:	3302      	adds	r3, #2
 8000b9a:	0c12      	lsrs	r2, r2, #16
 8000b9c:	701a      	strb	r2, [r3, #0]
  for(uint8_t pinN = 0; pinN < 3; pinN++) {
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	71fb      	strb	r3, [r7, #7]
 8000ba2:	e020      	b.n	8000be6 <motionDrive_Init+0x5e>
    pinControl_setMode(pinArray[pinN], OUTPUT);
 8000ba4:	79fb      	ldrb	r3, [r7, #7]
 8000ba6:	f107 0208 	add.w	r2, r7, #8
 8000baa:	4413      	add	r3, r2
 8000bac:	f813 3c04 	ldrb.w	r3, [r3, #-4]
 8000bb0:	2101      	movs	r1, #1
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f7ff fde4 	bl	8000780 <pinControl_setMode>
    pinControl_setSpeed(pinArray[pinN], MEDIUM);
 8000bb8:	79fb      	ldrb	r3, [r7, #7]
 8000bba:	f107 0208 	add.w	r2, r7, #8
 8000bbe:	4413      	add	r3, r2
 8000bc0:	f813 3c04 	ldrb.w	r3, [r3, #-4]
 8000bc4:	2101      	movs	r1, #1
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f7ff fe36 	bl	8000838 <pinControl_setSpeed>
    pinControl_setState(pinArray[pinN], LOW);
 8000bcc:	79fb      	ldrb	r3, [r7, #7]
 8000bce:	f107 0208 	add.w	r2, r7, #8
 8000bd2:	4413      	add	r3, r2
 8000bd4:	f813 3c04 	ldrb.w	r3, [r3, #-4]
 8000bd8:	2100      	movs	r1, #0
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f7ff fe88 	bl	80008f0 <pinControl_setState>
  for(uint8_t pinN = 0; pinN < 3; pinN++) {
 8000be0:	79fb      	ldrb	r3, [r7, #7]
 8000be2:	3301      	adds	r3, #1
 8000be4:	71fb      	strb	r3, [r7, #7]
 8000be6:	79fb      	ldrb	r3, [r7, #7]
 8000be8:	2b02      	cmp	r3, #2
 8000bea:	d9db      	bls.n	8000ba4 <motionDrive_Init+0x1c>
  }
}
 8000bec:	bf00      	nop
 8000bee:	3708      	adds	r7, #8
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	08004084 	.word	0x08004084

08000bf8 <motionDrive_Loop>:
// # Loop motion drive
// Doc: Drive step motor. For control - set/reset motionStruct.driveActive flag (1 - EN / 0 - STOP)
// Doc: For change speed - call external change-speed function
void motionDrive_Loop(void) {
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
  static uint32_t usTimer;

  #define MotorStepPin_Local 1 // for local used

  // start-stop drive
  if(mDrive_VAR_DriveActive && !activeProcess) {
 8000bfc:	4b33      	ldr	r3, [pc, #204]	; (8000ccc <motionDrive_Loop+0xd4>)
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d00c      	beq.n	8000c1e <motionDrive_Loop+0x26>
 8000c04:	4b32      	ldr	r3, [pc, #200]	; (8000cd0 <motionDrive_Loop+0xd8>)
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d108      	bne.n	8000c1e <motionDrive_Loop+0x26>
    pinControl_setState(mDirectionPin, mDrive_VAR_curDir);
 8000c0c:	4b31      	ldr	r3, [pc, #196]	; (8000cd4 <motionDrive_Loop+0xdc>)
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	4619      	mov	r1, r3
 8000c12:	200a      	movs	r0, #10
 8000c14:	f7ff fe6c 	bl	80008f0 <pinControl_setState>
    activeProcess = 1;
 8000c18:	4b2d      	ldr	r3, [pc, #180]	; (8000cd0 <motionDrive_Loop+0xd8>)
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	701a      	strb	r2, [r3, #0]
  }
  if(activeProcess && !mDrive_VAR_DriveActive) {
 8000c1e:	4b2c      	ldr	r3, [pc, #176]	; (8000cd0 <motionDrive_Loop+0xd8>)
 8000c20:	781b      	ldrb	r3, [r3, #0]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d015      	beq.n	8000c52 <motionDrive_Loop+0x5a>
 8000c26:	4b29      	ldr	r3, [pc, #164]	; (8000ccc <motionDrive_Loop+0xd4>)
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d111      	bne.n	8000c52 <motionDrive_Loop+0x5a>
    pinControl_setState(mStepPin, LOW);
 8000c2e:	2100      	movs	r1, #0
 8000c30:	200b      	movs	r0, #11
 8000c32:	f7ff fe5d 	bl	80008f0 <pinControl_setState>
    pinControl_setState(mDirectionPin, LOW);
 8000c36:	2100      	movs	r1, #0
 8000c38:	200a      	movs	r0, #10
 8000c3a:	f7ff fe59 	bl	80008f0 <pinControl_setState>
    usTimer       = 0;
 8000c3e:	4b26      	ldr	r3, [pc, #152]	; (8000cd8 <motionDrive_Loop+0xe0>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	601a      	str	r2, [r3, #0]
    activeProcess = 0;
 8000c44:	4b22      	ldr	r3, [pc, #136]	; (8000cd0 <motionDrive_Loop+0xd8>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	701a      	strb	r2, [r3, #0]
    stageNumber   = 0;
 8000c4a:	4b24      	ldr	r3, [pc, #144]	; (8000cdc <motionDrive_Loop+0xe4>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	701a      	strb	r2, [r3, #0]
    return;
 8000c50:	e03b      	b.n	8000cca <motionDrive_Loop+0xd2>
  }

  // drive
  if(activeProcess) {
 8000c52:	4b1f      	ldr	r3, [pc, #124]	; (8000cd0 <motionDrive_Loop+0xd8>)
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d037      	beq.n	8000cca <motionDrive_Loop+0xd2>

    // stage #1 - HIGH
    if((stageNumber == 1) && (micros() - usTimer >= mDrive_VAR_mLowTime)) {
 8000c5a:	4b20      	ldr	r3, [pc, #128]	; (8000cdc <motionDrive_Loop+0xe4>)
 8000c5c:	781b      	ldrb	r3, [r3, #0]
 8000c5e:	2b01      	cmp	r3, #1
 8000c60:	d117      	bne.n	8000c92 <motionDrive_Loop+0x9a>
 8000c62:	f7ff fd61 	bl	8000728 <micros>
 8000c66:	4602      	mov	r2, r0
 8000c68:	4b1b      	ldr	r3, [pc, #108]	; (8000cd8 <motionDrive_Loop+0xe0>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	1ad3      	subs	r3, r2, r3
 8000c6e:	4a1c      	ldr	r2, [pc, #112]	; (8000ce0 <motionDrive_Loop+0xe8>)
 8000c70:	8812      	ldrh	r2, [r2, #0]
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d30d      	bcc.n	8000c92 <motionDrive_Loop+0x9a>
      stageNumber = 0;
 8000c76:	4b19      	ldr	r3, [pc, #100]	; (8000cdc <motionDrive_Loop+0xe4>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	701a      	strb	r2, [r3, #0]
      // set HIGH state to step pin (PB1)
      GPIOB->BSRR |= (BITMASK(1) << (1 * MotorStepPin_Local));
 8000c7c:	4b19      	ldr	r3, [pc, #100]	; (8000ce4 <motionDrive_Loop+0xec>)
 8000c7e:	699b      	ldr	r3, [r3, #24]
 8000c80:	4a18      	ldr	r2, [pc, #96]	; (8000ce4 <motionDrive_Loop+0xec>)
 8000c82:	f043 0302 	orr.w	r3, r3, #2
 8000c86:	6193      	str	r3, [r2, #24]
      usTimer = micros();
 8000c88:	f7ff fd4e 	bl	8000728 <micros>
 8000c8c:	4602      	mov	r2, r0
 8000c8e:	4b12      	ldr	r3, [pc, #72]	; (8000cd8 <motionDrive_Loop+0xe0>)
 8000c90:	601a      	str	r2, [r3, #0]
    }
    // stage #2 - LOW
    if((stageNumber == 0) && (micros() - usTimer >= mDrive_VAR_mHighTime)) {
 8000c92:	4b12      	ldr	r3, [pc, #72]	; (8000cdc <motionDrive_Loop+0xe4>)
 8000c94:	781b      	ldrb	r3, [r3, #0]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d117      	bne.n	8000cca <motionDrive_Loop+0xd2>
 8000c9a:	f7ff fd45 	bl	8000728 <micros>
 8000c9e:	4602      	mov	r2, r0
 8000ca0:	4b0d      	ldr	r3, [pc, #52]	; (8000cd8 <motionDrive_Loop+0xe0>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	1ad3      	subs	r3, r2, r3
 8000ca6:	4a10      	ldr	r2, [pc, #64]	; (8000ce8 <motionDrive_Loop+0xf0>)
 8000ca8:	8812      	ldrh	r2, [r2, #0]
 8000caa:	4293      	cmp	r3, r2
 8000cac:	d30d      	bcc.n	8000cca <motionDrive_Loop+0xd2>
      stageNumber = 1;
 8000cae:	4b0b      	ldr	r3, [pc, #44]	; (8000cdc <motionDrive_Loop+0xe4>)
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	701a      	strb	r2, [r3, #0]
      // set LOW state to step pin (PB1)
      GPIOB->BSRR |= (BITMASK(1) << (1 * 16 + MotorStepPin_Local));
 8000cb4:	4b0b      	ldr	r3, [pc, #44]	; (8000ce4 <motionDrive_Loop+0xec>)
 8000cb6:	699b      	ldr	r3, [r3, #24]
 8000cb8:	4a0a      	ldr	r2, [pc, #40]	; (8000ce4 <motionDrive_Loop+0xec>)
 8000cba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cbe:	6193      	str	r3, [r2, #24]
      usTimer = micros();
 8000cc0:	f7ff fd32 	bl	8000728 <micros>
 8000cc4:	4602      	mov	r2, r0
 8000cc6:	4b04      	ldr	r3, [pc, #16]	; (8000cd8 <motionDrive_Loop+0xe0>)
 8000cc8:	601a      	str	r2, [r3, #0]
    }

  }
}
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	2000006d 	.word	0x2000006d
 8000cd0:	20000080 	.word	0x20000080
 8000cd4:	2000006c 	.word	0x2000006c
 8000cd8:	20000084 	.word	0x20000084
 8000cdc:	20000088 	.word	0x20000088
 8000ce0:	20000070 	.word	0x20000070
 8000ce4:	48000400 	.word	0x48000400
 8000ce8:	2000006e 	.word	0x2000006e

08000cec <motionDrive_setSpeed>:
// # Motion drive set speed
// Doc: This function set speed drive (stepHighTime duration, stepLowTime duration)
// Return: 1 - success, 0 - fault
uint8_t motionDrive_setSpeed(uint16_t mHighTime, uint16_t mLowTime) {
 8000cec:	b480      	push	{r7}
 8000cee:	b083      	sub	sp, #12
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	460a      	mov	r2, r1
 8000cf6:	80fb      	strh	r3, [r7, #6]
 8000cf8:	4613      	mov	r3, r2
 8000cfa:	80bb      	strh	r3, [r7, #4]
  if(!mHighTime || !mLowTime) { return 0; }
 8000cfc:	88fb      	ldrh	r3, [r7, #6]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d002      	beq.n	8000d08 <motionDrive_setSpeed+0x1c>
 8000d02:	88bb      	ldrh	r3, [r7, #4]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d101      	bne.n	8000d0c <motionDrive_setSpeed+0x20>
 8000d08:	2300      	movs	r3, #0
 8000d0a:	e006      	b.n	8000d1a <motionDrive_setSpeed+0x2e>
  mDrive_VAR_mHighTime = mHighTime;
 8000d0c:	4a06      	ldr	r2, [pc, #24]	; (8000d28 <motionDrive_setSpeed+0x3c>)
 8000d0e:	88fb      	ldrh	r3, [r7, #6]
 8000d10:	8013      	strh	r3, [r2, #0]
  mDrive_VAR_mLowTime  = mLowTime;
 8000d12:	4a06      	ldr	r2, [pc, #24]	; (8000d2c <motionDrive_setSpeed+0x40>)
 8000d14:	88bb      	ldrh	r3, [r7, #4]
 8000d16:	8013      	strh	r3, [r2, #0]
  return 1;
 8000d18:	2301      	movs	r3, #1
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	370c      	adds	r7, #12
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop
 8000d28:	2000006e 	.word	0x2000006e
 8000d2c:	20000070 	.word	0x20000070

08000d30 <motionDrive_Control>:
// # Motion control mode
// Doc: This function control motion driver.
// Ex. call: motionFunc.control(START, UP) - start UP drive + smooth accelerate or motionFunc.control(STOP, DOWN) - stop drive
// Return: 1 - success
uint8_t motionDrive_Control(uint8_t mode, uint8_t direction) {
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	4603      	mov	r3, r0
 8000d38:	460a      	mov	r2, r1
 8000d3a:	71fb      	strb	r3, [r7, #7]
 8000d3c:	4613      	mov	r3, r2
 8000d3e:	71bb      	strb	r3, [r7, #6]
  mDrive_VAR_curDir = direction;
 8000d40:	4a11      	ldr	r2, [pc, #68]	; (8000d88 <motionDrive_Control+0x58>)
 8000d42:	79bb      	ldrb	r3, [r7, #6]
 8000d44:	7013      	strb	r3, [r2, #0]
  switch (mode) {
 8000d46:	79fb      	ldrb	r3, [r7, #7]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d009      	beq.n	8000d60 <motionDrive_Control+0x30>
 8000d4c:	2b01      	cmp	r3, #1
 8000d4e:	d115      	bne.n	8000d7c <motionDrive_Control+0x4c>
    case START:
       //motionDrive_setSpeed(5000, 5000);
       pinControl_setState(mDriveStartPin, HIGH);
 8000d50:	2101      	movs	r1, #1
 8000d52:	2008      	movs	r0, #8
 8000d54:	f7ff fdcc 	bl	80008f0 <pinControl_setState>
       mDrive_VAR_DriveActive = START;
 8000d58:	4b0c      	ldr	r3, [pc, #48]	; (8000d8c <motionDrive_Control+0x5c>)
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	701a      	strb	r2, [r3, #0]
      break;
 8000d5e:	e00d      	b.n	8000d7c <motionDrive_Control+0x4c>
    case STOP:
       motionDrive_setSpeed(5000, 5000); // 5k - random value (not set zero!)
 8000d60:	f241 3188 	movw	r1, #5000	; 0x1388
 8000d64:	f241 3088 	movw	r0, #5000	; 0x1388
 8000d68:	f7ff ffc0 	bl	8000cec <motionDrive_setSpeed>
       pinControl_setState(mDriveStartPin, LOW);
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	2008      	movs	r0, #8
 8000d70:	f7ff fdbe 	bl	80008f0 <pinControl_setState>
       mDrive_VAR_DriveActive = STOP;
 8000d74:	4b05      	ldr	r3, [pc, #20]	; (8000d8c <motionDrive_Control+0x5c>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	701a      	strb	r2, [r3, #0]
      break;
 8000d7a:	bf00      	nop
  }
  return 1;
 8000d7c:	2301      	movs	r3, #1
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	3708      	adds	r7, #8
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	2000006c 	.word	0x2000006c
 8000d8c:	2000006d 	.word	0x2000006d

08000d90 <motionDrive_speedToLowTime>:

// # Convert speed (steps/sec) to low time per x1 step
uint16_t motionDrive_speedToLowTime(uint16_t summSteps, uint16_t hTime) {
 8000d90:	b590      	push	{r4, r7, lr}
 8000d92:	b085      	sub	sp, #20
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	4603      	mov	r3, r0
 8000d98:	460a      	mov	r2, r1
 8000d9a:	80fb      	strh	r3, [r7, #6]
 8000d9c:	4613      	mov	r3, r2
 8000d9e:	80bb      	strh	r3, [r7, #4]
  uint16_t summHighTime = hTime * summSteps;
 8000da0:	88ba      	ldrh	r2, [r7, #4]
 8000da2:	88fb      	ldrh	r3, [r7, #6]
 8000da4:	fb12 f303 	smulbb	r3, r2, r3
 8000da8:	81fb      	strh	r3, [r7, #14]
  return ceil((1000000 - summHighTime) / summSteps);
 8000daa:	89fb      	ldrh	r3, [r7, #14]
 8000dac:	f5c3 2374 	rsb	r3, r3, #999424	; 0xf4000
 8000db0:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8000db4:	88fa      	ldrh	r2, [r7, #6]
 8000db6:	fb93 f3f2 	sdiv	r3, r3, r2
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f7ff fb56 	bl	800046c <__aeabi_i2d>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	460c      	mov	r4, r1
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	4621      	mov	r1, r4
 8000dc8:	f7ff fbba 	bl	8000540 <__aeabi_d2uiz>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	b29b      	uxth	r3, r3
}
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	3714      	adds	r7, #20
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd90      	pop	{r4, r7, pc}

08000dd8 <motionDrive_getAccelerateSpeed>:

// # Get accelerate speed.
// This function has will return the nominal speed value modified by changePercent percent.
// changePercent = 0 (not change) / > 0 (increment) / < 0 (decrement)
uint16_t motionDrive_getAccelerateSpeed(uint16_t nomSpeed, int8_t changePercent) {
 8000dd8:	b590      	push	{r4, r7, lr}
 8000dda:	b083      	sub	sp, #12
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	4603      	mov	r3, r0
 8000de0:	460a      	mov	r2, r1
 8000de2:	80fb      	strh	r3, [r7, #6]
 8000de4:	4613      	mov	r3, r2
 8000de6:	717b      	strb	r3, [r7, #5]
  if(changePercent > 0) { return ceil(nomSpeed + ((nomSpeed / 100) * changePercent)); }
 8000de8:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	dd18      	ble.n	8000e22 <motionDrive_getAccelerateSpeed+0x4a>
 8000df0:	88fa      	ldrh	r2, [r7, #6]
 8000df2:	88fb      	ldrh	r3, [r7, #6]
 8000df4:	491d      	ldr	r1, [pc, #116]	; (8000e6c <motionDrive_getAccelerateSpeed+0x94>)
 8000df6:	fba1 1303 	umull	r1, r3, r1, r3
 8000dfa:	095b      	lsrs	r3, r3, #5
 8000dfc:	b29b      	uxth	r3, r3
 8000dfe:	4619      	mov	r1, r3
 8000e00:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000e04:	fb03 f301 	mul.w	r3, r3, r1
 8000e08:	4413      	add	r3, r2
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f7ff fb2e 	bl	800046c <__aeabi_i2d>
 8000e10:	4603      	mov	r3, r0
 8000e12:	460c      	mov	r4, r1
 8000e14:	4618      	mov	r0, r3
 8000e16:	4621      	mov	r1, r4
 8000e18:	f7ff fb92 	bl	8000540 <__aeabi_d2uiz>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	b29b      	uxth	r3, r3
 8000e20:	e020      	b.n	8000e64 <motionDrive_getAccelerateSpeed+0x8c>
  else if(changePercent < 0) { return ceil(nomSpeed - ((nomSpeed / 100) * abs(changePercent))); }
 8000e22:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	da1b      	bge.n	8000e62 <motionDrive_getAccelerateSpeed+0x8a>
 8000e2a:	88fa      	ldrh	r2, [r7, #6]
 8000e2c:	88fb      	ldrh	r3, [r7, #6]
 8000e2e:	490f      	ldr	r1, [pc, #60]	; (8000e6c <motionDrive_getAccelerateSpeed+0x94>)
 8000e30:	fba1 1303 	umull	r1, r3, r1, r3
 8000e34:	095b      	lsrs	r3, r3, #5
 8000e36:	b29b      	uxth	r3, r3
 8000e38:	4619      	mov	r1, r3
 8000e3a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	bfb8      	it	lt
 8000e42:	425b      	neglt	r3, r3
 8000e44:	fb03 f301 	mul.w	r3, r3, r1
 8000e48:	1ad3      	subs	r3, r2, r3
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f7ff fb0e 	bl	800046c <__aeabi_i2d>
 8000e50:	4603      	mov	r3, r0
 8000e52:	460c      	mov	r4, r1
 8000e54:	4618      	mov	r0, r3
 8000e56:	4621      	mov	r1, r4
 8000e58:	f7ff fb72 	bl	8000540 <__aeabi_d2uiz>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	b29b      	uxth	r3, r3
 8000e60:	e000      	b.n	8000e64 <motionDrive_getAccelerateSpeed+0x8c>
  else { return nomSpeed; }
 8000e62:	88fb      	ldrh	r3, [r7, #6]
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	370c      	adds	r7, #12
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd90      	pop	{r4, r7, pc}
 8000e6c:	51eb851f 	.word	0x51eb851f

08000e70 <motionDrive_accelerateControl>:

// # Accelerate control
// This function has prepare accelerate mode
// Modes: ACCELERATE - smooth accelerate / DEACCELERATE - smooth deaccelerate / CLEAR - clear accelerate flags
void motionDrive_accelerateControl(uint8_t mode, uint16_t nomSpeed, uint8_t changePercent, uint8_t accelerateTime) {
 8000e70:	b590      	push	{r4, r7, lr}
 8000e72:	b085      	sub	sp, #20
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	4604      	mov	r4, r0
 8000e78:	4608      	mov	r0, r1
 8000e7a:	4611      	mov	r1, r2
 8000e7c:	461a      	mov	r2, r3
 8000e7e:	4623      	mov	r3, r4
 8000e80:	71fb      	strb	r3, [r7, #7]
 8000e82:	4603      	mov	r3, r0
 8000e84:	80bb      	strh	r3, [r7, #4]
 8000e86:	460b      	mov	r3, r1
 8000e88:	71bb      	strb	r3, [r7, #6]
 8000e8a:	4613      	mov	r3, r2
 8000e8c:	70fb      	strb	r3, [r7, #3]
	uint16_t accelerateSpeed, stepsInAcceleration, incrementStepPerSec;
  switch (mode) {
 8000e8e:	79fb      	ldrb	r3, [r7, #7]
 8000e90:	2b02      	cmp	r3, #2
 8000e92:	d04d      	beq.n	8000f30 <motionDrive_accelerateControl+0xc0>
 8000e94:	2b03      	cmp	r3, #3
 8000e96:	f000 8090 	beq.w	8000fba <motionDrive_accelerateControl+0x14a>
 8000e9a:	2b01      	cmp	r3, #1
 8000e9c:	f040 809b 	bne.w	8000fd6 <motionDrive_accelerateControl+0x166>
    case ACCELERATE:
       if(accelerate_Mode == 1) { return; }
 8000ea0:	4b4e      	ldr	r3, [pc, #312]	; (8000fdc <motionDrive_accelerateControl+0x16c>)
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	2b01      	cmp	r3, #1
 8000ea6:	f000 8093 	beq.w	8000fd0 <motionDrive_accelerateControl+0x160>
       accelerate_nomSpeed = nomSpeed;
 8000eaa:	4a4d      	ldr	r2, [pc, #308]	; (8000fe0 <motionDrive_accelerateControl+0x170>)
 8000eac:	88bb      	ldrh	r3, [r7, #4]
 8000eae:	8013      	strh	r3, [r2, #0]
       accelerateSpeed = motionDrive_getAccelerateSpeed(nomSpeed, ~changePercent);
 8000eb0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000eb4:	43db      	mvns	r3, r3
 8000eb6:	b25a      	sxtb	r2, r3
 8000eb8:	88bb      	ldrh	r3, [r7, #4]
 8000eba:	4611      	mov	r1, r2
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f7ff ff8b 	bl	8000dd8 <motionDrive_getAccelerateSpeed>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	81fb      	strh	r3, [r7, #14]
       stepsInAcceleration = nomSpeed - accelerateSpeed;
 8000ec6:	88ba      	ldrh	r2, [r7, #4]
 8000ec8:	89fb      	ldrh	r3, [r7, #14]
 8000eca:	1ad3      	subs	r3, r2, r3
 8000ecc:	81bb      	strh	r3, [r7, #12]
       incrementStepPerSec = stepsInAcceleration / accelerateTime;
 8000ece:	89ba      	ldrh	r2, [r7, #12]
 8000ed0:	78fb      	ldrb	r3, [r7, #3]
 8000ed2:	fb92 f3f3 	sdiv	r3, r2, r3
 8000ed6:	817b      	strh	r3, [r7, #10]
       accelerate_incrementStepInterval = ceil(1000000 / incrementStepPerSec);
 8000ed8:	897b      	ldrh	r3, [r7, #10]
 8000eda:	4a42      	ldr	r2, [pc, #264]	; (8000fe4 <motionDrive_accelerateControl+0x174>)
 8000edc:	fb92 f3f3 	sdiv	r3, r2, r3
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f7ff fac3 	bl	800046c <__aeabi_i2d>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	460c      	mov	r4, r1
 8000eea:	4618      	mov	r0, r3
 8000eec:	4621      	mov	r1, r4
 8000eee:	f7ff fb27 	bl	8000540 <__aeabi_d2uiz>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	b29a      	uxth	r2, r3
 8000ef6:	4b3c      	ldr	r3, [pc, #240]	; (8000fe8 <motionDrive_accelerateControl+0x178>)
 8000ef8:	801a      	strh	r2, [r3, #0]
       accelerate_stepTime = motionDrive_speedToLowTime(stepsInAcceleration, mDefaultHTime) / stepsInAcceleration;
 8000efa:	89bb      	ldrh	r3, [r7, #12]
 8000efc:	2150      	movs	r1, #80	; 0x50
 8000efe:	4618      	mov	r0, r3
 8000f00:	f7ff ff46 	bl	8000d90 <motionDrive_speedToLowTime>
 8000f04:	4603      	mov	r3, r0
 8000f06:	461a      	mov	r2, r3
 8000f08:	89bb      	ldrh	r3, [r7, #12]
 8000f0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f0e:	b29a      	uxth	r2, r3
 8000f10:	4b36      	ldr	r3, [pc, #216]	; (8000fec <motionDrive_accelerateControl+0x17c>)
 8000f12:	801a      	strh	r2, [r3, #0]
       motionDrive_setSpeed(mDefaultHTime, motionDrive_speedToLowTime(accelerateSpeed, mDefaultHTime));
 8000f14:	89fb      	ldrh	r3, [r7, #14]
 8000f16:	2150      	movs	r1, #80	; 0x50
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f7ff ff39 	bl	8000d90 <motionDrive_speedToLowTime>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	4619      	mov	r1, r3
 8000f22:	2050      	movs	r0, #80	; 0x50
 8000f24:	f7ff fee2 	bl	8000cec <motionDrive_setSpeed>
       accelerate_Mode = 1;
 8000f28:	4b2c      	ldr	r3, [pc, #176]	; (8000fdc <motionDrive_accelerateControl+0x16c>)
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	701a      	strb	r2, [r3, #0]
     break;
 8000f2e:	e052      	b.n	8000fd6 <motionDrive_accelerateControl+0x166>
    case DEACCELERATE:
       if(accelerate_Mode == 2) { return; }
 8000f30:	4b2a      	ldr	r3, [pc, #168]	; (8000fdc <motionDrive_accelerateControl+0x16c>)
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	2b02      	cmp	r3, #2
 8000f36:	d04d      	beq.n	8000fd4 <motionDrive_accelerateControl+0x164>
       accelerate_nomSpeed = nomSpeed;
 8000f38:	4a29      	ldr	r2, [pc, #164]	; (8000fe0 <motionDrive_accelerateControl+0x170>)
 8000f3a:	88bb      	ldrh	r3, [r7, #4]
 8000f3c:	8013      	strh	r3, [r2, #0]
       accelerateSpeed = motionDrive_getAccelerateSpeed(nomSpeed, changePercent);
 8000f3e:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8000f42:	88bb      	ldrh	r3, [r7, #4]
 8000f44:	4611      	mov	r1, r2
 8000f46:	4618      	mov	r0, r3
 8000f48:	f7ff ff46 	bl	8000dd8 <motionDrive_getAccelerateSpeed>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	81fb      	strh	r3, [r7, #14]
       stepsInAcceleration = nomSpeed - accelerateSpeed;
 8000f50:	88ba      	ldrh	r2, [r7, #4]
 8000f52:	89fb      	ldrh	r3, [r7, #14]
 8000f54:	1ad3      	subs	r3, r2, r3
 8000f56:	81bb      	strh	r3, [r7, #12]
       incrementStepPerSec = stepsInAcceleration / accelerateTime;
 8000f58:	89ba      	ldrh	r2, [r7, #12]
 8000f5a:	78fb      	ldrb	r3, [r7, #3]
 8000f5c:	fb92 f3f3 	sdiv	r3, r2, r3
 8000f60:	817b      	strh	r3, [r7, #10]
       accelerate_incrementStepInterval = ceil(1000000 / incrementStepPerSec);
 8000f62:	897b      	ldrh	r3, [r7, #10]
 8000f64:	4a1f      	ldr	r2, [pc, #124]	; (8000fe4 <motionDrive_accelerateControl+0x174>)
 8000f66:	fb92 f3f3 	sdiv	r3, r2, r3
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f7ff fa7e 	bl	800046c <__aeabi_i2d>
 8000f70:	4603      	mov	r3, r0
 8000f72:	460c      	mov	r4, r1
 8000f74:	4618      	mov	r0, r3
 8000f76:	4621      	mov	r1, r4
 8000f78:	f7ff fae2 	bl	8000540 <__aeabi_d2uiz>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	b29a      	uxth	r2, r3
 8000f80:	4b19      	ldr	r3, [pc, #100]	; (8000fe8 <motionDrive_accelerateControl+0x178>)
 8000f82:	801a      	strh	r2, [r3, #0]
       accelerate_stepTime = motionDrive_speedToLowTime(stepsInAcceleration, mDefaultHTime) / stepsInAcceleration;
 8000f84:	89bb      	ldrh	r3, [r7, #12]
 8000f86:	2150      	movs	r1, #80	; 0x50
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f7ff ff01 	bl	8000d90 <motionDrive_speedToLowTime>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	461a      	mov	r2, r3
 8000f92:	89bb      	ldrh	r3, [r7, #12]
 8000f94:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f98:	b29a      	uxth	r2, r3
 8000f9a:	4b14      	ldr	r3, [pc, #80]	; (8000fec <motionDrive_accelerateControl+0x17c>)
 8000f9c:	801a      	strh	r2, [r3, #0]
       motionDrive_setSpeed(mDefaultHTime, motionDrive_speedToLowTime(accelerateSpeed, mDefaultHTime));
 8000f9e:	89fb      	ldrh	r3, [r7, #14]
 8000fa0:	2150      	movs	r1, #80	; 0x50
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f7ff fef4 	bl	8000d90 <motionDrive_speedToLowTime>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	4619      	mov	r1, r3
 8000fac:	2050      	movs	r0, #80	; 0x50
 8000fae:	f7ff fe9d 	bl	8000cec <motionDrive_setSpeed>
       accelerate_Mode = 2;
 8000fb2:	4b0a      	ldr	r3, [pc, #40]	; (8000fdc <motionDrive_accelerateControl+0x16c>)
 8000fb4:	2202      	movs	r2, #2
 8000fb6:	701a      	strb	r2, [r3, #0]
     break;
 8000fb8:	e00d      	b.n	8000fd6 <motionDrive_accelerateControl+0x166>
    case CLEAR:
       accelerate_incrementStepInterval = 0;
 8000fba:	4b0b      	ldr	r3, [pc, #44]	; (8000fe8 <motionDrive_accelerateControl+0x178>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	801a      	strh	r2, [r3, #0]
       accelerate_Mode = 0;
 8000fc0:	4b06      	ldr	r3, [pc, #24]	; (8000fdc <motionDrive_accelerateControl+0x16c>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	701a      	strb	r2, [r3, #0]
       accelerate_stepTime = 0;
 8000fc6:	4b09      	ldr	r3, [pc, #36]	; (8000fec <motionDrive_accelerateControl+0x17c>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	801a      	strh	r2, [r3, #0]
     break;
 8000fcc:	bf00      	nop
 8000fce:	e002      	b.n	8000fd6 <motionDrive_accelerateControl+0x166>
       if(accelerate_Mode == 1) { return; }
 8000fd0:	bf00      	nop
 8000fd2:	e000      	b.n	8000fd6 <motionDrive_accelerateControl+0x166>
       if(accelerate_Mode == 2) { return; }
 8000fd4:	bf00      	nop
  }
}
 8000fd6:	3714      	adds	r7, #20
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd90      	pop	{r4, r7, pc}
 8000fdc:	20000072 	.word	0x20000072
 8000fe0:	200000ac 	.word	0x200000ac
 8000fe4:	000f4240 	.word	0x000f4240
 8000fe8:	20000102 	.word	0x20000102
 8000fec:	20000100 	.word	0x20000100

08000ff0 <motionDrive_accelerateLoop>:

// # Accelerate loop
// This function has control accelerate mode (change speed, close loop)
void motionDrive_accelerateLoop() {
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
  static uint32_t accelerateTimer;
  static uint16_t nominalSpeed;
  static uint8_t accelerateStart;

  // start timer
  if(accelerate_Mode && !accelerateStart) {
 8000ff4:	4b3e      	ldr	r3, [pc, #248]	; (80010f0 <motionDrive_accelerateLoop+0x100>)
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d015      	beq.n	8001028 <motionDrive_accelerateLoop+0x38>
 8000ffc:	4b3d      	ldr	r3, [pc, #244]	; (80010f4 <motionDrive_accelerateLoop+0x104>)
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d111      	bne.n	8001028 <motionDrive_accelerateLoop+0x38>
    nominalSpeed = motionDrive_speedToLowTime(accelerate_nomSpeed, mDefaultHTime);
 8001004:	4b3c      	ldr	r3, [pc, #240]	; (80010f8 <motionDrive_accelerateLoop+0x108>)
 8001006:	881b      	ldrh	r3, [r3, #0]
 8001008:	2150      	movs	r1, #80	; 0x50
 800100a:	4618      	mov	r0, r3
 800100c:	f7ff fec0 	bl	8000d90 <motionDrive_speedToLowTime>
 8001010:	4603      	mov	r3, r0
 8001012:	461a      	mov	r2, r3
 8001014:	4b39      	ldr	r3, [pc, #228]	; (80010fc <motionDrive_accelerateLoop+0x10c>)
 8001016:	801a      	strh	r2, [r3, #0]
    accelerateTimer = micros();
 8001018:	f7ff fb86 	bl	8000728 <micros>
 800101c:	4602      	mov	r2, r0
 800101e:	4b38      	ldr	r3, [pc, #224]	; (8001100 <motionDrive_accelerateLoop+0x110>)
 8001020:	601a      	str	r2, [r3, #0]
    accelerateStart = 1;
 8001022:	4b34      	ldr	r3, [pc, #208]	; (80010f4 <motionDrive_accelerateLoop+0x104>)
 8001024:	2201      	movs	r2, #1
 8001026:	701a      	strb	r2, [r3, #0]
  }

  if(accelerateStart) {
 8001028:	4b32      	ldr	r3, [pc, #200]	; (80010f4 <motionDrive_accelerateLoop+0x104>)
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d05c      	beq.n	80010ea <motionDrive_accelerateLoop+0xfa>
    // accelerate
    if(accelerate_Mode == 1) {
 8001030:	4b2f      	ldr	r3, [pc, #188]	; (80010f0 <motionDrive_accelerateLoop+0x100>)
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	2b01      	cmp	r3, #1
 8001036:	d12a      	bne.n	800108e <motionDrive_accelerateLoop+0x9e>
      if(mDrive_VAR_mLowTime > nominalSpeed) {
 8001038:	4b32      	ldr	r3, [pc, #200]	; (8001104 <motionDrive_accelerateLoop+0x114>)
 800103a:	881a      	ldrh	r2, [r3, #0]
 800103c:	4b2f      	ldr	r3, [pc, #188]	; (80010fc <motionDrive_accelerateLoop+0x10c>)
 800103e:	881b      	ldrh	r3, [r3, #0]
 8001040:	429a      	cmp	r2, r3
 8001042:	d917      	bls.n	8001074 <motionDrive_accelerateLoop+0x84>
        if(micros() - accelerateTimer >= accelerate_incrementStepInterval) {
 8001044:	f7ff fb70 	bl	8000728 <micros>
 8001048:	4602      	mov	r2, r0
 800104a:	4b2d      	ldr	r3, [pc, #180]	; (8001100 <motionDrive_accelerateLoop+0x110>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	1ad3      	subs	r3, r2, r3
 8001050:	4a2d      	ldr	r2, [pc, #180]	; (8001108 <motionDrive_accelerateLoop+0x118>)
 8001052:	8812      	ldrh	r2, [r2, #0]
 8001054:	4293      	cmp	r3, r2
 8001056:	d348      	bcc.n	80010ea <motionDrive_accelerateLoop+0xfa>
          mDrive_VAR_mLowTime = mDrive_VAR_mLowTime - accelerate_stepTime;
 8001058:	4b2a      	ldr	r3, [pc, #168]	; (8001104 <motionDrive_accelerateLoop+0x114>)
 800105a:	881a      	ldrh	r2, [r3, #0]
 800105c:	4b2b      	ldr	r3, [pc, #172]	; (800110c <motionDrive_accelerateLoop+0x11c>)
 800105e:	881b      	ldrh	r3, [r3, #0]
 8001060:	1ad3      	subs	r3, r2, r3
 8001062:	b29a      	uxth	r2, r3
 8001064:	4b27      	ldr	r3, [pc, #156]	; (8001104 <motionDrive_accelerateLoop+0x114>)
 8001066:	801a      	strh	r2, [r3, #0]
          accelerateTimer = micros();
 8001068:	f7ff fb5e 	bl	8000728 <micros>
 800106c:	4602      	mov	r2, r0
 800106e:	4b24      	ldr	r3, [pc, #144]	; (8001100 <motionDrive_accelerateLoop+0x110>)
 8001070:	601a      	str	r2, [r3, #0]
        motionDrive_accelerateControl(CLEAR, 0, 0, 0);
      }
    }
  }

}
 8001072:	e03a      	b.n	80010ea <motionDrive_accelerateLoop+0xfa>
        accelerateTimer = 0;
 8001074:	4b22      	ldr	r3, [pc, #136]	; (8001100 <motionDrive_accelerateLoop+0x110>)
 8001076:	2200      	movs	r2, #0
 8001078:	601a      	str	r2, [r3, #0]
        accelerateStart = 0;
 800107a:	4b1e      	ldr	r3, [pc, #120]	; (80010f4 <motionDrive_accelerateLoop+0x104>)
 800107c:	2200      	movs	r2, #0
 800107e:	701a      	strb	r2, [r3, #0]
        motionDrive_accelerateControl(CLEAR, 0, 0, 0);
 8001080:	2300      	movs	r3, #0
 8001082:	2200      	movs	r2, #0
 8001084:	2100      	movs	r1, #0
 8001086:	2003      	movs	r0, #3
 8001088:	f7ff fef2 	bl	8000e70 <motionDrive_accelerateControl>
}
 800108c:	e02d      	b.n	80010ea <motionDrive_accelerateLoop+0xfa>
    else if(accelerate_Mode == 2) {
 800108e:	4b18      	ldr	r3, [pc, #96]	; (80010f0 <motionDrive_accelerateLoop+0x100>)
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	2b02      	cmp	r3, #2
 8001094:	d129      	bne.n	80010ea <motionDrive_accelerateLoop+0xfa>
      if(mDrive_VAR_mLowTime < nominalSpeed) {
 8001096:	4b1b      	ldr	r3, [pc, #108]	; (8001104 <motionDrive_accelerateLoop+0x114>)
 8001098:	881a      	ldrh	r2, [r3, #0]
 800109a:	4b18      	ldr	r3, [pc, #96]	; (80010fc <motionDrive_accelerateLoop+0x10c>)
 800109c:	881b      	ldrh	r3, [r3, #0]
 800109e:	429a      	cmp	r2, r3
 80010a0:	d217      	bcs.n	80010d2 <motionDrive_accelerateLoop+0xe2>
        if(micros() - accelerateTimer >= accelerate_incrementStepInterval) {
 80010a2:	f7ff fb41 	bl	8000728 <micros>
 80010a6:	4602      	mov	r2, r0
 80010a8:	4b15      	ldr	r3, [pc, #84]	; (8001100 <motionDrive_accelerateLoop+0x110>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	1ad3      	subs	r3, r2, r3
 80010ae:	4a16      	ldr	r2, [pc, #88]	; (8001108 <motionDrive_accelerateLoop+0x118>)
 80010b0:	8812      	ldrh	r2, [r2, #0]
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d319      	bcc.n	80010ea <motionDrive_accelerateLoop+0xfa>
          mDrive_VAR_mLowTime = mDrive_VAR_mLowTime + accelerate_stepTime;
 80010b6:	4b13      	ldr	r3, [pc, #76]	; (8001104 <motionDrive_accelerateLoop+0x114>)
 80010b8:	881a      	ldrh	r2, [r3, #0]
 80010ba:	4b14      	ldr	r3, [pc, #80]	; (800110c <motionDrive_accelerateLoop+0x11c>)
 80010bc:	881b      	ldrh	r3, [r3, #0]
 80010be:	4413      	add	r3, r2
 80010c0:	b29a      	uxth	r2, r3
 80010c2:	4b10      	ldr	r3, [pc, #64]	; (8001104 <motionDrive_accelerateLoop+0x114>)
 80010c4:	801a      	strh	r2, [r3, #0]
          accelerateTimer = micros();
 80010c6:	f7ff fb2f 	bl	8000728 <micros>
 80010ca:	4602      	mov	r2, r0
 80010cc:	4b0c      	ldr	r3, [pc, #48]	; (8001100 <motionDrive_accelerateLoop+0x110>)
 80010ce:	601a      	str	r2, [r3, #0]
}
 80010d0:	e00b      	b.n	80010ea <motionDrive_accelerateLoop+0xfa>
        accelerateTimer = 0;
 80010d2:	4b0b      	ldr	r3, [pc, #44]	; (8001100 <motionDrive_accelerateLoop+0x110>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	601a      	str	r2, [r3, #0]
        accelerateStart = 0;
 80010d8:	4b06      	ldr	r3, [pc, #24]	; (80010f4 <motionDrive_accelerateLoop+0x104>)
 80010da:	2200      	movs	r2, #0
 80010dc:	701a      	strb	r2, [r3, #0]
        motionDrive_accelerateControl(CLEAR, 0, 0, 0);
 80010de:	2300      	movs	r3, #0
 80010e0:	2200      	movs	r2, #0
 80010e2:	2100      	movs	r1, #0
 80010e4:	2003      	movs	r0, #3
 80010e6:	f7ff fec3 	bl	8000e70 <motionDrive_accelerateControl>
}
 80010ea:	bf00      	nop
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	20000072 	.word	0x20000072
 80010f4:	20000089 	.word	0x20000089
 80010f8:	200000ac 	.word	0x200000ac
 80010fc:	2000008a 	.word	0x2000008a
 8001100:	2000008c 	.word	0x2000008c
 8001104:	20000070 	.word	0x20000070
 8001108:	20000102 	.word	0x20000102
 800110c:	20000100 	.word	0x20000100

08001110 <floorSensor_Init>:

// ### Floor sensor ###
// # Floor sensor init
// Docs: this function has configuration sense pin (INPUT), write current state to global array (floorSensor_VAR_StateArr[4])
// Not return
void floorSensor_Init() {
 8001110:	b590      	push	{r4, r7, lr}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
  uint8_t pinArray[4] = {F0_Sensor_Pin, F1_Sensor_Pin, F2_Sensor_Pin, F3_Sensor_Pin};
 8001116:	4b10      	ldr	r3, [pc, #64]	; (8001158 <floorSensor_Init+0x48>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	603b      	str	r3, [r7, #0]
  // Note: sensors pins has been initias in MX_GPIO_Init()
  for(uint8_t pinN = 0; pinN < 4; pinN++) {
 800111c:	2300      	movs	r3, #0
 800111e:	71fb      	strb	r3, [r7, #7]
 8001120:	e013      	b.n	800114a <floorSensor_Init+0x3a>
    floorSensor_VAR_StateArr[pinN] = HAL_GPIO_ReadPin(GPIOA, pinArray[pinN]);
 8001122:	79fb      	ldrb	r3, [r7, #7]
 8001124:	f107 0208 	add.w	r2, r7, #8
 8001128:	4413      	add	r3, r2
 800112a:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 800112e:	b29b      	uxth	r3, r3
 8001130:	79fc      	ldrb	r4, [r7, #7]
 8001132:	4619      	mov	r1, r3
 8001134:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001138:	f001 f910 	bl	800235c <HAL_GPIO_ReadPin>
 800113c:	4603      	mov	r3, r0
 800113e:	461a      	mov	r2, r3
 8001140:	4b06      	ldr	r3, [pc, #24]	; (800115c <floorSensor_Init+0x4c>)
 8001142:	551a      	strb	r2, [r3, r4]
  for(uint8_t pinN = 0; pinN < 4; pinN++) {
 8001144:	79fb      	ldrb	r3, [r7, #7]
 8001146:	3301      	adds	r3, #1
 8001148:	71fb      	strb	r3, [r7, #7]
 800114a:	79fb      	ldrb	r3, [r7, #7]
 800114c:	2b03      	cmp	r3, #3
 800114e:	d9e8      	bls.n	8001122 <floorSensor_Init+0x12>
  }
}
 8001150:	bf00      	nop
 8001152:	370c      	adds	r7, #12
 8001154:	46bd      	mov	sp, r7
 8001156:	bd90      	pop	{r4, r7, pc}
 8001158:	08004088 	.word	0x08004088
 800115c:	200000fc 	.word	0x200000fc

08001160 <floorSensor_NeedCalibrate>:
// # Need calibration?
// Docs: this function has detect to need cabine calibration.
// Return value: 0 - not need calibration / 1 - need down calibration / 2 - fault sensor (fault mode or risk down calibration)
// 3 - need UP calibration
uint8_t floorSensor_NeedCalibrate() {
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
  uint8_t totalDarkenedSensors = 0;
 8001166:	2300      	movs	r3, #0
 8001168:	71fb      	strb	r3, [r7, #7]

  // calc total darkened sensors value
  for(uint8_t sensorN = 0; sensorN < 4; sensorN++) {
 800116a:	2300      	movs	r3, #0
 800116c:	71bb      	strb	r3, [r7, #6]
 800116e:	e00a      	b.n	8001186 <floorSensor_NeedCalibrate+0x26>
    if(floorSensor_VAR_StateArr[sensorN] == F_Sensor_Trigg) { totalDarkenedSensors++; }
 8001170:	79bb      	ldrb	r3, [r7, #6]
 8001172:	4a1e      	ldr	r2, [pc, #120]	; (80011ec <floorSensor_NeedCalibrate+0x8c>)
 8001174:	5cd3      	ldrb	r3, [r2, r3]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d102      	bne.n	8001180 <floorSensor_NeedCalibrate+0x20>
 800117a:	79fb      	ldrb	r3, [r7, #7]
 800117c:	3301      	adds	r3, #1
 800117e:	71fb      	strb	r3, [r7, #7]
  for(uint8_t sensorN = 0; sensorN < 4; sensorN++) {
 8001180:	79bb      	ldrb	r3, [r7, #6]
 8001182:	3301      	adds	r3, #1
 8001184:	71bb      	strb	r3, [r7, #6]
 8001186:	79bb      	ldrb	r3, [r7, #6]
 8001188:	2b03      	cmp	r3, #3
 800118a:	d9f1      	bls.n	8001170 <floorSensor_NeedCalibrate+0x10>
  }

  // select current event
  // #1 - All sensors has free. Need calibrate (DOWN)
  if(!totalDarkenedSensors) { return 1; }
 800118c:	79fb      	ldrb	r3, [r7, #7]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d101      	bne.n	8001196 <floorSensor_NeedCalibrate+0x36>
 8001192:	2301      	movs	r3, #1
 8001194:	e024      	b.n	80011e0 <floorSensor_NeedCalibrate+0x80>
  // #2 - Dual sensors has triggered. Fault sensors. Risk down calibrate?
  else if(totalDarkenedSensors == 2) { return 2; }
 8001196:	79fb      	ldrb	r3, [r7, #7]
 8001198:	2b02      	cmp	r3, #2
 800119a:	d101      	bne.n	80011a0 <floorSensor_NeedCalibrate+0x40>
 800119c:	2302      	movs	r3, #2
 800119e:	e01f      	b.n	80011e0 <floorSensor_NeedCalibrate+0x80>
  // #2.1 - All sensors has triggered. Fault.
  else if(totalDarkenedSensors > 2) { return 4; }
 80011a0:	79fb      	ldrb	r3, [r7, #7]
 80011a2:	2b02      	cmp	r3, #2
 80011a4:	d901      	bls.n	80011aa <floorSensor_NeedCalibrate+0x4a>
 80011a6:	2304      	movs	r3, #4
 80011a8:	e01a      	b.n	80011e0 <floorSensor_NeedCalibrate+0x80>
  // #3 - F0 has triggered and other sensors has free. Need calibration (UP)
  else if(floorSensor_VAR_StateArr[0] == F_Sensor_Trigg && totalDarkenedSensors < 2) { return 3; }
 80011aa:	4b10      	ldr	r3, [pc, #64]	; (80011ec <floorSensor_NeedCalibrate+0x8c>)
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d104      	bne.n	80011bc <floorSensor_NeedCalibrate+0x5c>
 80011b2:	79fb      	ldrb	r3, [r7, #7]
 80011b4:	2b01      	cmp	r3, #1
 80011b6:	d801      	bhi.n	80011bc <floorSensor_NeedCalibrate+0x5c>
 80011b8:	2303      	movs	r3, #3
 80011ba:	e011      	b.n	80011e0 <floorSensor_NeedCalibrate+0x80>
  // #4 - x1 sensor has triggered (F1 / F2 / F3). Write current floor. Not calibration
  else {
    for(uint8_t sensorN = 0; sensorN < 4; sensorN++) {
 80011bc:	2300      	movs	r3, #0
 80011be:	717b      	strb	r3, [r7, #5]
 80011c0:	e00a      	b.n	80011d8 <floorSensor_NeedCalibrate+0x78>
      if(floorSensor_VAR_StateArr[sensorN] == F_Sensor_Trigg) { floorSensor_VAR_CurrentFloor = sensorN; }
 80011c2:	797b      	ldrb	r3, [r7, #5]
 80011c4:	4a09      	ldr	r2, [pc, #36]	; (80011ec <floorSensor_NeedCalibrate+0x8c>)
 80011c6:	5cd3      	ldrb	r3, [r2, r3]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d102      	bne.n	80011d2 <floorSensor_NeedCalibrate+0x72>
 80011cc:	4a08      	ldr	r2, [pc, #32]	; (80011f0 <floorSensor_NeedCalibrate+0x90>)
 80011ce:	797b      	ldrb	r3, [r7, #5]
 80011d0:	7013      	strb	r3, [r2, #0]
    for(uint8_t sensorN = 0; sensorN < 4; sensorN++) {
 80011d2:	797b      	ldrb	r3, [r7, #5]
 80011d4:	3301      	adds	r3, #1
 80011d6:	717b      	strb	r3, [r7, #5]
 80011d8:	797b      	ldrb	r3, [r7, #5]
 80011da:	2b03      	cmp	r3, #3
 80011dc:	d9f1      	bls.n	80011c2 <floorSensor_NeedCalibrate+0x62>
    }
    return 0;
 80011de:	2300      	movs	r3, #0
  }
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	370c      	adds	r7, #12
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr
 80011ec:	200000fc 	.word	0x200000fc
 80011f0:	20000073 	.word	0x20000073

080011f4 <floorSensor_Read>:
// # Read floor sensor
// Docs: this function has read all floor sensors state. Write to floorSensor_VAR_StateArr[] global array
// To protect against false alarms, a clock pass has been introduced (we register a change in state, skip clock cycles, make sure it is steady, zero it in the array)
void floorSensor_Read() {
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
  static uint8_t pinArray[4] = {F0_Sensor_Pin, F1_Sensor_Pin, F2_Sensor_Pin, F3_Sensor_Pin};
  static uint8_t sensorChangeState[][3] = {{0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}}; // {changeRegistred, changeState, tactCounter}
  #define SKIP_TACTS 150 // max 255 (uint8_t)

  for(uint8_t pinN = 0; pinN < 4; pinN++) {
 80011fa:	2300      	movs	r3, #0
 80011fc:	71fb      	strb	r3, [r7, #7]
 80011fe:	e078      	b.n	80012f2 <floorSensor_Read+0xfe>
    uint8_t pinState = HAL_GPIO_ReadPin(GPIOA, pinArray[pinN]);
 8001200:	79fb      	ldrb	r3, [r7, #7]
 8001202:	4a3f      	ldr	r2, [pc, #252]	; (8001300 <floorSensor_Read+0x10c>)
 8001204:	5cd3      	ldrb	r3, [r2, r3]
 8001206:	b29b      	uxth	r3, r3
 8001208:	4619      	mov	r1, r3
 800120a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800120e:	f001 f8a5 	bl	800235c <HAL_GPIO_ReadPin>
 8001212:	4603      	mov	r3, r0
 8001214:	71bb      	strb	r3, [r7, #6]
    if((pinState != sensorChangeState[pinN][1]) && (!sensorChangeState[pinN][0])) {
 8001216:	79fa      	ldrb	r2, [r7, #7]
 8001218:	493a      	ldr	r1, [pc, #232]	; (8001304 <floorSensor_Read+0x110>)
 800121a:	4613      	mov	r3, r2
 800121c:	005b      	lsls	r3, r3, #1
 800121e:	4413      	add	r3, r2
 8001220:	440b      	add	r3, r1
 8001222:	3301      	adds	r3, #1
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	79ba      	ldrb	r2, [r7, #6]
 8001228:	429a      	cmp	r2, r3
 800122a:	d019      	beq.n	8001260 <floorSensor_Read+0x6c>
 800122c:	79fa      	ldrb	r2, [r7, #7]
 800122e:	4935      	ldr	r1, [pc, #212]	; (8001304 <floorSensor_Read+0x110>)
 8001230:	4613      	mov	r3, r2
 8001232:	005b      	lsls	r3, r3, #1
 8001234:	4413      	add	r3, r2
 8001236:	440b      	add	r3, r1
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d110      	bne.n	8001260 <floorSensor_Read+0x6c>
      sensorChangeState[pinN][1] = pinState;
 800123e:	79fa      	ldrb	r2, [r7, #7]
 8001240:	4930      	ldr	r1, [pc, #192]	; (8001304 <floorSensor_Read+0x110>)
 8001242:	4613      	mov	r3, r2
 8001244:	005b      	lsls	r3, r3, #1
 8001246:	4413      	add	r3, r2
 8001248:	440b      	add	r3, r1
 800124a:	3301      	adds	r3, #1
 800124c:	79ba      	ldrb	r2, [r7, #6]
 800124e:	701a      	strb	r2, [r3, #0]
      sensorChangeState[pinN][0] = 1;
 8001250:	79fa      	ldrb	r2, [r7, #7]
 8001252:	492c      	ldr	r1, [pc, #176]	; (8001304 <floorSensor_Read+0x110>)
 8001254:	4613      	mov	r3, r2
 8001256:	005b      	lsls	r3, r3, #1
 8001258:	4413      	add	r3, r2
 800125a:	440b      	add	r3, r1
 800125c:	2201      	movs	r2, #1
 800125e:	701a      	strb	r2, [r3, #0]
    }
    if(sensorChangeState[pinN][0]) {
 8001260:	79fa      	ldrb	r2, [r7, #7]
 8001262:	4928      	ldr	r1, [pc, #160]	; (8001304 <floorSensor_Read+0x110>)
 8001264:	4613      	mov	r3, r2
 8001266:	005b      	lsls	r3, r3, #1
 8001268:	4413      	add	r3, r2
 800126a:	440b      	add	r3, r1
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d03c      	beq.n	80012ec <floorSensor_Read+0xf8>
      if(sensorChangeState[pinN][2] <= SKIP_TACTS) {
 8001272:	79fa      	ldrb	r2, [r7, #7]
 8001274:	4923      	ldr	r1, [pc, #140]	; (8001304 <floorSensor_Read+0x110>)
 8001276:	4613      	mov	r3, r2
 8001278:	005b      	lsls	r3, r3, #1
 800127a:	4413      	add	r3, r2
 800127c:	440b      	add	r3, r1
 800127e:	3302      	adds	r3, #2
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	2b96      	cmp	r3, #150	; 0x96
 8001284:	d812      	bhi.n	80012ac <floorSensor_Read+0xb8>
        sensorChangeState[pinN][2]++;
 8001286:	79fa      	ldrb	r2, [r7, #7]
 8001288:	491e      	ldr	r1, [pc, #120]	; (8001304 <floorSensor_Read+0x110>)
 800128a:	4613      	mov	r3, r2
 800128c:	005b      	lsls	r3, r3, #1
 800128e:	4413      	add	r3, r2
 8001290:	440b      	add	r3, r1
 8001292:	3302      	adds	r3, #2
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	3301      	adds	r3, #1
 8001298:	b2d8      	uxtb	r0, r3
 800129a:	491a      	ldr	r1, [pc, #104]	; (8001304 <floorSensor_Read+0x110>)
 800129c:	4613      	mov	r3, r2
 800129e:	005b      	lsls	r3, r3, #1
 80012a0:	4413      	add	r3, r2
 80012a2:	440b      	add	r3, r1
 80012a4:	3302      	adds	r3, #2
 80012a6:	4602      	mov	r2, r0
 80012a8:	701a      	strb	r2, [r3, #0]
 80012aa:	e01f      	b.n	80012ec <floorSensor_Read+0xf8>
      } else {
        if(pinState == sensorChangeState[pinN][1]) {
 80012ac:	79fa      	ldrb	r2, [r7, #7]
 80012ae:	4915      	ldr	r1, [pc, #84]	; (8001304 <floorSensor_Read+0x110>)
 80012b0:	4613      	mov	r3, r2
 80012b2:	005b      	lsls	r3, r3, #1
 80012b4:	4413      	add	r3, r2
 80012b6:	440b      	add	r3, r1
 80012b8:	3301      	adds	r3, #1
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	79ba      	ldrb	r2, [r7, #6]
 80012be:	429a      	cmp	r2, r3
 80012c0:	d103      	bne.n	80012ca <floorSensor_Read+0xd6>
          floorSensor_VAR_StateArr[pinN] = pinState;
 80012c2:	79fb      	ldrb	r3, [r7, #7]
 80012c4:	4910      	ldr	r1, [pc, #64]	; (8001308 <floorSensor_Read+0x114>)
 80012c6:	79ba      	ldrb	r2, [r7, #6]
 80012c8:	54ca      	strb	r2, [r1, r3]
        }
        sensorChangeState[pinN][0] = 0;
 80012ca:	79fa      	ldrb	r2, [r7, #7]
 80012cc:	490d      	ldr	r1, [pc, #52]	; (8001304 <floorSensor_Read+0x110>)
 80012ce:	4613      	mov	r3, r2
 80012d0:	005b      	lsls	r3, r3, #1
 80012d2:	4413      	add	r3, r2
 80012d4:	440b      	add	r3, r1
 80012d6:	2200      	movs	r2, #0
 80012d8:	701a      	strb	r2, [r3, #0]
        sensorChangeState[pinN][2] = 0;
 80012da:	79fa      	ldrb	r2, [r7, #7]
 80012dc:	4909      	ldr	r1, [pc, #36]	; (8001304 <floorSensor_Read+0x110>)
 80012de:	4613      	mov	r3, r2
 80012e0:	005b      	lsls	r3, r3, #1
 80012e2:	4413      	add	r3, r2
 80012e4:	440b      	add	r3, r1
 80012e6:	3302      	adds	r3, #2
 80012e8:	2200      	movs	r2, #0
 80012ea:	701a      	strb	r2, [r3, #0]
  for(uint8_t pinN = 0; pinN < 4; pinN++) {
 80012ec:	79fb      	ldrb	r3, [r7, #7]
 80012ee:	3301      	adds	r3, #1
 80012f0:	71fb      	strb	r3, [r7, #7]
 80012f2:	79fb      	ldrb	r3, [r7, #7]
 80012f4:	2b03      	cmp	r3, #3
 80012f6:	d983      	bls.n	8001200 <floorSensor_Read+0xc>
      }
    }
  }
}
 80012f8:	bf00      	nop
 80012fa:	3708      	adds	r7, #8
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	20000030 	.word	0x20000030
 8001304:	20000090 	.word	0x20000090
 8001308:	200000fc 	.word	0x200000fc

0800130c <floorSensor_calibrateControl>:
// # Floor sensor calibrate control
// This function has start low drive for search current floor
void floorSensor_calibrateControl(uint8_t direction) {
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	4603      	mov	r3, r0
 8001314:	71fb      	strb	r3, [r7, #7]
  ledIndicator_setMode(BLINK, YELLOW_LED, 550);
 8001316:	f240 2226 	movw	r2, #550	; 0x226
 800131a:	210c      	movs	r1, #12
 800131c:	2002      	movs	r0, #2
 800131e:	f7ff fb87 	bl	8000a30 <ledIndicator_setMode>
  //uint16_t lowTime = motionDrive_speedToLowTime(mLowSpeed, mDefaultHTime);
  // 60steps per x1 second
  // 1s = 1000000us
  // 1000000us / 100 = 10000us per x1 step
  // x1 step = LOW time + HIGH time = 16667 / 2 = 8333us (833us - LOW + 833us - HIGH)
  motionDrive_setSpeed(8333, 8333);
 8001322:	f242 018d 	movw	r1, #8333	; 0x208d
 8001326:	f242 008d 	movw	r0, #8333	; 0x208d
 800132a:	f7ff fcdf 	bl	8000cec <motionDrive_setSpeed>
  //motionDrive_setSpeed(mDefaultHTime, lowTime);
  motionDrive_Control(START, direction);
 800132e:	79fb      	ldrb	r3, [r7, #7]
 8001330:	4619      	mov	r1, r3
 8001332:	2001      	movs	r0, #1
 8001334:	f7ff fcfc 	bl	8000d30 <motionDrive_Control>
  floorSensor_VAR_activeCalibrate = 1;
 8001338:	4b03      	ldr	r3, [pc, #12]	; (8001348 <floorSensor_calibrateControl+0x3c>)
 800133a:	2201      	movs	r2, #1
 800133c:	701a      	strb	r2, [r3, #0]
}
 800133e:	bf00      	nop
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	20000074 	.word	0x20000074

0800134c <floorSensor_calibrateLoop>:
// # Floor sensor calibrate control loop
// This function has checked update current floor per calibrate mode.
// If current floor has exist - stop calibration
void floorSensor_calibrateLoop() {
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
  if(floorSensor_VAR_activeCalibrate && (floorSensor_VAR_CurrentFloor || !floorSensor_VAR_StateArr[0])) {
 8001350:	4b0c      	ldr	r3, [pc, #48]	; (8001384 <floorSensor_calibrateLoop+0x38>)
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d013      	beq.n	8001380 <floorSensor_calibrateLoop+0x34>
 8001358:	4b0b      	ldr	r3, [pc, #44]	; (8001388 <floorSensor_calibrateLoop+0x3c>)
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d103      	bne.n	8001368 <floorSensor_calibrateLoop+0x1c>
 8001360:	4b0a      	ldr	r3, [pc, #40]	; (800138c <floorSensor_calibrateLoop+0x40>)
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d10b      	bne.n	8001380 <floorSensor_calibrateLoop+0x34>
    motionDrive_Control(STOP, 0);
 8001368:	2100      	movs	r1, #0
 800136a:	2000      	movs	r0, #0
 800136c:	f7ff fce0 	bl	8000d30 <motionDrive_Control>
    ledIndicator_setMode(STATIC, GREEN_LED, 0);
 8001370:	2200      	movs	r2, #0
 8001372:	210d      	movs	r1, #13
 8001374:	2001      	movs	r0, #1
 8001376:	f7ff fb5b 	bl	8000a30 <ledIndicator_setMode>
    floorSensor_VAR_activeCalibrate = 0;
 800137a:	4b02      	ldr	r3, [pc, #8]	; (8001384 <floorSensor_calibrateLoop+0x38>)
 800137c:	2200      	movs	r2, #0
 800137e:	701a      	strb	r2, [r3, #0]
  }
}
 8001380:	bf00      	nop
 8001382:	bd80      	pop	{r7, pc}
 8001384:	20000074 	.word	0x20000074
 8001388:	20000073 	.word	0x20000073
 800138c:	200000fc 	.word	0x200000fc

08001390 <btnControl_Init>:

// ### Btn ###
// # Floor BTN init
// Docs: this function has configuration btn pin (INPUT), write current state to global array (btnControl_VAR_StateArr[4])
// Not return
void btnControl_Init() {
 8001390:	b590      	push	{r4, r7, lr}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
  uint8_t pinArray[3] = {F1_Btn_Pin, F2_Btn_Pin, F3_Btn_Pin};
 8001396:	4a13      	ldr	r2, [pc, #76]	; (80013e4 <btnControl_Init+0x54>)
 8001398:	1d3b      	adds	r3, r7, #4
 800139a:	6812      	ldr	r2, [r2, #0]
 800139c:	4611      	mov	r1, r2
 800139e:	8019      	strh	r1, [r3, #0]
 80013a0:	3302      	adds	r3, #2
 80013a2:	0c12      	lsrs	r2, r2, #16
 80013a4:	701a      	strb	r2, [r3, #0]
  // Note: sensors pins has been initias in MX_GPIO_Init()
  for(uint8_t pinN = 0; pinN < 3; pinN++) {
 80013a6:	2300      	movs	r3, #0
 80013a8:	71fb      	strb	r3, [r7, #7]
 80013aa:	e014      	b.n	80013d6 <btnControl_Init+0x46>
    btnControl_VAR_StateArr[pinN + 1] = HAL_GPIO_ReadPin(GPIOA, pinArray[pinN]);
 80013ac:	79fb      	ldrb	r3, [r7, #7]
 80013ae:	f107 0208 	add.w	r2, r7, #8
 80013b2:	4413      	add	r3, r2
 80013b4:	f813 3c04 	ldrb.w	r3, [r3, #-4]
 80013b8:	b29a      	uxth	r2, r3
 80013ba:	79fb      	ldrb	r3, [r7, #7]
 80013bc:	1c5c      	adds	r4, r3, #1
 80013be:	4611      	mov	r1, r2
 80013c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013c4:	f000 ffca 	bl	800235c <HAL_GPIO_ReadPin>
 80013c8:	4603      	mov	r3, r0
 80013ca:	461a      	mov	r2, r3
 80013cc:	4b06      	ldr	r3, [pc, #24]	; (80013e8 <btnControl_Init+0x58>)
 80013ce:	551a      	strb	r2, [r3, r4]
  for(uint8_t pinN = 0; pinN < 3; pinN++) {
 80013d0:	79fb      	ldrb	r3, [r7, #7]
 80013d2:	3301      	adds	r3, #1
 80013d4:	71fb      	strb	r3, [r7, #7]
 80013d6:	79fb      	ldrb	r3, [r7, #7]
 80013d8:	2b02      	cmp	r3, #2
 80013da:	d9e7      	bls.n	80013ac <btnControl_Init+0x1c>
  }
}
 80013dc:	bf00      	nop
 80013de:	370c      	adds	r7, #12
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd90      	pop	{r4, r7, pc}
 80013e4:	0800408c 	.word	0x0800408c
 80013e8:	20000104 	.word	0x20000104

080013ec <btnControl_Read>:
// # Read btn
// Docs: this function has read all btn's state. Write to btnControl_VAR_StateArr[] global array
// To protect against false alarms, a clock pass has been introduced (we register a change in state, skip clock cycles, make sure it is steady, zero it in the array)
void btnControl_Read() {
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
  static uint8_t pinArray[3] = {F1_Btn_Pin, F2_Btn_Pin, F3_Btn_Pin};
  static uint8_t btnChangeState[][3] = {{0, 0, 0}, {0, 0, 0}, {0, 0, 0}}; // {changeRegistred, changeState, tactCounter}
  #define SKIP_TACTS 150 // max 255 (uint8_t)

  for(uint8_t pinN = 0; pinN < 3; pinN++) {
 80013f2:	2300      	movs	r3, #0
 80013f4:	71fb      	strb	r3, [r7, #7]
 80013f6:	e089      	b.n	800150c <btnControl_Read+0x120>
    uint8_t pinState = HAL_GPIO_ReadPin(GPIOA, pinArray[pinN]);
 80013f8:	79fb      	ldrb	r3, [r7, #7]
 80013fa:	4a48      	ldr	r2, [pc, #288]	; (800151c <btnControl_Read+0x130>)
 80013fc:	5cd3      	ldrb	r3, [r2, r3]
 80013fe:	b29b      	uxth	r3, r3
 8001400:	4619      	mov	r1, r3
 8001402:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001406:	f000 ffa9 	bl	800235c <HAL_GPIO_ReadPin>
 800140a:	4603      	mov	r3, r0
 800140c:	71bb      	strb	r3, [r7, #6]
    if((pinState != btnChangeState[pinN][1]) && (!btnChangeState[pinN][0])) {
 800140e:	79fa      	ldrb	r2, [r7, #7]
 8001410:	4943      	ldr	r1, [pc, #268]	; (8001520 <btnControl_Read+0x134>)
 8001412:	4613      	mov	r3, r2
 8001414:	005b      	lsls	r3, r3, #1
 8001416:	4413      	add	r3, r2
 8001418:	440b      	add	r3, r1
 800141a:	3301      	adds	r3, #1
 800141c:	781b      	ldrb	r3, [r3, #0]
 800141e:	79ba      	ldrb	r2, [r7, #6]
 8001420:	429a      	cmp	r2, r3
 8001422:	d019      	beq.n	8001458 <btnControl_Read+0x6c>
 8001424:	79fa      	ldrb	r2, [r7, #7]
 8001426:	493e      	ldr	r1, [pc, #248]	; (8001520 <btnControl_Read+0x134>)
 8001428:	4613      	mov	r3, r2
 800142a:	005b      	lsls	r3, r3, #1
 800142c:	4413      	add	r3, r2
 800142e:	440b      	add	r3, r1
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d110      	bne.n	8001458 <btnControl_Read+0x6c>
      btnChangeState[pinN][1] = pinState;
 8001436:	79fa      	ldrb	r2, [r7, #7]
 8001438:	4939      	ldr	r1, [pc, #228]	; (8001520 <btnControl_Read+0x134>)
 800143a:	4613      	mov	r3, r2
 800143c:	005b      	lsls	r3, r3, #1
 800143e:	4413      	add	r3, r2
 8001440:	440b      	add	r3, r1
 8001442:	3301      	adds	r3, #1
 8001444:	79ba      	ldrb	r2, [r7, #6]
 8001446:	701a      	strb	r2, [r3, #0]
      btnChangeState[pinN][0] = 1;
 8001448:	79fa      	ldrb	r2, [r7, #7]
 800144a:	4935      	ldr	r1, [pc, #212]	; (8001520 <btnControl_Read+0x134>)
 800144c:	4613      	mov	r3, r2
 800144e:	005b      	lsls	r3, r3, #1
 8001450:	4413      	add	r3, r2
 8001452:	440b      	add	r3, r1
 8001454:	2201      	movs	r2, #1
 8001456:	701a      	strb	r2, [r3, #0]
    }
    if(btnChangeState[pinN][0]) {
 8001458:	79fa      	ldrb	r2, [r7, #7]
 800145a:	4931      	ldr	r1, [pc, #196]	; (8001520 <btnControl_Read+0x134>)
 800145c:	4613      	mov	r3, r2
 800145e:	005b      	lsls	r3, r3, #1
 8001460:	4413      	add	r3, r2
 8001462:	440b      	add	r3, r1
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d04d      	beq.n	8001506 <btnControl_Read+0x11a>
      if(btnChangeState[pinN][2] <= SKIP_TACTS) {
 800146a:	79fa      	ldrb	r2, [r7, #7]
 800146c:	492c      	ldr	r1, [pc, #176]	; (8001520 <btnControl_Read+0x134>)
 800146e:	4613      	mov	r3, r2
 8001470:	005b      	lsls	r3, r3, #1
 8001472:	4413      	add	r3, r2
 8001474:	440b      	add	r3, r1
 8001476:	3302      	adds	r3, #2
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	2b96      	cmp	r3, #150	; 0x96
 800147c:	d812      	bhi.n	80014a4 <btnControl_Read+0xb8>
        btnChangeState[pinN][2]++;
 800147e:	79fa      	ldrb	r2, [r7, #7]
 8001480:	4927      	ldr	r1, [pc, #156]	; (8001520 <btnControl_Read+0x134>)
 8001482:	4613      	mov	r3, r2
 8001484:	005b      	lsls	r3, r3, #1
 8001486:	4413      	add	r3, r2
 8001488:	440b      	add	r3, r1
 800148a:	3302      	adds	r3, #2
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	3301      	adds	r3, #1
 8001490:	b2d8      	uxtb	r0, r3
 8001492:	4923      	ldr	r1, [pc, #140]	; (8001520 <btnControl_Read+0x134>)
 8001494:	4613      	mov	r3, r2
 8001496:	005b      	lsls	r3, r3, #1
 8001498:	4413      	add	r3, r2
 800149a:	440b      	add	r3, r1
 800149c:	3302      	adds	r3, #2
 800149e:	4602      	mov	r2, r0
 80014a0:	701a      	strb	r2, [r3, #0]
 80014a2:	e030      	b.n	8001506 <btnControl_Read+0x11a>
      } else {
        if(pinState == btnChangeState[pinN][1]) {
 80014a4:	79fa      	ldrb	r2, [r7, #7]
 80014a6:	491e      	ldr	r1, [pc, #120]	; (8001520 <btnControl_Read+0x134>)
 80014a8:	4613      	mov	r3, r2
 80014aa:	005b      	lsls	r3, r3, #1
 80014ac:	4413      	add	r3, r2
 80014ae:	440b      	add	r3, r1
 80014b0:	3301      	adds	r3, #1
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	79ba      	ldrb	r2, [r7, #6]
 80014b6:	429a      	cmp	r2, r3
 80014b8:	d114      	bne.n	80014e4 <btnControl_Read+0xf8>
          btnControl_VAR_StateArr[pinN + 1] = btnChangeState[pinN][1];
 80014ba:	79fa      	ldrb	r2, [r7, #7]
 80014bc:	79fb      	ldrb	r3, [r7, #7]
 80014be:	1c59      	adds	r1, r3, #1
 80014c0:	4817      	ldr	r0, [pc, #92]	; (8001520 <btnControl_Read+0x134>)
 80014c2:	4613      	mov	r3, r2
 80014c4:	005b      	lsls	r3, r3, #1
 80014c6:	4413      	add	r3, r2
 80014c8:	4403      	add	r3, r0
 80014ca:	3301      	adds	r3, #1
 80014cc:	781a      	ldrb	r2, [r3, #0]
 80014ce:	4b15      	ldr	r3, [pc, #84]	; (8001524 <btnControl_Read+0x138>)
 80014d0:	545a      	strb	r2, [r3, r1]
          if(pinState == HIGH) { btnControl_PressEvent(pinN + 1); }
 80014d2:	79bb      	ldrb	r3, [r7, #6]
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	d105      	bne.n	80014e4 <btnControl_Read+0xf8>
 80014d8:	79fb      	ldrb	r3, [r7, #7]
 80014da:	3301      	adds	r3, #1
 80014dc:	b2db      	uxtb	r3, r3
 80014de:	4618      	mov	r0, r3
 80014e0:	f000 fa20 	bl	8001924 <btnControl_PressEvent>
        }
        btnChangeState[pinN][0] = 0;
 80014e4:	79fa      	ldrb	r2, [r7, #7]
 80014e6:	490e      	ldr	r1, [pc, #56]	; (8001520 <btnControl_Read+0x134>)
 80014e8:	4613      	mov	r3, r2
 80014ea:	005b      	lsls	r3, r3, #1
 80014ec:	4413      	add	r3, r2
 80014ee:	440b      	add	r3, r1
 80014f0:	2200      	movs	r2, #0
 80014f2:	701a      	strb	r2, [r3, #0]
        btnChangeState[pinN][2] = 0;
 80014f4:	79fa      	ldrb	r2, [r7, #7]
 80014f6:	490a      	ldr	r1, [pc, #40]	; (8001520 <btnControl_Read+0x134>)
 80014f8:	4613      	mov	r3, r2
 80014fa:	005b      	lsls	r3, r3, #1
 80014fc:	4413      	add	r3, r2
 80014fe:	440b      	add	r3, r1
 8001500:	3302      	adds	r3, #2
 8001502:	2200      	movs	r2, #0
 8001504:	701a      	strb	r2, [r3, #0]
  for(uint8_t pinN = 0; pinN < 3; pinN++) {
 8001506:	79fb      	ldrb	r3, [r7, #7]
 8001508:	3301      	adds	r3, #1
 800150a:	71fb      	strb	r3, [r7, #7]
 800150c:	79fb      	ldrb	r3, [r7, #7]
 800150e:	2b02      	cmp	r3, #2
 8001510:	f67f af72 	bls.w	80013f8 <btnControl_Read+0xc>
      }
    }
  }
}
 8001514:	bf00      	nop
 8001516:	3708      	adds	r7, #8
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	20000034 	.word	0x20000034
 8001520:	2000009c 	.word	0x2000009c
 8001524:	20000104 	.word	0x20000104

08001528 <floorBoard_Init>:

// ### Floor brd ###
// # init all I/O expanders
void floorBoard_Init() {
 8001528:	b580      	push	{r7, lr}
 800152a:	b086      	sub	sp, #24
 800152c:	af04      	add	r7, sp, #16
  uint8_t floorArray[3] = {FLOOR_1, FLOOR_2, FLOOR_3};
 800152e:	4a2f      	ldr	r2, [pc, #188]	; (80015ec <floorBoard_Init+0xc4>)
 8001530:	1d3b      	adds	r3, r7, #4
 8001532:	6812      	ldr	r2, [r2, #0]
 8001534:	4611      	mov	r1, r2
 8001536:	8019      	strh	r1, [r3, #0]
 8001538:	3302      	adds	r3, #2
 800153a:	0c12      	lsrs	r2, r2, #16
 800153c:	701a      	strb	r2, [r3, #0]
  uint8_t dataModeBuffer = 0x0;
 800153e:	2300      	movs	r3, #0
 8001540:	70fb      	strb	r3, [r7, #3]
  uint8_t dataStateBuffer = 0x40;
 8001542:	2340      	movs	r3, #64	; 0x40
 8001544:	70bb      	strb	r3, [r7, #2]
  for(uint8_t i = 0; i < 3; i++) {
 8001546:	2300      	movs	r3, #0
 8001548:	71fb      	strb	r3, [r7, #7]
 800154a:	e047      	b.n	80015dc <floorBoard_Init+0xb4>
    HAL_I2C_Mem_Write(&hi2c1, FLOOR_I2C_ADDR[floorArray[i] - 1]<<1, PCA_CONFIGR, I2C_MEMADD_SIZE_8BIT, &dataModeBuffer, 1, 150);  // all output
 800154c:	79fb      	ldrb	r3, [r7, #7]
 800154e:	f107 0208 	add.w	r2, r7, #8
 8001552:	4413      	add	r3, r2
 8001554:	f813 3c04 	ldrb.w	r3, [r3, #-4]
 8001558:	3b01      	subs	r3, #1
 800155a:	4a25      	ldr	r2, [pc, #148]	; (80015f0 <floorBoard_Init+0xc8>)
 800155c:	5cd3      	ldrb	r3, [r2, r3]
 800155e:	b29b      	uxth	r3, r3
 8001560:	005b      	lsls	r3, r3, #1
 8001562:	b299      	uxth	r1, r3
 8001564:	2396      	movs	r3, #150	; 0x96
 8001566:	9302      	str	r3, [sp, #8]
 8001568:	2301      	movs	r3, #1
 800156a:	9301      	str	r3, [sp, #4]
 800156c:	1cfb      	adds	r3, r7, #3
 800156e:	9300      	str	r3, [sp, #0]
 8001570:	2301      	movs	r3, #1
 8001572:	2203      	movs	r2, #3
 8001574:	481f      	ldr	r0, [pc, #124]	; (80015f4 <floorBoard_Init+0xcc>)
 8001576:	f000 ff99 	bl	80024ac <HAL_I2C_Mem_Write>
    HAL_I2C_Mem_Write(&hi2c1, FLOOR_I2C_ADDR[floorArray[i] - 1]<<1, PCA_OUTPUTR, I2C_MEMADD_SIZE_8BIT, &dataModeBuffer, 1, 150);  // all low
 800157a:	79fb      	ldrb	r3, [r7, #7]
 800157c:	f107 0208 	add.w	r2, r7, #8
 8001580:	4413      	add	r3, r2
 8001582:	f813 3c04 	ldrb.w	r3, [r3, #-4]
 8001586:	3b01      	subs	r3, #1
 8001588:	4a19      	ldr	r2, [pc, #100]	; (80015f0 <floorBoard_Init+0xc8>)
 800158a:	5cd3      	ldrb	r3, [r2, r3]
 800158c:	b29b      	uxth	r3, r3
 800158e:	005b      	lsls	r3, r3, #1
 8001590:	b299      	uxth	r1, r3
 8001592:	2396      	movs	r3, #150	; 0x96
 8001594:	9302      	str	r3, [sp, #8]
 8001596:	2301      	movs	r3, #1
 8001598:	9301      	str	r3, [sp, #4]
 800159a:	1cfb      	adds	r3, r7, #3
 800159c:	9300      	str	r3, [sp, #0]
 800159e:	2301      	movs	r3, #1
 80015a0:	2201      	movs	r2, #1
 80015a2:	4814      	ldr	r0, [pc, #80]	; (80015f4 <floorBoard_Init+0xcc>)
 80015a4:	f000 ff82 	bl	80024ac <HAL_I2C_Mem_Write>
    HAL_I2C_Mem_Write(&hi2c1, FLOOR_I2C_ADDR[floorArray[i] - 1]<<1, PCA_OUTPUTR, I2C_MEMADD_SIZE_8BIT, &dataStateBuffer, 1, 150); // all DP
 80015a8:	79fb      	ldrb	r3, [r7, #7]
 80015aa:	f107 0208 	add.w	r2, r7, #8
 80015ae:	4413      	add	r3, r2
 80015b0:	f813 3c04 	ldrb.w	r3, [r3, #-4]
 80015b4:	3b01      	subs	r3, #1
 80015b6:	4a0e      	ldr	r2, [pc, #56]	; (80015f0 <floorBoard_Init+0xc8>)
 80015b8:	5cd3      	ldrb	r3, [r2, r3]
 80015ba:	b29b      	uxth	r3, r3
 80015bc:	005b      	lsls	r3, r3, #1
 80015be:	b299      	uxth	r1, r3
 80015c0:	2396      	movs	r3, #150	; 0x96
 80015c2:	9302      	str	r3, [sp, #8]
 80015c4:	2301      	movs	r3, #1
 80015c6:	9301      	str	r3, [sp, #4]
 80015c8:	1cbb      	adds	r3, r7, #2
 80015ca:	9300      	str	r3, [sp, #0]
 80015cc:	2301      	movs	r3, #1
 80015ce:	2201      	movs	r2, #1
 80015d0:	4808      	ldr	r0, [pc, #32]	; (80015f4 <floorBoard_Init+0xcc>)
 80015d2:	f000 ff6b 	bl	80024ac <HAL_I2C_Mem_Write>
  for(uint8_t i = 0; i < 3; i++) {
 80015d6:	79fb      	ldrb	r3, [r7, #7]
 80015d8:	3301      	adds	r3, #1
 80015da:	71fb      	strb	r3, [r7, #7]
 80015dc:	79fb      	ldrb	r3, [r7, #7]
 80015de:	2b02      	cmp	r3, #2
 80015e0:	d9b4      	bls.n	800154c <floorBoard_Init+0x24>
  }
}
 80015e2:	bf00      	nop
 80015e4:	3708      	adds	r7, #8
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	08004090 	.word	0x08004090
 80015f0:	2000002c 	.word	0x2000002c
 80015f4:	200000b0 	.word	0x200000b0

080015f8 <floorBoard_BitSave>:
// # save last bits (for save lamp state)
uint8_t floorBoard_BitSave(uint8_t lastFrame, uint8_t newFrame, uint8_t mode) {
 80015f8:	b480      	push	{r7}
 80015fa:	b085      	sub	sp, #20
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	4603      	mov	r3, r0
 8001600:	71fb      	strb	r3, [r7, #7]
 8001602:	460b      	mov	r3, r1
 8001604:	71bb      	strb	r3, [r7, #6]
 8001606:	4613      	mov	r3, r2
 8001608:	717b      	strb	r3, [r7, #5]
  uint8_t resultByte = 0;
 800160a:	2300      	movs	r3, #0
 800160c:	73fb      	strb	r3, [r7, #15]
  // save LAMP bit state
  if(mode != FRAME_LAMP && mode != FRAME_LAMP_CLEAR && mode != FRAME_CLEAR) {
 800160e:	797b      	ldrb	r3, [r7, #5]
 8001610:	2b05      	cmp	r3, #5
 8001612:	d014      	beq.n	800163e <floorBoard_BitSave+0x46>
 8001614:	797b      	ldrb	r3, [r7, #5]
 8001616:	2b07      	cmp	r3, #7
 8001618:	d011      	beq.n	800163e <floorBoard_BitSave+0x46>
 800161a:	797b      	ldrb	r3, [r7, #5]
 800161c:	2b06      	cmp	r3, #6
 800161e:	d00e      	beq.n	800163e <floorBoard_BitSave+0x46>
    if(lastFrame & LAMP_BIT_MASK) {
 8001620:	79fb      	ldrb	r3, [r7, #7]
 8001622:	f003 0302 	and.w	r3, r3, #2
 8001626:	2b00      	cmp	r3, #0
 8001628:	d006      	beq.n	8001638 <floorBoard_BitSave+0x40>
      resultByte = newFrame |= LAMP_BIT_MASK;
 800162a:	79bb      	ldrb	r3, [r7, #6]
 800162c:	f043 0302 	orr.w	r3, r3, #2
 8001630:	71bb      	strb	r3, [r7, #6]
 8001632:	79bb      	ldrb	r3, [r7, #6]
 8001634:	73fb      	strb	r3, [r7, #15]
    if(lastFrame & LAMP_BIT_MASK) {
 8001636:	e018      	b.n	800166a <floorBoard_BitSave+0x72>
    } else {
      resultByte = newFrame;
 8001638:	79bb      	ldrb	r3, [r7, #6]
 800163a:	73fb      	strb	r3, [r7, #15]
    if(lastFrame & LAMP_BIT_MASK) {
 800163c:	e015      	b.n	800166a <floorBoard_BitSave+0x72>
    }
  } else if(mode == FRAME_LAMP) {
 800163e:	797b      	ldrb	r3, [r7, #5]
 8001640:	2b05      	cmp	r3, #5
 8001642:	d106      	bne.n	8001652 <floorBoard_BitSave+0x5a>
    resultByte = lastFrame |= LAMP_BIT_MASK;
 8001644:	79fb      	ldrb	r3, [r7, #7]
 8001646:	f043 0302 	orr.w	r3, r3, #2
 800164a:	71fb      	strb	r3, [r7, #7]
 800164c:	79fb      	ldrb	r3, [r7, #7]
 800164e:	73fb      	strb	r3, [r7, #15]
 8001650:	e00b      	b.n	800166a <floorBoard_BitSave+0x72>
  } else if(mode == FRAME_LAMP_CLEAR) {
 8001652:	797b      	ldrb	r3, [r7, #5]
 8001654:	2b07      	cmp	r3, #7
 8001656:	d106      	bne.n	8001666 <floorBoard_BitSave+0x6e>
    resultByte = lastFrame &= ~LAMP_BIT_MASK;
 8001658:	79fb      	ldrb	r3, [r7, #7]
 800165a:	f023 0302 	bic.w	r3, r3, #2
 800165e:	71fb      	strb	r3, [r7, #7]
 8001660:	79fb      	ldrb	r3, [r7, #7]
 8001662:	73fb      	strb	r3, [r7, #15]
 8001664:	e001      	b.n	800166a <floorBoard_BitSave+0x72>
  } else {
    resultByte = newFrame;
 8001666:	79bb      	ldrb	r3, [r7, #6]
 8001668:	73fb      	strb	r3, [r7, #15]
  }
  return resultByte;
 800166a:	7bfb      	ldrb	r3, [r7, #15]
}
 800166c:	4618      	mov	r0, r3
 800166e:	3714      	adds	r7, #20
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr

08001678 <floorBoard_Control>:
// # control floor brd
void floorBoard_Control(uint8_t floor, uint8_t frame) {
 8001678:	b580      	push	{r7, lr}
 800167a:	b08a      	sub	sp, #40	; 0x28
 800167c:	af04      	add	r7, sp, #16
 800167e:	4603      	mov	r3, r0
 8001680:	460a      	mov	r2, r1
 8001682:	71fb      	strb	r3, [r7, #7]
 8001684:	4613      	mov	r3, r2
 8001686:	71bb      	strb	r3, [r7, #6]
  uint8_t bitCombination[] = {0xa0, 0x38, 0xb0, 0x40, 0x2, 0x0, 0x0}; // PCA9534 bits combination ( 1 / 2 / 3 / DP / BTN_LAMP / CLEAR / LAMP_CLEAR)
 8001688:	4a35      	ldr	r2, [pc, #212]	; (8001760 <floorBoard_Control+0xe8>)
 800168a:	f107 0310 	add.w	r3, r7, #16
 800168e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001692:	6018      	str	r0, [r3, #0]
 8001694:	3304      	adds	r3, #4
 8001696:	8019      	strh	r1, [r3, #0]
 8001698:	3302      	adds	r3, #2
 800169a:	0c0a      	lsrs	r2, r1, #16
 800169c:	701a      	strb	r2, [r3, #0]
  static uint8_t frameBuffer[] = {0x0, 0x0, 0x0}; // Frame buffer (for save last setted bits)

  // save bits and transmit data to I2C slave/s
  if(floor != FLOOR_ALL) {
 800169e:	79fb      	ldrb	r3, [r7, #7]
 80016a0:	2b04      	cmp	r3, #4
 80016a2:	d029      	beq.n	80016f8 <floorBoard_Control+0x80>
    uint8_t dataBuffer = floorBoard_BitSave(frameBuffer[floor - 1], bitCombination[frame - 1], frame);
 80016a4:	79fb      	ldrb	r3, [r7, #7]
 80016a6:	3b01      	subs	r3, #1
 80016a8:	4a2e      	ldr	r2, [pc, #184]	; (8001764 <floorBoard_Control+0xec>)
 80016aa:	5cd0      	ldrb	r0, [r2, r3]
 80016ac:	79bb      	ldrb	r3, [r7, #6]
 80016ae:	3b01      	subs	r3, #1
 80016b0:	f107 0218 	add.w	r2, r7, #24
 80016b4:	4413      	add	r3, r2
 80016b6:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 80016ba:	79ba      	ldrb	r2, [r7, #6]
 80016bc:	4619      	mov	r1, r3
 80016be:	f7ff ff9b 	bl	80015f8 <floorBoard_BitSave>
 80016c2:	4603      	mov	r3, r0
 80016c4:	73fb      	strb	r3, [r7, #15]
    frameBuffer[floor - 1] = dataBuffer;
 80016c6:	79fb      	ldrb	r3, [r7, #7]
 80016c8:	3b01      	subs	r3, #1
 80016ca:	7bf9      	ldrb	r1, [r7, #15]
 80016cc:	4a25      	ldr	r2, [pc, #148]	; (8001764 <floorBoard_Control+0xec>)
 80016ce:	54d1      	strb	r1, [r2, r3]
    HAL_I2C_Mem_Write(&hi2c1, FLOOR_I2C_ADDR[floor - 1]<<1, PCA_OUTPUTR, I2C_MEMADD_SIZE_8BIT, &dataBuffer, 1, 150);
 80016d0:	79fb      	ldrb	r3, [r7, #7]
 80016d2:	3b01      	subs	r3, #1
 80016d4:	4a24      	ldr	r2, [pc, #144]	; (8001768 <floorBoard_Control+0xf0>)
 80016d6:	5cd3      	ldrb	r3, [r2, r3]
 80016d8:	b29b      	uxth	r3, r3
 80016da:	005b      	lsls	r3, r3, #1
 80016dc:	b299      	uxth	r1, r3
 80016de:	2396      	movs	r3, #150	; 0x96
 80016e0:	9302      	str	r3, [sp, #8]
 80016e2:	2301      	movs	r3, #1
 80016e4:	9301      	str	r3, [sp, #4]
 80016e6:	f107 030f 	add.w	r3, r7, #15
 80016ea:	9300      	str	r3, [sp, #0]
 80016ec:	2301      	movs	r3, #1
 80016ee:	2201      	movs	r2, #1
 80016f0:	481e      	ldr	r0, [pc, #120]	; (800176c <floorBoard_Control+0xf4>)
 80016f2:	f000 fedb 	bl	80024ac <HAL_I2C_Mem_Write>
      frameBuffer[i] = dataBuffer;
      HAL_I2C_Mem_Write(&hi2c1, FLOOR_I2C_ADDR[i]<<1, PCA_OUTPUTR, I2C_MEMADD_SIZE_8BIT, &dataBuffer, 1, 150);
    }
  }

}
 80016f6:	e02e      	b.n	8001756 <floorBoard_Control+0xde>
    for(uint8_t i = 0; i < 3; i++) {
 80016f8:	2300      	movs	r3, #0
 80016fa:	75fb      	strb	r3, [r7, #23]
 80016fc:	e028      	b.n	8001750 <floorBoard_Control+0xd8>
      uint8_t dataBuffer = floorBoard_BitSave(frameBuffer[i], bitCombination[frame - 1], frame);
 80016fe:	7dfb      	ldrb	r3, [r7, #23]
 8001700:	4a18      	ldr	r2, [pc, #96]	; (8001764 <floorBoard_Control+0xec>)
 8001702:	5cd0      	ldrb	r0, [r2, r3]
 8001704:	79bb      	ldrb	r3, [r7, #6]
 8001706:	3b01      	subs	r3, #1
 8001708:	f107 0218 	add.w	r2, r7, #24
 800170c:	4413      	add	r3, r2
 800170e:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8001712:	79ba      	ldrb	r2, [r7, #6]
 8001714:	4619      	mov	r1, r3
 8001716:	f7ff ff6f 	bl	80015f8 <floorBoard_BitSave>
 800171a:	4603      	mov	r3, r0
 800171c:	73bb      	strb	r3, [r7, #14]
      frameBuffer[i] = dataBuffer;
 800171e:	7dfb      	ldrb	r3, [r7, #23]
 8001720:	7bb9      	ldrb	r1, [r7, #14]
 8001722:	4a10      	ldr	r2, [pc, #64]	; (8001764 <floorBoard_Control+0xec>)
 8001724:	54d1      	strb	r1, [r2, r3]
      HAL_I2C_Mem_Write(&hi2c1, FLOOR_I2C_ADDR[i]<<1, PCA_OUTPUTR, I2C_MEMADD_SIZE_8BIT, &dataBuffer, 1, 150);
 8001726:	7dfb      	ldrb	r3, [r7, #23]
 8001728:	4a0f      	ldr	r2, [pc, #60]	; (8001768 <floorBoard_Control+0xf0>)
 800172a:	5cd3      	ldrb	r3, [r2, r3]
 800172c:	b29b      	uxth	r3, r3
 800172e:	005b      	lsls	r3, r3, #1
 8001730:	b299      	uxth	r1, r3
 8001732:	2396      	movs	r3, #150	; 0x96
 8001734:	9302      	str	r3, [sp, #8]
 8001736:	2301      	movs	r3, #1
 8001738:	9301      	str	r3, [sp, #4]
 800173a:	f107 030e 	add.w	r3, r7, #14
 800173e:	9300      	str	r3, [sp, #0]
 8001740:	2301      	movs	r3, #1
 8001742:	2201      	movs	r2, #1
 8001744:	4809      	ldr	r0, [pc, #36]	; (800176c <floorBoard_Control+0xf4>)
 8001746:	f000 feb1 	bl	80024ac <HAL_I2C_Mem_Write>
    for(uint8_t i = 0; i < 3; i++) {
 800174a:	7dfb      	ldrb	r3, [r7, #23]
 800174c:	3301      	adds	r3, #1
 800174e:	75fb      	strb	r3, [r7, #23]
 8001750:	7dfb      	ldrb	r3, [r7, #23]
 8001752:	2b02      	cmp	r3, #2
 8001754:	d9d3      	bls.n	80016fe <floorBoard_Control+0x86>
}
 8001756:	bf00      	nop
 8001758:	3718      	adds	r7, #24
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	08004094 	.word	0x08004094
 8001764:	200000a8 	.word	0x200000a8
 8001768:	2000002c 	.word	0x2000002c
 800176c:	200000b0 	.word	0x200000b0

08001770 <updCurrentFloor>:
// # Update current floor and show floor number on all floor brd
// Docs: this function has check change floor and iniciate show current floor on all floor brd's.
void updCurrentFloor() {
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
  static uint8_t floorFrameArray[] = {FRAME_1, FRAME_2, FRAME_3};
  for(uint8_t floorN = 0; floorN < 4; floorN++) {
 8001776:	2300      	movs	r3, #0
 8001778:	71fb      	strb	r3, [r7, #7]
 800177a:	e01a      	b.n	80017b2 <updCurrentFloor+0x42>
    if(floorSensor_VAR_StateArr[floorN] == F_Sensor_Trigg && floorSensor_VAR_CurrentFloor != floorN) {
 800177c:	79fb      	ldrb	r3, [r7, #7]
 800177e:	4a10      	ldr	r2, [pc, #64]	; (80017c0 <updCurrentFloor+0x50>)
 8001780:	5cd3      	ldrb	r3, [r2, r3]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d112      	bne.n	80017ac <updCurrentFloor+0x3c>
 8001786:	4b0f      	ldr	r3, [pc, #60]	; (80017c4 <updCurrentFloor+0x54>)
 8001788:	781b      	ldrb	r3, [r3, #0]
 800178a:	79fa      	ldrb	r2, [r7, #7]
 800178c:	429a      	cmp	r2, r3
 800178e:	d00d      	beq.n	80017ac <updCurrentFloor+0x3c>
      floorSensor_VAR_CurrentFloor = floorN;
 8001790:	4a0c      	ldr	r2, [pc, #48]	; (80017c4 <updCurrentFloor+0x54>)
 8001792:	79fb      	ldrb	r3, [r7, #7]
 8001794:	7013      	strb	r3, [r2, #0]
      if(floorN > 0) {
 8001796:	79fb      	ldrb	r3, [r7, #7]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d007      	beq.n	80017ac <updCurrentFloor+0x3c>
        floorBoard_Control(FLOOR_ALL, floorFrameArray[floorN - 1]);
 800179c:	79fb      	ldrb	r3, [r7, #7]
 800179e:	3b01      	subs	r3, #1
 80017a0:	4a09      	ldr	r2, [pc, #36]	; (80017c8 <updCurrentFloor+0x58>)
 80017a2:	5cd3      	ldrb	r3, [r2, r3]
 80017a4:	4619      	mov	r1, r3
 80017a6:	2004      	movs	r0, #4
 80017a8:	f7ff ff66 	bl	8001678 <floorBoard_Control>
  for(uint8_t floorN = 0; floorN < 4; floorN++) {
 80017ac:	79fb      	ldrb	r3, [r7, #7]
 80017ae:	3301      	adds	r3, #1
 80017b0:	71fb      	strb	r3, [r7, #7]
 80017b2:	79fb      	ldrb	r3, [r7, #7]
 80017b4:	2b03      	cmp	r3, #3
 80017b6:	d9e1      	bls.n	800177c <updCurrentFloor+0xc>
      }
    }
  }
}
 80017b8:	bf00      	nop
 80017ba:	3708      	adds	r7, #8
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	200000fc 	.word	0x200000fc
 80017c4:	20000073 	.word	0x20000073
 80017c8:	20000038 	.word	0x20000038

080017cc <tripControl_checkRunPossiple>:


// ### Trip control ###
// # Check possible to start new trip
// Return: 0 - deny start a new trip / 1 - allow start a new trip
uint8_t tripControl_checkRunPossiple(uint8_t pressedFloor) {
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	4603      	mov	r3, r0
 80017d4:	71fb      	strb	r3, [r7, #7]
  // Ok. We can try start new trip.
  if(!tripControl_VAR_activeTrip && !tripControl_VAR_driveLatch && floorSensor_VAR_CurrentFloor != pressedFloor) { return 1; }
 80017d6:	4b0b      	ldr	r3, [pc, #44]	; (8001804 <tripControl_checkRunPossiple+0x38>)
 80017d8:	781b      	ldrb	r3, [r3, #0]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d10a      	bne.n	80017f4 <tripControl_checkRunPossiple+0x28>
 80017de:	4b0a      	ldr	r3, [pc, #40]	; (8001808 <tripControl_checkRunPossiple+0x3c>)
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d106      	bne.n	80017f4 <tripControl_checkRunPossiple+0x28>
 80017e6:	4b09      	ldr	r3, [pc, #36]	; (800180c <tripControl_checkRunPossiple+0x40>)
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	79fa      	ldrb	r2, [r7, #7]
 80017ec:	429a      	cmp	r2, r3
 80017ee:	d001      	beq.n	80017f4 <tripControl_checkRunPossiple+0x28>
 80017f0:	2301      	movs	r3, #1
 80017f2:	e000      	b.n	80017f6 <tripControl_checkRunPossiple+0x2a>
  // No. We can't try start new trip.
  else { return 0; }
 80017f4:	2300      	movs	r3, #0
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	370c      	adds	r7, #12
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	20000075 	.word	0x20000075
 8001808:	20000076 	.word	0x20000076
 800180c:	20000073 	.word	0x20000073

08001810 <tripControl_start>:
// # Start trip
// Docs: this function has set start trip flags, run drive
void tripControl_start(uint8_t assignedFloor) {
 8001810:	b580      	push	{r7, lr}
 8001812:	b084      	sub	sp, #16
 8001814:	af00      	add	r7, sp, #0
 8001816:	4603      	mov	r3, r0
 8001818:	71fb      	strb	r3, [r7, #7]
  uint8_t driveDirection = 0;
 800181a:	2300      	movs	r3, #0
 800181c:	73fb      	strb	r3, [r7, #15]

  if(assignedFloor == floorSensor_VAR_CurrentFloor) { return; }
 800181e:	4b21      	ldr	r3, [pc, #132]	; (80018a4 <tripControl_start+0x94>)
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	79fa      	ldrb	r2, [r7, #7]
 8001824:	429a      	cmp	r2, r3
 8001826:	d038      	beq.n	800189a <tripControl_start+0x8a>

  // select drive direct and calc floor trip count
  if(floorSensor_VAR_CurrentFloor < assignedFloor) {
 8001828:	4b1e      	ldr	r3, [pc, #120]	; (80018a4 <tripControl_start+0x94>)
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	79fa      	ldrb	r2, [r7, #7]
 800182e:	429a      	cmp	r2, r3
 8001830:	d909      	bls.n	8001846 <tripControl_start+0x36>
    driveDirection = UP;
 8001832:	2301      	movs	r3, #1
 8001834:	73fb      	strb	r3, [r7, #15]
    tripControl_VAR_floorCount = assignedFloor - floorSensor_VAR_CurrentFloor;
 8001836:	4b1b      	ldr	r3, [pc, #108]	; (80018a4 <tripControl_start+0x94>)
 8001838:	781b      	ldrb	r3, [r3, #0]
 800183a:	79fa      	ldrb	r2, [r7, #7]
 800183c:	1ad3      	subs	r3, r2, r3
 800183e:	b2da      	uxtb	r2, r3
 8001840:	4b19      	ldr	r3, [pc, #100]	; (80018a8 <tripControl_start+0x98>)
 8001842:	701a      	strb	r2, [r3, #0]
 8001844:	e008      	b.n	8001858 <tripControl_start+0x48>
  } else {
    driveDirection = DOWN;
 8001846:	2300      	movs	r3, #0
 8001848:	73fb      	strb	r3, [r7, #15]
    tripControl_VAR_floorCount = floorSensor_VAR_CurrentFloor - assignedFloor;
 800184a:	4b16      	ldr	r3, [pc, #88]	; (80018a4 <tripControl_start+0x94>)
 800184c:	781a      	ldrb	r2, [r3, #0]
 800184e:	79fb      	ldrb	r3, [r7, #7]
 8001850:	1ad3      	subs	r3, r2, r3
 8001852:	b2da      	uxtb	r2, r3
 8001854:	4b14      	ldr	r3, [pc, #80]	; (80018a8 <tripControl_start+0x98>)
 8001856:	701a      	strb	r2, [r3, #0]
  }

  tripControl_VAR_activeTrip = 1;
 8001858:	4b14      	ldr	r3, [pc, #80]	; (80018ac <tripControl_start+0x9c>)
 800185a:	2201      	movs	r2, #1
 800185c:	701a      	strb	r2, [r3, #0]
  tripControl_VAR_assignedFloor = assignedFloor;
 800185e:	4a14      	ldr	r2, [pc, #80]	; (80018b0 <tripControl_start+0xa0>)
 8001860:	79fb      	ldrb	r3, [r7, #7]
 8001862:	7013      	strb	r3, [r2, #0]
  // switch ON assigned floor btn lamp
  // TODO: fix
  floorBoard_Control(FLOOR_ALL, FRAME_LAMP_CLEAR);
 8001864:	2107      	movs	r1, #7
 8001866:	2004      	movs	r0, #4
 8001868:	f7ff ff06 	bl	8001678 <floorBoard_Control>
  floorBoard_Control(assignedFloor, FRAME_LAMP);
 800186c:	79fb      	ldrb	r3, [r7, #7]
 800186e:	2105      	movs	r1, #5
 8001870:	4618      	mov	r0, r3
 8001872:	f7ff ff01 	bl	8001678 <floorBoard_Control>

  // start trip drive (smooth accelrate)
  motionDrive_accelerateControl(ACCELERATE, mDefaultSpeed, 65, 3);
 8001876:	2303      	movs	r3, #3
 8001878:	2241      	movs	r2, #65	; 0x41
 800187a:	218c      	movs	r1, #140	; 0x8c
 800187c:	2001      	movs	r0, #1
 800187e:	f7ff faf7 	bl	8000e70 <motionDrive_accelerateControl>
  motionDrive_Control(START, driveDirection);
 8001882:	7bfb      	ldrb	r3, [r7, #15]
 8001884:	4619      	mov	r1, r3
 8001886:	2001      	movs	r0, #1
 8001888:	f7ff fa52 	bl	8000d30 <motionDrive_Control>
  ledIndicator_setMode(BLINK, GREEN_LED, 550);
 800188c:	f240 2226 	movw	r2, #550	; 0x226
 8001890:	210d      	movs	r1, #13
 8001892:	2002      	movs	r0, #2
 8001894:	f7ff f8cc 	bl	8000a30 <ledIndicator_setMode>
 8001898:	e000      	b.n	800189c <tripControl_start+0x8c>
  if(assignedFloor == floorSensor_VAR_CurrentFloor) { return; }
 800189a:	bf00      	nop
}
 800189c:	3710      	adds	r7, #16
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	20000073 	.word	0x20000073
 80018a8:	20000077 	.word	0x20000077
 80018ac:	20000075 	.word	0x20000075
 80018b0:	20000078 	.word	0x20000078

080018b4 <tripControl_complete>:
// # Complete active trip
// Docs: this function has clear all trip flags, stop drive
void tripControl_complete() {
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
  motionDrive_Control(STOP, 0);
 80018b8:	2100      	movs	r1, #0
 80018ba:	2000      	movs	r0, #0
 80018bc:	f7ff fa38 	bl	8000d30 <motionDrive_Control>
  ledIndicator_setMode(STATIC, GREEN_LED, 0);
 80018c0:	2200      	movs	r2, #0
 80018c2:	210d      	movs	r1, #13
 80018c4:	2001      	movs	r0, #1
 80018c6:	f7ff f8b3 	bl	8000a30 <ledIndicator_setMode>
  tripControl_VAR_assignedFloor = 0;
 80018ca:	4b06      	ldr	r3, [pc, #24]	; (80018e4 <tripControl_complete+0x30>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	701a      	strb	r2, [r3, #0]
  tripControl_VAR_activeTrip = 0;
 80018d0:	4b05      	ldr	r3, [pc, #20]	; (80018e8 <tripControl_complete+0x34>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	701a      	strb	r2, [r3, #0]
  // Switch OFF assigned floor btn lamp
  // TODO: fix
  floorBoard_Control(FLOOR_ALL, FRAME_LAMP_CLEAR);
 80018d6:	2107      	movs	r1, #7
 80018d8:	2004      	movs	r0, #4
 80018da:	f7ff fecd 	bl	8001678 <floorBoard_Control>
}
 80018de:	bf00      	nop
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	20000078 	.word	0x20000078
 80018e8:	20000075 	.word	0x20000075

080018ec <tripControl_supervisor>:
// # Trip proccess supervisor
// Docs: this function has control active trip events, mode operation
void tripControl_supervisor() {
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
  if(tripControl_VAR_activeTrip) {
 80018f0:	4b09      	ldr	r3, [pc, #36]	; (8001918 <tripControl_supervisor+0x2c>)
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d00d      	beq.n	8001914 <tripControl_supervisor+0x28>
    // Event #1 - Current floor = assigned floor => complete trip (stop drive)
    if(floorSensor_VAR_CurrentFloor == tripControl_VAR_assignedFloor) { tripControl_complete(); }
 80018f8:	4b08      	ldr	r3, [pc, #32]	; (800191c <tripControl_supervisor+0x30>)
 80018fa:	781a      	ldrb	r2, [r3, #0]
 80018fc:	4b08      	ldr	r3, [pc, #32]	; (8001920 <tripControl_supervisor+0x34>)
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	429a      	cmp	r2, r3
 8001902:	d101      	bne.n	8001908 <tripControl_supervisor+0x1c>
 8001904:	f7ff ffd6 	bl	80018b4 <tripControl_complete>
    // Event #2 - Currebt floor = overfull sensor => complete trip (stop drive)
    if(floorSensor_VAR_CurrentFloor == 0) { tripControl_complete(); }
 8001908:	4b04      	ldr	r3, [pc, #16]	; (800191c <tripControl_supervisor+0x30>)
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d101      	bne.n	8001914 <tripControl_supervisor+0x28>
 8001910:	f7ff ffd0 	bl	80018b4 <tripControl_complete>
    // Event #3 - soft stop drive (drive up to assigned floor)
    //if(abs(floorSensor_VAR_CurrentFloor - tripControl_VAR_assignedFloor) == 1) {}
  }
}
 8001914:	bf00      	nop
 8001916:	bd80      	pop	{r7, pc}
 8001918:	20000075 	.word	0x20000075
 800191c:	20000073 	.word	0x20000073
 8001920:	20000078 	.word	0x20000078

08001924 <btnControl_PressEvent>:

// ### Events ###
// # Btn press event handler
// x1 pressed btn - try run trip? / >1 pressed btn - try stop drive?
// Not returns.
void btnControl_PressEvent(uint8_t pressedFloor) {
 8001924:	b580      	push	{r7, lr}
 8001926:	b084      	sub	sp, #16
 8001928:	af00      	add	r7, sp, #0
 800192a:	4603      	mov	r3, r0
 800192c:	71fb      	strb	r3, [r7, #7]
  if(!btnControl_VAR_pressAccess) { return; }
 800192e:	4b18      	ldr	r3, [pc, #96]	; (8001990 <btnControl_PressEvent+0x6c>)
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d027      	beq.n	8001986 <btnControl_PressEvent+0x62>
  // calc total pressed btn's
  uint8_t totalPressedBtns = 0;
 8001936:	2300      	movs	r3, #0
 8001938:	73fb      	strb	r3, [r7, #15]
  for(uint8_t i = 1; i < 4; i++) {
 800193a:	2301      	movs	r3, #1
 800193c:	73bb      	strb	r3, [r7, #14]
 800193e:	e00a      	b.n	8001956 <btnControl_PressEvent+0x32>
    if(btnControl_VAR_StateArr[i]) { totalPressedBtns++; }
 8001940:	7bbb      	ldrb	r3, [r7, #14]
 8001942:	4a14      	ldr	r2, [pc, #80]	; (8001994 <btnControl_PressEvent+0x70>)
 8001944:	5cd3      	ldrb	r3, [r2, r3]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d002      	beq.n	8001950 <btnControl_PressEvent+0x2c>
 800194a:	7bfb      	ldrb	r3, [r7, #15]
 800194c:	3301      	adds	r3, #1
 800194e:	73fb      	strb	r3, [r7, #15]
  for(uint8_t i = 1; i < 4; i++) {
 8001950:	7bbb      	ldrb	r3, [r7, #14]
 8001952:	3301      	adds	r3, #1
 8001954:	73bb      	strb	r3, [r7, #14]
 8001956:	7bbb      	ldrb	r3, [r7, #14]
 8001958:	2b03      	cmp	r3, #3
 800195a:	d9f1      	bls.n	8001940 <btnControl_PressEvent+0x1c>
  }
  // Events
  // #1 - Pressed x1 btn - try start trip?
  if(totalPressedBtns == 1) {
 800195c:	7bfb      	ldrb	r3, [r7, #15]
 800195e:	2b01      	cmp	r3, #1
 8001960:	d10b      	bne.n	800197a <btnControl_PressEvent+0x56>
    if(tripControl_checkRunPossiple(pressedFloor) == 1) {
 8001962:	79fb      	ldrb	r3, [r7, #7]
 8001964:	4618      	mov	r0, r3
 8001966:	f7ff ff31 	bl	80017cc <tripControl_checkRunPossiple>
 800196a:	4603      	mov	r3, r0
 800196c:	2b01      	cmp	r3, #1
 800196e:	d10b      	bne.n	8001988 <btnControl_PressEvent+0x64>
      tripControl_start(pressedFloor);
 8001970:	79fb      	ldrb	r3, [r7, #7]
 8001972:	4618      	mov	r0, r3
 8001974:	f7ff ff4c 	bl	8001810 <tripControl_start>
 8001978:	e006      	b.n	8001988 <btnControl_PressEvent+0x64>
    }
  }
  // #2 - Pressed >1 btn -> stop drive?
  else if(totalPressedBtns > 1) { tripControl_complete(); }
 800197a:	7bfb      	ldrb	r3, [r7, #15]
 800197c:	2b01      	cmp	r3, #1
 800197e:	d903      	bls.n	8001988 <btnControl_PressEvent+0x64>
 8001980:	f7ff ff98 	bl	80018b4 <tripControl_complete>
 8001984:	e000      	b.n	8001988 <btnControl_PressEvent+0x64>
  if(!btnControl_VAR_pressAccess) { return; }
 8001986:	bf00      	nop
}
 8001988:	3710      	adds	r7, #16
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	2000002f 	.word	0x2000002f
 8001994:	20000104 	.word	0x20000104

08001998 <SystemClock_Config>:


// HAL functions
void SystemClock_Config(void) {
 8001998:	b580      	push	{r7, lr}
 800199a:	b096      	sub	sp, #88	; 0x58
 800199c:	af00      	add	r7, sp, #0

  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800199e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80019a2:	2228      	movs	r2, #40	; 0x28
 80019a4:	2100      	movs	r1, #0
 80019a6:	4618      	mov	r0, r3
 80019a8:	f002 fb56 	bl	8004058 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019ac:	f107 031c 	add.w	r3, r7, #28
 80019b0:	2200      	movs	r2, #0
 80019b2:	601a      	str	r2, [r3, #0]
 80019b4:	605a      	str	r2, [r3, #4]
 80019b6:	609a      	str	r2, [r3, #8]
 80019b8:	60da      	str	r2, [r3, #12]
 80019ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019bc:	463b      	mov	r3, r7
 80019be:	2200      	movs	r2, #0
 80019c0:	601a      	str	r2, [r3, #0]
 80019c2:	605a      	str	r2, [r3, #4]
 80019c4:	609a      	str	r2, [r3, #8]
 80019c6:	60da      	str	r2, [r3, #12]
 80019c8:	611a      	str	r2, [r3, #16]
 80019ca:	615a      	str	r2, [r3, #20]
 80019cc:	619a      	str	r2, [r3, #24]

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80019ce:	2301      	movs	r3, #1
 80019d0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80019d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019d6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80019d8:	2300      	movs	r3, #0
 80019da:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019dc:	2301      	movs	r3, #1
 80019de:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019e0:	2302      	movs	r3, #2
 80019e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019e8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL3;
 80019ea:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80019ee:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019f0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80019f4:	4618      	mov	r0, r3
 80019f6:	f001 f8e7 	bl	8002bc8 <HAL_RCC_OscConfig>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d001      	beq.n	8001a04 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8001a00:	f000 f8a8 	bl	8001b54 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a04:	230f      	movs	r3, #15
 8001a06:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a08:	2302      	movs	r3, #2
 8001a0a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a10:	2300      	movs	r3, #0
 8001a12:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a14:	2300      	movs	r3, #0
 8001a16:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001a18:	f107 031c 	add.w	r3, r7, #28
 8001a1c:	2100      	movs	r1, #0
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f001 ffda 	bl	80039d8 <HAL_RCC_ClockConfig>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d001      	beq.n	8001a2e <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001a2a:	f000 f893 	bl	8001b54 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001a2e:	2320      	movs	r3, #32
 8001a30:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_SYSCLK;
 8001a32:	2310      	movs	r3, #16
 8001a34:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a36:	463b      	mov	r3, r7
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f002 f9b3 	bl	8003da4 <HAL_RCCEx_PeriphCLKConfig>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d001      	beq.n	8001a48 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8001a44:	f000 f886 	bl	8001b54 <Error_Handler>
  }
}
 8001a48:	bf00      	nop
 8001a4a:	3758      	adds	r7, #88	; 0x58
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}

08001a50 <MX_I2C1_Init>:
/**
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void) {
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0
  hi2c1.Instance = I2C1;
 8001a54:	4b1b      	ldr	r3, [pc, #108]	; (8001ac4 <MX_I2C1_Init+0x74>)
 8001a56:	4a1c      	ldr	r2, [pc, #112]	; (8001ac8 <MX_I2C1_Init+0x78>)
 8001a58:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00506682;
 8001a5a:	4b1a      	ldr	r3, [pc, #104]	; (8001ac4 <MX_I2C1_Init+0x74>)
 8001a5c:	4a1b      	ldr	r2, [pc, #108]	; (8001acc <MX_I2C1_Init+0x7c>)
 8001a5e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001a60:	4b18      	ldr	r3, [pc, #96]	; (8001ac4 <MX_I2C1_Init+0x74>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a66:	4b17      	ldr	r3, [pc, #92]	; (8001ac4 <MX_I2C1_Init+0x74>)
 8001a68:	2201      	movs	r2, #1
 8001a6a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a6c:	4b15      	ldr	r3, [pc, #84]	; (8001ac4 <MX_I2C1_Init+0x74>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001a72:	4b14      	ldr	r3, [pc, #80]	; (8001ac4 <MX_I2C1_Init+0x74>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001a78:	4b12      	ldr	r3, [pc, #72]	; (8001ac4 <MX_I2C1_Init+0x74>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a7e:	4b11      	ldr	r3, [pc, #68]	; (8001ac4 <MX_I2C1_Init+0x74>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a84:	4b0f      	ldr	r3, [pc, #60]	; (8001ac4 <MX_I2C1_Init+0x74>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a8a:	480e      	ldr	r0, [pc, #56]	; (8001ac4 <MX_I2C1_Init+0x74>)
 8001a8c:	f000 fc7e 	bl	800238c <HAL_I2C_Init>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d001      	beq.n	8001a9a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001a96:	f000 f85d 	bl	8001b54 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001a9a:	2100      	movs	r1, #0
 8001a9c:	4809      	ldr	r0, [pc, #36]	; (8001ac4 <MX_I2C1_Init+0x74>)
 8001a9e:	f000 fffb 	bl	8002a98 <HAL_I2CEx_ConfigAnalogFilter>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d001      	beq.n	8001aac <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001aa8:	f000 f854 	bl	8001b54 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001aac:	2100      	movs	r1, #0
 8001aae:	4805      	ldr	r0, [pc, #20]	; (8001ac4 <MX_I2C1_Init+0x74>)
 8001ab0:	f001 f83d 	bl	8002b2e <HAL_I2CEx_ConfigDigitalFilter>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d001      	beq.n	8001abe <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001aba:	f000 f84b 	bl	8001b54 <Error_Handler>
  }

}
 8001abe:	bf00      	nop
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	200000b0 	.word	0x200000b0
 8001ac8:	40005400 	.word	0x40005400
 8001acc:	00506682 	.word	0x00506682

08001ad0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b088      	sub	sp, #32
 8001ad4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad6:	f107 030c 	add.w	r3, r7, #12
 8001ada:	2200      	movs	r2, #0
 8001adc:	601a      	str	r2, [r3, #0]
 8001ade:	605a      	str	r2, [r3, #4]
 8001ae0:	609a      	str	r2, [r3, #8]
 8001ae2:	60da      	str	r2, [r3, #12]
 8001ae4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ae6:	4b1a      	ldr	r3, [pc, #104]	; (8001b50 <MX_GPIO_Init+0x80>)
 8001ae8:	695b      	ldr	r3, [r3, #20]
 8001aea:	4a19      	ldr	r2, [pc, #100]	; (8001b50 <MX_GPIO_Init+0x80>)
 8001aec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001af0:	6153      	str	r3, [r2, #20]
 8001af2:	4b17      	ldr	r3, [pc, #92]	; (8001b50 <MX_GPIO_Init+0x80>)
 8001af4:	695b      	ldr	r3, [r3, #20]
 8001af6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001afa:	60bb      	str	r3, [r7, #8]
 8001afc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001afe:	4b14      	ldr	r3, [pc, #80]	; (8001b50 <MX_GPIO_Init+0x80>)
 8001b00:	695b      	ldr	r3, [r3, #20]
 8001b02:	4a13      	ldr	r2, [pc, #76]	; (8001b50 <MX_GPIO_Init+0x80>)
 8001b04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b08:	6153      	str	r3, [r2, #20]
 8001b0a:	4b11      	ldr	r3, [pc, #68]	; (8001b50 <MX_GPIO_Init+0x80>)
 8001b0c:	695b      	ldr	r3, [r3, #20]
 8001b0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b12:	607b      	str	r3, [r7, #4]
 8001b14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b16:	4b0e      	ldr	r3, [pc, #56]	; (8001b50 <MX_GPIO_Init+0x80>)
 8001b18:	695b      	ldr	r3, [r3, #20]
 8001b1a:	4a0d      	ldr	r2, [pc, #52]	; (8001b50 <MX_GPIO_Init+0x80>)
 8001b1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b20:	6153      	str	r3, [r2, #20]
 8001b22:	4b0b      	ldr	r3, [pc, #44]	; (8001b50 <MX_GPIO_Init+0x80>)
 8001b24:	695b      	ldr	r3, [r3, #20]
 8001b26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b2a:	603b      	str	r3, [r7, #0]
 8001b2c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PA0 PA1 PA2 PA3 PA4 PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001b2e:	237f      	movs	r3, #127	; 0x7f
 8001b30:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b32:	2300      	movs	r3, #0
 8001b34:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b36:	2300      	movs	r3, #0
 8001b38:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b3a:	f107 030c 	add.w	r3, r7, #12
 8001b3e:	4619      	mov	r1, r3
 8001b40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b44:	f000 fa98 	bl	8002078 <HAL_GPIO_Init>
}
 8001b48:	bf00      	nop
 8001b4a:	3720      	adds	r7, #32
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	40021000 	.word	0x40021000

08001b54 <Error_Handler>:

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void) {}
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	bf00      	nop
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
	...

08001b64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b083      	sub	sp, #12
 8001b68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b6a:	4b0f      	ldr	r3, [pc, #60]	; (8001ba8 <HAL_MspInit+0x44>)
 8001b6c:	699b      	ldr	r3, [r3, #24]
 8001b6e:	4a0e      	ldr	r2, [pc, #56]	; (8001ba8 <HAL_MspInit+0x44>)
 8001b70:	f043 0301 	orr.w	r3, r3, #1
 8001b74:	6193      	str	r3, [r2, #24]
 8001b76:	4b0c      	ldr	r3, [pc, #48]	; (8001ba8 <HAL_MspInit+0x44>)
 8001b78:	699b      	ldr	r3, [r3, #24]
 8001b7a:	f003 0301 	and.w	r3, r3, #1
 8001b7e:	607b      	str	r3, [r7, #4]
 8001b80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b82:	4b09      	ldr	r3, [pc, #36]	; (8001ba8 <HAL_MspInit+0x44>)
 8001b84:	69db      	ldr	r3, [r3, #28]
 8001b86:	4a08      	ldr	r2, [pc, #32]	; (8001ba8 <HAL_MspInit+0x44>)
 8001b88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b8c:	61d3      	str	r3, [r2, #28]
 8001b8e:	4b06      	ldr	r3, [pc, #24]	; (8001ba8 <HAL_MspInit+0x44>)
 8001b90:	69db      	ldr	r3, [r3, #28]
 8001b92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b96:	603b      	str	r3, [r7, #0]
 8001b98:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b9a:	bf00      	nop
 8001b9c:	370c      	adds	r7, #12
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr
 8001ba6:	bf00      	nop
 8001ba8:	40021000 	.word	0x40021000

08001bac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b08a      	sub	sp, #40	; 0x28
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb4:	f107 0314 	add.w	r3, r7, #20
 8001bb8:	2200      	movs	r2, #0
 8001bba:	601a      	str	r2, [r3, #0]
 8001bbc:	605a      	str	r2, [r3, #4]
 8001bbe:	609a      	str	r2, [r3, #8]
 8001bc0:	60da      	str	r2, [r3, #12]
 8001bc2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a1b      	ldr	r2, [pc, #108]	; (8001c38 <HAL_I2C_MspInit+0x8c>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d12f      	bne.n	8001c2e <HAL_I2C_MspInit+0x82>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bce:	4b1b      	ldr	r3, [pc, #108]	; (8001c3c <HAL_I2C_MspInit+0x90>)
 8001bd0:	695b      	ldr	r3, [r3, #20]
 8001bd2:	4a1a      	ldr	r2, [pc, #104]	; (8001c3c <HAL_I2C_MspInit+0x90>)
 8001bd4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bd8:	6153      	str	r3, [r2, #20]
 8001bda:	4b18      	ldr	r3, [pc, #96]	; (8001c3c <HAL_I2C_MspInit+0x90>)
 8001bdc:	695b      	ldr	r3, [r3, #20]
 8001bde:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001be2:	613b      	str	r3, [r7, #16]
 8001be4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001be6:	23c0      	movs	r3, #192	; 0xc0
 8001be8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bea:	2312      	movs	r3, #18
 8001bec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001bf6:	2304      	movs	r3, #4
 8001bf8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bfa:	f107 0314 	add.w	r3, r7, #20
 8001bfe:	4619      	mov	r1, r3
 8001c00:	480f      	ldr	r0, [pc, #60]	; (8001c40 <HAL_I2C_MspInit+0x94>)
 8001c02:	f000 fa39 	bl	8002078 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c06:	4b0d      	ldr	r3, [pc, #52]	; (8001c3c <HAL_I2C_MspInit+0x90>)
 8001c08:	69db      	ldr	r3, [r3, #28]
 8001c0a:	4a0c      	ldr	r2, [pc, #48]	; (8001c3c <HAL_I2C_MspInit+0x90>)
 8001c0c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c10:	61d3      	str	r3, [r2, #28]
 8001c12:	4b0a      	ldr	r3, [pc, #40]	; (8001c3c <HAL_I2C_MspInit+0x90>)
 8001c14:	69db      	ldr	r3, [r3, #28]
 8001c16:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c1a:	60fb      	str	r3, [r7, #12]
 8001c1c:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001c1e:	2200      	movs	r2, #0
 8001c20:	2100      	movs	r1, #0
 8001c22:	201f      	movs	r0, #31
 8001c24:	f000 f9f1 	bl	800200a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001c28:	201f      	movs	r0, #31
 8001c2a:	f000 fa0a 	bl	8002042 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001c2e:	bf00      	nop
 8001c30:	3728      	adds	r7, #40	; 0x28
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	40005400 	.word	0x40005400
 8001c3c:	40021000 	.word	0x40021000
 8001c40:	48000400 	.word	0x48000400

08001c44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001c48:	bf00      	nop
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr

08001c52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c52:	b480      	push	{r7}
 8001c54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c56:	e7fe      	b.n	8001c56 <HardFault_Handler+0x4>

08001c58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c5c:	e7fe      	b.n	8001c5c <MemManage_Handler+0x4>

08001c5e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c5e:	b480      	push	{r7}
 8001c60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c62:	e7fe      	b.n	8001c62 <BusFault_Handler+0x4>

08001c64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c68:	e7fe      	b.n	8001c68 <UsageFault_Handler+0x4>

08001c6a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c6a:	b480      	push	{r7}
 8001c6c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c6e:	bf00      	nop
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr

08001c78 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c7c:	bf00      	nop
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr

08001c86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c86:	b480      	push	{r7}
 8001c88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c8a:	bf00      	nop
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr

08001c94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0
  HAL_IncTick();
 8001c98:	f000 f89a 	bl	8001dd0 <HAL_IncTick>
  msTicks++; // Up Ms user timer variable
 8001c9c:	4b03      	ldr	r3, [pc, #12]	; (8001cac <SysTick_Handler+0x18>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	3301      	adds	r3, #1
 8001ca2:	4a02      	ldr	r2, [pc, #8]	; (8001cac <SysTick_Handler+0x18>)
 8001ca4:	6013      	str	r3, [r2, #0]
}
 8001ca6:	bf00      	nop
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	20000064 	.word	0x20000064

08001cb0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXT line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001cb4:	4802      	ldr	r0, [pc, #8]	; (8001cc0 <I2C1_EV_IRQHandler+0x10>)
 8001cb6:	f000 fd0d 	bl	80026d4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001cba:	bf00      	nop
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	200000b0 	.word	0x200000b0

08001cc4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001cc8:	4b08      	ldr	r3, [pc, #32]	; (8001cec <SystemInit+0x28>)
 8001cca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cce:	4a07      	ldr	r2, [pc, #28]	; (8001cec <SystemInit+0x28>)
 8001cd0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001cd4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001cd8:	4b04      	ldr	r3, [pc, #16]	; (8001cec <SystemInit+0x28>)
 8001cda:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001cde:	609a      	str	r2, [r3, #8]
#endif
}
 8001ce0:	bf00      	nop
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr
 8001cea:	bf00      	nop
 8001cec:	e000ed00 	.word	0xe000ed00

08001cf0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001cf0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d28 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001cf4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001cf6:	e003      	b.n	8001d00 <LoopCopyDataInit>

08001cf8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001cf8:	4b0c      	ldr	r3, [pc, #48]	; (8001d2c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001cfa:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001cfc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001cfe:	3104      	adds	r1, #4

08001d00 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001d00:	480b      	ldr	r0, [pc, #44]	; (8001d30 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001d02:	4b0c      	ldr	r3, [pc, #48]	; (8001d34 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001d04:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001d06:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001d08:	d3f6      	bcc.n	8001cf8 <CopyDataInit>
	ldr	r2, =_sbss
 8001d0a:	4a0b      	ldr	r2, [pc, #44]	; (8001d38 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001d0c:	e002      	b.n	8001d14 <LoopFillZerobss>

08001d0e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001d0e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001d10:	f842 3b04 	str.w	r3, [r2], #4

08001d14 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001d14:	4b09      	ldr	r3, [pc, #36]	; (8001d3c <LoopForever+0x16>)
	cmp	r2, r3
 8001d16:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001d18:	d3f9      	bcc.n	8001d0e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001d1a:	f7ff ffd3 	bl	8001cc4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d1e:	f002 f977 	bl	8004010 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001d22:	f7fe fc79 	bl	8000618 <main>

08001d26 <LoopForever>:

LoopForever:
    b LoopForever
 8001d26:	e7fe      	b.n	8001d26 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001d28:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8001d2c:	080040d4 	.word	0x080040d4
	ldr	r0, =_sdata
 8001d30:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001d34:	20000048 	.word	0x20000048
	ldr	r2, =_sbss
 8001d38:	20000048 	.word	0x20000048
	ldr	r3, = _ebss
 8001d3c:	2000010c 	.word	0x2000010c

08001d40 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001d40:	e7fe      	b.n	8001d40 <ADC1_2_IRQHandler>
	...

08001d44 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d48:	4b08      	ldr	r3, [pc, #32]	; (8001d6c <HAL_Init+0x28>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a07      	ldr	r2, [pc, #28]	; (8001d6c <HAL_Init+0x28>)
 8001d4e:	f043 0310 	orr.w	r3, r3, #16
 8001d52:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d54:	2003      	movs	r0, #3
 8001d56:	f000 f94d 	bl	8001ff4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d5a:	2000      	movs	r0, #0
 8001d5c:	f000 f808 	bl	8001d70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d60:	f7ff ff00 	bl	8001b64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d64:	2300      	movs	r3, #0
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	40022000 	.word	0x40022000

08001d70 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b082      	sub	sp, #8
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d78:	4b12      	ldr	r3, [pc, #72]	; (8001dc4 <HAL_InitTick+0x54>)
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	4b12      	ldr	r3, [pc, #72]	; (8001dc8 <HAL_InitTick+0x58>)
 8001d7e:	781b      	ldrb	r3, [r3, #0]
 8001d80:	4619      	mov	r1, r3
 8001d82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d86:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f000 f965 	bl	800205e <HAL_SYSTICK_Config>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d001      	beq.n	8001d9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e00e      	b.n	8001dbc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2b0f      	cmp	r3, #15
 8001da2:	d80a      	bhi.n	8001dba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001da4:	2200      	movs	r2, #0
 8001da6:	6879      	ldr	r1, [r7, #4]
 8001da8:	f04f 30ff 	mov.w	r0, #4294967295
 8001dac:	f000 f92d 	bl	800200a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001db0:	4a06      	ldr	r2, [pc, #24]	; (8001dcc <HAL_InitTick+0x5c>)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001db6:	2300      	movs	r3, #0
 8001db8:	e000      	b.n	8001dbc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	3708      	adds	r7, #8
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	2000003c 	.word	0x2000003c
 8001dc8:	20000044 	.word	0x20000044
 8001dcc:	20000040 	.word	0x20000040

08001dd0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001dd4:	4b06      	ldr	r3, [pc, #24]	; (8001df0 <HAL_IncTick+0x20>)
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	461a      	mov	r2, r3
 8001dda:	4b06      	ldr	r3, [pc, #24]	; (8001df4 <HAL_IncTick+0x24>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4413      	add	r3, r2
 8001de0:	4a04      	ldr	r2, [pc, #16]	; (8001df4 <HAL_IncTick+0x24>)
 8001de2:	6013      	str	r3, [r2, #0]
}
 8001de4:	bf00      	nop
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr
 8001dee:	bf00      	nop
 8001df0:	20000044 	.word	0x20000044
 8001df4:	20000108 	.word	0x20000108

08001df8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	af00      	add	r7, sp, #0
  return uwTick;  
 8001dfc:	4b03      	ldr	r3, [pc, #12]	; (8001e0c <HAL_GetTick+0x14>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr
 8001e0a:	bf00      	nop
 8001e0c:	20000108 	.word	0x20000108

08001e10 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b084      	sub	sp, #16
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e18:	f7ff ffee 	bl	8001df8 <HAL_GetTick>
 8001e1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e28:	d005      	beq.n	8001e36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e2a:	4b09      	ldr	r3, [pc, #36]	; (8001e50 <HAL_Delay+0x40>)
 8001e2c:	781b      	ldrb	r3, [r3, #0]
 8001e2e:	461a      	mov	r2, r3
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	4413      	add	r3, r2
 8001e34:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001e36:	bf00      	nop
 8001e38:	f7ff ffde 	bl	8001df8 <HAL_GetTick>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	1ad3      	subs	r3, r2, r3
 8001e42:	68fa      	ldr	r2, [r7, #12]
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d8f7      	bhi.n	8001e38 <HAL_Delay+0x28>
  {
  }
}
 8001e48:	bf00      	nop
 8001e4a:	3710      	adds	r7, #16
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	20000044 	.word	0x20000044

08001e54 <__NVIC_SetPriorityGrouping>:
{
 8001e54:	b480      	push	{r7}
 8001e56:	b085      	sub	sp, #20
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	f003 0307 	and.w	r3, r3, #7
 8001e62:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e64:	4b0c      	ldr	r3, [pc, #48]	; (8001e98 <__NVIC_SetPriorityGrouping+0x44>)
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e6a:	68ba      	ldr	r2, [r7, #8]
 8001e6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e70:	4013      	ands	r3, r2
 8001e72:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e86:	4a04      	ldr	r2, [pc, #16]	; (8001e98 <__NVIC_SetPriorityGrouping+0x44>)
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	60d3      	str	r3, [r2, #12]
}
 8001e8c:	bf00      	nop
 8001e8e:	3714      	adds	r7, #20
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr
 8001e98:	e000ed00 	.word	0xe000ed00

08001e9c <__NVIC_GetPriorityGrouping>:
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ea0:	4b04      	ldr	r3, [pc, #16]	; (8001eb4 <__NVIC_GetPriorityGrouping+0x18>)
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	0a1b      	lsrs	r3, r3, #8
 8001ea6:	f003 0307 	and.w	r3, r3, #7
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr
 8001eb4:	e000ed00 	.word	0xe000ed00

08001eb8 <__NVIC_EnableIRQ>:
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b083      	sub	sp, #12
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	db0b      	blt.n	8001ee2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001eca:	79fb      	ldrb	r3, [r7, #7]
 8001ecc:	f003 021f 	and.w	r2, r3, #31
 8001ed0:	4907      	ldr	r1, [pc, #28]	; (8001ef0 <__NVIC_EnableIRQ+0x38>)
 8001ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ed6:	095b      	lsrs	r3, r3, #5
 8001ed8:	2001      	movs	r0, #1
 8001eda:	fa00 f202 	lsl.w	r2, r0, r2
 8001ede:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001ee2:	bf00      	nop
 8001ee4:	370c      	adds	r7, #12
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr
 8001eee:	bf00      	nop
 8001ef0:	e000e100 	.word	0xe000e100

08001ef4 <__NVIC_SetPriority>:
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	4603      	mov	r3, r0
 8001efc:	6039      	str	r1, [r7, #0]
 8001efe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	db0a      	blt.n	8001f1e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	b2da      	uxtb	r2, r3
 8001f0c:	490c      	ldr	r1, [pc, #48]	; (8001f40 <__NVIC_SetPriority+0x4c>)
 8001f0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f12:	0112      	lsls	r2, r2, #4
 8001f14:	b2d2      	uxtb	r2, r2
 8001f16:	440b      	add	r3, r1
 8001f18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001f1c:	e00a      	b.n	8001f34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	b2da      	uxtb	r2, r3
 8001f22:	4908      	ldr	r1, [pc, #32]	; (8001f44 <__NVIC_SetPriority+0x50>)
 8001f24:	79fb      	ldrb	r3, [r7, #7]
 8001f26:	f003 030f 	and.w	r3, r3, #15
 8001f2a:	3b04      	subs	r3, #4
 8001f2c:	0112      	lsls	r2, r2, #4
 8001f2e:	b2d2      	uxtb	r2, r2
 8001f30:	440b      	add	r3, r1
 8001f32:	761a      	strb	r2, [r3, #24]
}
 8001f34:	bf00      	nop
 8001f36:	370c      	adds	r7, #12
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr
 8001f40:	e000e100 	.word	0xe000e100
 8001f44:	e000ed00 	.word	0xe000ed00

08001f48 <NVIC_EncodePriority>:
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b089      	sub	sp, #36	; 0x24
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	60f8      	str	r0, [r7, #12]
 8001f50:	60b9      	str	r1, [r7, #8]
 8001f52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	f003 0307 	and.w	r3, r3, #7
 8001f5a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	f1c3 0307 	rsb	r3, r3, #7
 8001f62:	2b04      	cmp	r3, #4
 8001f64:	bf28      	it	cs
 8001f66:	2304      	movcs	r3, #4
 8001f68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	3304      	adds	r3, #4
 8001f6e:	2b06      	cmp	r3, #6
 8001f70:	d902      	bls.n	8001f78 <NVIC_EncodePriority+0x30>
 8001f72:	69fb      	ldr	r3, [r7, #28]
 8001f74:	3b03      	subs	r3, #3
 8001f76:	e000      	b.n	8001f7a <NVIC_EncodePriority+0x32>
 8001f78:	2300      	movs	r3, #0
 8001f7a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f7c:	f04f 32ff 	mov.w	r2, #4294967295
 8001f80:	69bb      	ldr	r3, [r7, #24]
 8001f82:	fa02 f303 	lsl.w	r3, r2, r3
 8001f86:	43da      	mvns	r2, r3
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	401a      	ands	r2, r3
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f90:	f04f 31ff 	mov.w	r1, #4294967295
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	fa01 f303 	lsl.w	r3, r1, r3
 8001f9a:	43d9      	mvns	r1, r3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fa0:	4313      	orrs	r3, r2
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3724      	adds	r7, #36	; 0x24
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr
	...

08001fb0 <SysTick_Config>:
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	3b01      	subs	r3, #1
 8001fbc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fc0:	d301      	bcc.n	8001fc6 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e00f      	b.n	8001fe6 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fc6:	4a0a      	ldr	r2, [pc, #40]	; (8001ff0 <SysTick_Config+0x40>)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	3b01      	subs	r3, #1
 8001fcc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fce:	210f      	movs	r1, #15
 8001fd0:	f04f 30ff 	mov.w	r0, #4294967295
 8001fd4:	f7ff ff8e 	bl	8001ef4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fd8:	4b05      	ldr	r3, [pc, #20]	; (8001ff0 <SysTick_Config+0x40>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fde:	4b04      	ldr	r3, [pc, #16]	; (8001ff0 <SysTick_Config+0x40>)
 8001fe0:	2207      	movs	r2, #7
 8001fe2:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001fe4:	2300      	movs	r3, #0
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	3708      	adds	r7, #8
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	e000e010 	.word	0xe000e010

08001ff4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ffc:	6878      	ldr	r0, [r7, #4]
 8001ffe:	f7ff ff29 	bl	8001e54 <__NVIC_SetPriorityGrouping>
}
 8002002:	bf00      	nop
 8002004:	3708      	adds	r7, #8
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}

0800200a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800200a:	b580      	push	{r7, lr}
 800200c:	b086      	sub	sp, #24
 800200e:	af00      	add	r7, sp, #0
 8002010:	4603      	mov	r3, r0
 8002012:	60b9      	str	r1, [r7, #8]
 8002014:	607a      	str	r2, [r7, #4]
 8002016:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002018:	2300      	movs	r3, #0
 800201a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800201c:	f7ff ff3e 	bl	8001e9c <__NVIC_GetPriorityGrouping>
 8002020:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002022:	687a      	ldr	r2, [r7, #4]
 8002024:	68b9      	ldr	r1, [r7, #8]
 8002026:	6978      	ldr	r0, [r7, #20]
 8002028:	f7ff ff8e 	bl	8001f48 <NVIC_EncodePriority>
 800202c:	4602      	mov	r2, r0
 800202e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002032:	4611      	mov	r1, r2
 8002034:	4618      	mov	r0, r3
 8002036:	f7ff ff5d 	bl	8001ef4 <__NVIC_SetPriority>
}
 800203a:	bf00      	nop
 800203c:	3718      	adds	r7, #24
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}

08002042 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002042:	b580      	push	{r7, lr}
 8002044:	b082      	sub	sp, #8
 8002046:	af00      	add	r7, sp, #0
 8002048:	4603      	mov	r3, r0
 800204a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800204c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002050:	4618      	mov	r0, r3
 8002052:	f7ff ff31 	bl	8001eb8 <__NVIC_EnableIRQ>
}
 8002056:	bf00      	nop
 8002058:	3708      	adds	r7, #8
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}

0800205e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800205e:	b580      	push	{r7, lr}
 8002060:	b082      	sub	sp, #8
 8002062:	af00      	add	r7, sp, #0
 8002064:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f7ff ffa2 	bl	8001fb0 <SysTick_Config>
 800206c:	4603      	mov	r3, r0
}
 800206e:	4618      	mov	r0, r3
 8002070:	3708      	adds	r7, #8
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
	...

08002078 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002078:	b480      	push	{r7}
 800207a:	b087      	sub	sp, #28
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
 8002080:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002082:	2300      	movs	r3, #0
 8002084:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002086:	e14e      	b.n	8002326 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	2101      	movs	r1, #1
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	fa01 f303 	lsl.w	r3, r1, r3
 8002094:	4013      	ands	r3, r2
 8002096:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	2b00      	cmp	r3, #0
 800209c:	f000 8140 	beq.w	8002320 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	d00b      	beq.n	80020c0 <HAL_GPIO_Init+0x48>
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	2b02      	cmp	r3, #2
 80020ae:	d007      	beq.n	80020c0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80020b4:	2b11      	cmp	r3, #17
 80020b6:	d003      	beq.n	80020c0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	2b12      	cmp	r3, #18
 80020be:	d130      	bne.n	8002122 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	005b      	lsls	r3, r3, #1
 80020ca:	2203      	movs	r2, #3
 80020cc:	fa02 f303 	lsl.w	r3, r2, r3
 80020d0:	43db      	mvns	r3, r3
 80020d2:	693a      	ldr	r2, [r7, #16]
 80020d4:	4013      	ands	r3, r2
 80020d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	68da      	ldr	r2, [r3, #12]
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	005b      	lsls	r3, r3, #1
 80020e0:	fa02 f303 	lsl.w	r3, r2, r3
 80020e4:	693a      	ldr	r2, [r7, #16]
 80020e6:	4313      	orrs	r3, r2
 80020e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	693a      	ldr	r2, [r7, #16]
 80020ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020f6:	2201      	movs	r2, #1
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	fa02 f303 	lsl.w	r3, r2, r3
 80020fe:	43db      	mvns	r3, r3
 8002100:	693a      	ldr	r2, [r7, #16]
 8002102:	4013      	ands	r3, r2
 8002104:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	091b      	lsrs	r3, r3, #4
 800210c:	f003 0201 	and.w	r2, r3, #1
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	fa02 f303 	lsl.w	r3, r2, r3
 8002116:	693a      	ldr	r2, [r7, #16]
 8002118:	4313      	orrs	r3, r2
 800211a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	693a      	ldr	r2, [r7, #16]
 8002120:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	68db      	ldr	r3, [r3, #12]
 8002126:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	005b      	lsls	r3, r3, #1
 800212c:	2203      	movs	r2, #3
 800212e:	fa02 f303 	lsl.w	r3, r2, r3
 8002132:	43db      	mvns	r3, r3
 8002134:	693a      	ldr	r2, [r7, #16]
 8002136:	4013      	ands	r3, r2
 8002138:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	689a      	ldr	r2, [r3, #8]
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	005b      	lsls	r3, r3, #1
 8002142:	fa02 f303 	lsl.w	r3, r2, r3
 8002146:	693a      	ldr	r2, [r7, #16]
 8002148:	4313      	orrs	r3, r2
 800214a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	693a      	ldr	r2, [r7, #16]
 8002150:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	2b02      	cmp	r3, #2
 8002158:	d003      	beq.n	8002162 <HAL_GPIO_Init+0xea>
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	2b12      	cmp	r3, #18
 8002160:	d123      	bne.n	80021aa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	08da      	lsrs	r2, r3, #3
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	3208      	adds	r2, #8
 800216a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800216e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	f003 0307 	and.w	r3, r3, #7
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	220f      	movs	r2, #15
 800217a:	fa02 f303 	lsl.w	r3, r2, r3
 800217e:	43db      	mvns	r3, r3
 8002180:	693a      	ldr	r2, [r7, #16]
 8002182:	4013      	ands	r3, r2
 8002184:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	691a      	ldr	r2, [r3, #16]
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	f003 0307 	and.w	r3, r3, #7
 8002190:	009b      	lsls	r3, r3, #2
 8002192:	fa02 f303 	lsl.w	r3, r2, r3
 8002196:	693a      	ldr	r2, [r7, #16]
 8002198:	4313      	orrs	r3, r2
 800219a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	08da      	lsrs	r2, r3, #3
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	3208      	adds	r2, #8
 80021a4:	6939      	ldr	r1, [r7, #16]
 80021a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	005b      	lsls	r3, r3, #1
 80021b4:	2203      	movs	r2, #3
 80021b6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ba:	43db      	mvns	r3, r3
 80021bc:	693a      	ldr	r2, [r7, #16]
 80021be:	4013      	ands	r3, r2
 80021c0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	f003 0203 	and.w	r2, r3, #3
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	005b      	lsls	r3, r3, #1
 80021ce:	fa02 f303 	lsl.w	r3, r2, r3
 80021d2:	693a      	ldr	r2, [r7, #16]
 80021d4:	4313      	orrs	r3, r2
 80021d6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	693a      	ldr	r2, [r7, #16]
 80021dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	f000 809a 	beq.w	8002320 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021ec:	4b55      	ldr	r3, [pc, #340]	; (8002344 <HAL_GPIO_Init+0x2cc>)
 80021ee:	699b      	ldr	r3, [r3, #24]
 80021f0:	4a54      	ldr	r2, [pc, #336]	; (8002344 <HAL_GPIO_Init+0x2cc>)
 80021f2:	f043 0301 	orr.w	r3, r3, #1
 80021f6:	6193      	str	r3, [r2, #24]
 80021f8:	4b52      	ldr	r3, [pc, #328]	; (8002344 <HAL_GPIO_Init+0x2cc>)
 80021fa:	699b      	ldr	r3, [r3, #24]
 80021fc:	f003 0301 	and.w	r3, r3, #1
 8002200:	60bb      	str	r3, [r7, #8]
 8002202:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002204:	4a50      	ldr	r2, [pc, #320]	; (8002348 <HAL_GPIO_Init+0x2d0>)
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	089b      	lsrs	r3, r3, #2
 800220a:	3302      	adds	r3, #2
 800220c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002210:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	f003 0303 	and.w	r3, r3, #3
 8002218:	009b      	lsls	r3, r3, #2
 800221a:	220f      	movs	r2, #15
 800221c:	fa02 f303 	lsl.w	r3, r2, r3
 8002220:	43db      	mvns	r3, r3
 8002222:	693a      	ldr	r2, [r7, #16]
 8002224:	4013      	ands	r3, r2
 8002226:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800222e:	d013      	beq.n	8002258 <HAL_GPIO_Init+0x1e0>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	4a46      	ldr	r2, [pc, #280]	; (800234c <HAL_GPIO_Init+0x2d4>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d00d      	beq.n	8002254 <HAL_GPIO_Init+0x1dc>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	4a45      	ldr	r2, [pc, #276]	; (8002350 <HAL_GPIO_Init+0x2d8>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d007      	beq.n	8002250 <HAL_GPIO_Init+0x1d8>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	4a44      	ldr	r2, [pc, #272]	; (8002354 <HAL_GPIO_Init+0x2dc>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d101      	bne.n	800224c <HAL_GPIO_Init+0x1d4>
 8002248:	2303      	movs	r3, #3
 800224a:	e006      	b.n	800225a <HAL_GPIO_Init+0x1e2>
 800224c:	2305      	movs	r3, #5
 800224e:	e004      	b.n	800225a <HAL_GPIO_Init+0x1e2>
 8002250:	2302      	movs	r3, #2
 8002252:	e002      	b.n	800225a <HAL_GPIO_Init+0x1e2>
 8002254:	2301      	movs	r3, #1
 8002256:	e000      	b.n	800225a <HAL_GPIO_Init+0x1e2>
 8002258:	2300      	movs	r3, #0
 800225a:	697a      	ldr	r2, [r7, #20]
 800225c:	f002 0203 	and.w	r2, r2, #3
 8002260:	0092      	lsls	r2, r2, #2
 8002262:	4093      	lsls	r3, r2
 8002264:	693a      	ldr	r2, [r7, #16]
 8002266:	4313      	orrs	r3, r2
 8002268:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800226a:	4937      	ldr	r1, [pc, #220]	; (8002348 <HAL_GPIO_Init+0x2d0>)
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	089b      	lsrs	r3, r3, #2
 8002270:	3302      	adds	r3, #2
 8002272:	693a      	ldr	r2, [r7, #16]
 8002274:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002278:	4b37      	ldr	r3, [pc, #220]	; (8002358 <HAL_GPIO_Init+0x2e0>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	43db      	mvns	r3, r3
 8002282:	693a      	ldr	r2, [r7, #16]
 8002284:	4013      	ands	r3, r2
 8002286:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002290:	2b00      	cmp	r3, #0
 8002292:	d003      	beq.n	800229c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002294:	693a      	ldr	r2, [r7, #16]
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	4313      	orrs	r3, r2
 800229a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800229c:	4a2e      	ldr	r2, [pc, #184]	; (8002358 <HAL_GPIO_Init+0x2e0>)
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80022a2:	4b2d      	ldr	r3, [pc, #180]	; (8002358 <HAL_GPIO_Init+0x2e0>)
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	43db      	mvns	r3, r3
 80022ac:	693a      	ldr	r2, [r7, #16]
 80022ae:	4013      	ands	r3, r2
 80022b0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d003      	beq.n	80022c6 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80022be:	693a      	ldr	r2, [r7, #16]
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	4313      	orrs	r3, r2
 80022c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80022c6:	4a24      	ldr	r2, [pc, #144]	; (8002358 <HAL_GPIO_Init+0x2e0>)
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022cc:	4b22      	ldr	r3, [pc, #136]	; (8002358 <HAL_GPIO_Init+0x2e0>)
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	43db      	mvns	r3, r3
 80022d6:	693a      	ldr	r2, [r7, #16]
 80022d8:	4013      	ands	r3, r2
 80022da:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d003      	beq.n	80022f0 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80022e8:	693a      	ldr	r2, [r7, #16]
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	4313      	orrs	r3, r2
 80022ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80022f0:	4a19      	ldr	r2, [pc, #100]	; (8002358 <HAL_GPIO_Init+0x2e0>)
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022f6:	4b18      	ldr	r3, [pc, #96]	; (8002358 <HAL_GPIO_Init+0x2e0>)
 80022f8:	68db      	ldr	r3, [r3, #12]
 80022fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	43db      	mvns	r3, r3
 8002300:	693a      	ldr	r2, [r7, #16]
 8002302:	4013      	ands	r3, r2
 8002304:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800230e:	2b00      	cmp	r3, #0
 8002310:	d003      	beq.n	800231a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8002312:	693a      	ldr	r2, [r7, #16]
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	4313      	orrs	r3, r2
 8002318:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800231a:	4a0f      	ldr	r2, [pc, #60]	; (8002358 <HAL_GPIO_Init+0x2e0>)
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	3301      	adds	r3, #1
 8002324:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	fa22 f303 	lsr.w	r3, r2, r3
 8002330:	2b00      	cmp	r3, #0
 8002332:	f47f aea9 	bne.w	8002088 <HAL_GPIO_Init+0x10>
  }
}
 8002336:	bf00      	nop
 8002338:	371c      	adds	r7, #28
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr
 8002342:	bf00      	nop
 8002344:	40021000 	.word	0x40021000
 8002348:	40010000 	.word	0x40010000
 800234c:	48000400 	.word	0x48000400
 8002350:	48000800 	.word	0x48000800
 8002354:	48000c00 	.word	0x48000c00
 8002358:	40010400 	.word	0x40010400

0800235c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800235c:	b480      	push	{r7}
 800235e:	b085      	sub	sp, #20
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
 8002364:	460b      	mov	r3, r1
 8002366:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	691a      	ldr	r2, [r3, #16]
 800236c:	887b      	ldrh	r3, [r7, #2]
 800236e:	4013      	ands	r3, r2
 8002370:	2b00      	cmp	r3, #0
 8002372:	d002      	beq.n	800237a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002374:	2301      	movs	r3, #1
 8002376:	73fb      	strb	r3, [r7, #15]
 8002378:	e001      	b.n	800237e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800237a:	2300      	movs	r3, #0
 800237c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800237e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002380:	4618      	mov	r0, r3
 8002382:	3714      	adds	r7, #20
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr

0800238c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b082      	sub	sp, #8
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d101      	bne.n	800239e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e081      	b.n	80024a2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d106      	bne.n	80023b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2200      	movs	r2, #0
 80023ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	f7ff fbfa 	bl	8001bac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2224      	movs	r2, #36	; 0x24
 80023bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f022 0201 	bic.w	r2, r2, #1
 80023ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	685a      	ldr	r2, [r3, #4]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80023dc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	689a      	ldr	r2, [r3, #8]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80023ec:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	68db      	ldr	r3, [r3, #12]
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	d107      	bne.n	8002406 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	689a      	ldr	r2, [r3, #8]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002402:	609a      	str	r2, [r3, #8]
 8002404:	e006      	b.n	8002414 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	689a      	ldr	r2, [r3, #8]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002412:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	68db      	ldr	r3, [r3, #12]
 8002418:	2b02      	cmp	r3, #2
 800241a:	d104      	bne.n	8002426 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002424:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	687a      	ldr	r2, [r7, #4]
 800242e:	6812      	ldr	r2, [r2, #0]
 8002430:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002434:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002438:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	68da      	ldr	r2, [r3, #12]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002448:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	691a      	ldr	r2, [r3, #16]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	695b      	ldr	r3, [r3, #20]
 8002452:	ea42 0103 	orr.w	r1, r2, r3
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	699b      	ldr	r3, [r3, #24]
 800245a:	021a      	lsls	r2, r3, #8
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	430a      	orrs	r2, r1
 8002462:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	69d9      	ldr	r1, [r3, #28]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6a1a      	ldr	r2, [r3, #32]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	430a      	orrs	r2, r1
 8002472:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f042 0201 	orr.w	r2, r2, #1
 8002482:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2200      	movs	r2, #0
 8002488:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2220      	movs	r2, #32
 800248e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2200      	movs	r2, #0
 8002496:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2200      	movs	r2, #0
 800249c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80024a0:	2300      	movs	r3, #0
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	3708      	adds	r7, #8
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}
	...

080024ac <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b088      	sub	sp, #32
 80024b0:	af02      	add	r7, sp, #8
 80024b2:	60f8      	str	r0, [r7, #12]
 80024b4:	4608      	mov	r0, r1
 80024b6:	4611      	mov	r1, r2
 80024b8:	461a      	mov	r2, r3
 80024ba:	4603      	mov	r3, r0
 80024bc:	817b      	strh	r3, [r7, #10]
 80024be:	460b      	mov	r3, r1
 80024c0:	813b      	strh	r3, [r7, #8]
 80024c2:	4613      	mov	r3, r2
 80024c4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	2b20      	cmp	r3, #32
 80024d0:	f040 80f9 	bne.w	80026c6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80024d4:	6a3b      	ldr	r3, [r7, #32]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d002      	beq.n	80024e0 <HAL_I2C_Mem_Write+0x34>
 80024da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d105      	bne.n	80024ec <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024e6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	e0ed      	b.n	80026c8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d101      	bne.n	80024fa <HAL_I2C_Mem_Write+0x4e>
 80024f6:	2302      	movs	r3, #2
 80024f8:	e0e6      	b.n	80026c8 <HAL_I2C_Mem_Write+0x21c>
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	2201      	movs	r2, #1
 80024fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002502:	f7ff fc79 	bl	8001df8 <HAL_GetTick>
 8002506:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	9300      	str	r3, [sp, #0]
 800250c:	2319      	movs	r3, #25
 800250e:	2201      	movs	r2, #1
 8002510:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002514:	68f8      	ldr	r0, [r7, #12]
 8002516:	f000 f96f 	bl	80027f8 <I2C_WaitOnFlagUntilTimeout>
 800251a:	4603      	mov	r3, r0
 800251c:	2b00      	cmp	r3, #0
 800251e:	d001      	beq.n	8002524 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	e0d1      	b.n	80026c8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2221      	movs	r2, #33	; 0x21
 8002528:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	2240      	movs	r2, #64	; 0x40
 8002530:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2200      	movs	r2, #0
 8002538:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	6a3a      	ldr	r2, [r7, #32]
 800253e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002544:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	2200      	movs	r2, #0
 800254a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800254c:	88f8      	ldrh	r0, [r7, #6]
 800254e:	893a      	ldrh	r2, [r7, #8]
 8002550:	8979      	ldrh	r1, [r7, #10]
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	9301      	str	r3, [sp, #4]
 8002556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002558:	9300      	str	r3, [sp, #0]
 800255a:	4603      	mov	r3, r0
 800255c:	68f8      	ldr	r0, [r7, #12]
 800255e:	f000 f8d3 	bl	8002708 <I2C_RequestMemoryWrite>
 8002562:	4603      	mov	r3, r0
 8002564:	2b00      	cmp	r3, #0
 8002566:	d005      	beq.n	8002574 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	2200      	movs	r2, #0
 800256c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	e0a9      	b.n	80026c8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002578:	b29b      	uxth	r3, r3
 800257a:	2bff      	cmp	r3, #255	; 0xff
 800257c:	d90e      	bls.n	800259c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	22ff      	movs	r2, #255	; 0xff
 8002582:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002588:	b2da      	uxtb	r2, r3
 800258a:	8979      	ldrh	r1, [r7, #10]
 800258c:	2300      	movs	r3, #0
 800258e:	9300      	str	r3, [sp, #0]
 8002590:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002594:	68f8      	ldr	r0, [r7, #12]
 8002596:	f000 fa51 	bl	8002a3c <I2C_TransferConfig>
 800259a:	e00f      	b.n	80025bc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025a0:	b29a      	uxth	r2, r3
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025aa:	b2da      	uxtb	r2, r3
 80025ac:	8979      	ldrh	r1, [r7, #10]
 80025ae:	2300      	movs	r3, #0
 80025b0:	9300      	str	r3, [sp, #0]
 80025b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80025b6:	68f8      	ldr	r0, [r7, #12]
 80025b8:	f000 fa40 	bl	8002a3c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025bc:	697a      	ldr	r2, [r7, #20]
 80025be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80025c0:	68f8      	ldr	r0, [r7, #12]
 80025c2:	f000 f959 	bl	8002878 <I2C_WaitOnTXISFlagUntilTimeout>
 80025c6:	4603      	mov	r3, r0
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d001      	beq.n	80025d0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80025cc:	2301      	movs	r3, #1
 80025ce:	e07b      	b.n	80026c8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d4:	781a      	ldrb	r2, [r3, #0]
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e0:	1c5a      	adds	r2, r3, #1
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025ea:	b29b      	uxth	r3, r3
 80025ec:	3b01      	subs	r3, #1
 80025ee:	b29a      	uxth	r2, r3
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025f8:	3b01      	subs	r3, #1
 80025fa:	b29a      	uxth	r2, r3
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002604:	b29b      	uxth	r3, r3
 8002606:	2b00      	cmp	r3, #0
 8002608:	d034      	beq.n	8002674 <HAL_I2C_Mem_Write+0x1c8>
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800260e:	2b00      	cmp	r3, #0
 8002610:	d130      	bne.n	8002674 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	9300      	str	r3, [sp, #0]
 8002616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002618:	2200      	movs	r2, #0
 800261a:	2180      	movs	r1, #128	; 0x80
 800261c:	68f8      	ldr	r0, [r7, #12]
 800261e:	f000 f8eb 	bl	80027f8 <I2C_WaitOnFlagUntilTimeout>
 8002622:	4603      	mov	r3, r0
 8002624:	2b00      	cmp	r3, #0
 8002626:	d001      	beq.n	800262c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	e04d      	b.n	80026c8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002630:	b29b      	uxth	r3, r3
 8002632:	2bff      	cmp	r3, #255	; 0xff
 8002634:	d90e      	bls.n	8002654 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	22ff      	movs	r2, #255	; 0xff
 800263a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002640:	b2da      	uxtb	r2, r3
 8002642:	8979      	ldrh	r1, [r7, #10]
 8002644:	2300      	movs	r3, #0
 8002646:	9300      	str	r3, [sp, #0]
 8002648:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800264c:	68f8      	ldr	r0, [r7, #12]
 800264e:	f000 f9f5 	bl	8002a3c <I2C_TransferConfig>
 8002652:	e00f      	b.n	8002674 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002658:	b29a      	uxth	r2, r3
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002662:	b2da      	uxtb	r2, r3
 8002664:	8979      	ldrh	r1, [r7, #10]
 8002666:	2300      	movs	r3, #0
 8002668:	9300      	str	r3, [sp, #0]
 800266a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800266e:	68f8      	ldr	r0, [r7, #12]
 8002670:	f000 f9e4 	bl	8002a3c <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002678:	b29b      	uxth	r3, r3
 800267a:	2b00      	cmp	r3, #0
 800267c:	d19e      	bne.n	80025bc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800267e:	697a      	ldr	r2, [r7, #20]
 8002680:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002682:	68f8      	ldr	r0, [r7, #12]
 8002684:	f000 f938 	bl	80028f8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002688:	4603      	mov	r3, r0
 800268a:	2b00      	cmp	r3, #0
 800268c:	d001      	beq.n	8002692 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e01a      	b.n	80026c8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	2220      	movs	r2, #32
 8002698:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	6859      	ldr	r1, [r3, #4]
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	4b0a      	ldr	r3, [pc, #40]	; (80026d0 <HAL_I2C_Mem_Write+0x224>)
 80026a6:	400b      	ands	r3, r1
 80026a8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	2220      	movs	r2, #32
 80026ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	2200      	movs	r2, #0
 80026b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	2200      	movs	r2, #0
 80026be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80026c2:	2300      	movs	r3, #0
 80026c4:	e000      	b.n	80026c8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80026c6:	2302      	movs	r3, #2
  }
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	3718      	adds	r7, #24
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}
 80026d0:	fe00e800 	.word	0xfe00e800

080026d4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b084      	sub	sp, #16
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	699b      	ldr	r3, [r3, #24]
 80026e2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d005      	beq.n	8002700 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026f8:	68ba      	ldr	r2, [r7, #8]
 80026fa:	68f9      	ldr	r1, [r7, #12]
 80026fc:	6878      	ldr	r0, [r7, #4]
 80026fe:	4798      	blx	r3
  }
}
 8002700:	bf00      	nop
 8002702:	3710      	adds	r7, #16
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}

08002708 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b086      	sub	sp, #24
 800270c:	af02      	add	r7, sp, #8
 800270e:	60f8      	str	r0, [r7, #12]
 8002710:	4608      	mov	r0, r1
 8002712:	4611      	mov	r1, r2
 8002714:	461a      	mov	r2, r3
 8002716:	4603      	mov	r3, r0
 8002718:	817b      	strh	r3, [r7, #10]
 800271a:	460b      	mov	r3, r1
 800271c:	813b      	strh	r3, [r7, #8]
 800271e:	4613      	mov	r3, r2
 8002720:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002722:	88fb      	ldrh	r3, [r7, #6]
 8002724:	b2da      	uxtb	r2, r3
 8002726:	8979      	ldrh	r1, [r7, #10]
 8002728:	4b20      	ldr	r3, [pc, #128]	; (80027ac <I2C_RequestMemoryWrite+0xa4>)
 800272a:	9300      	str	r3, [sp, #0]
 800272c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002730:	68f8      	ldr	r0, [r7, #12]
 8002732:	f000 f983 	bl	8002a3c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002736:	69fa      	ldr	r2, [r7, #28]
 8002738:	69b9      	ldr	r1, [r7, #24]
 800273a:	68f8      	ldr	r0, [r7, #12]
 800273c:	f000 f89c 	bl	8002878 <I2C_WaitOnTXISFlagUntilTimeout>
 8002740:	4603      	mov	r3, r0
 8002742:	2b00      	cmp	r3, #0
 8002744:	d001      	beq.n	800274a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e02c      	b.n	80027a4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800274a:	88fb      	ldrh	r3, [r7, #6]
 800274c:	2b01      	cmp	r3, #1
 800274e:	d105      	bne.n	800275c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002750:	893b      	ldrh	r3, [r7, #8]
 8002752:	b2da      	uxtb	r2, r3
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	629a      	str	r2, [r3, #40]	; 0x28
 800275a:	e015      	b.n	8002788 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800275c:	893b      	ldrh	r3, [r7, #8]
 800275e:	0a1b      	lsrs	r3, r3, #8
 8002760:	b29b      	uxth	r3, r3
 8002762:	b2da      	uxtb	r2, r3
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800276a:	69fa      	ldr	r2, [r7, #28]
 800276c:	69b9      	ldr	r1, [r7, #24]
 800276e:	68f8      	ldr	r0, [r7, #12]
 8002770:	f000 f882 	bl	8002878 <I2C_WaitOnTXISFlagUntilTimeout>
 8002774:	4603      	mov	r3, r0
 8002776:	2b00      	cmp	r3, #0
 8002778:	d001      	beq.n	800277e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e012      	b.n	80027a4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800277e:	893b      	ldrh	r3, [r7, #8]
 8002780:	b2da      	uxtb	r2, r3
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002788:	69fb      	ldr	r3, [r7, #28]
 800278a:	9300      	str	r3, [sp, #0]
 800278c:	69bb      	ldr	r3, [r7, #24]
 800278e:	2200      	movs	r2, #0
 8002790:	2180      	movs	r1, #128	; 0x80
 8002792:	68f8      	ldr	r0, [r7, #12]
 8002794:	f000 f830 	bl	80027f8 <I2C_WaitOnFlagUntilTimeout>
 8002798:	4603      	mov	r3, r0
 800279a:	2b00      	cmp	r3, #0
 800279c:	d001      	beq.n	80027a2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e000      	b.n	80027a4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80027a2:	2300      	movs	r3, #0
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	3710      	adds	r7, #16
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	80002000 	.word	0x80002000

080027b0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b083      	sub	sp, #12
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	699b      	ldr	r3, [r3, #24]
 80027be:	f003 0302 	and.w	r3, r3, #2
 80027c2:	2b02      	cmp	r3, #2
 80027c4:	d103      	bne.n	80027ce <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	2200      	movs	r2, #0
 80027cc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	699b      	ldr	r3, [r3, #24]
 80027d4:	f003 0301 	and.w	r3, r3, #1
 80027d8:	2b01      	cmp	r3, #1
 80027da:	d007      	beq.n	80027ec <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	699a      	ldr	r2, [r3, #24]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f042 0201 	orr.w	r2, r2, #1
 80027ea:	619a      	str	r2, [r3, #24]
  }
}
 80027ec:	bf00      	nop
 80027ee:	370c      	adds	r7, #12
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr

080027f8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b084      	sub	sp, #16
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	60f8      	str	r0, [r7, #12]
 8002800:	60b9      	str	r1, [r7, #8]
 8002802:	603b      	str	r3, [r7, #0]
 8002804:	4613      	mov	r3, r2
 8002806:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002808:	e022      	b.n	8002850 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002810:	d01e      	beq.n	8002850 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002812:	f7ff faf1 	bl	8001df8 <HAL_GetTick>
 8002816:	4602      	mov	r2, r0
 8002818:	69bb      	ldr	r3, [r7, #24]
 800281a:	1ad3      	subs	r3, r2, r3
 800281c:	683a      	ldr	r2, [r7, #0]
 800281e:	429a      	cmp	r2, r3
 8002820:	d302      	bcc.n	8002828 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d113      	bne.n	8002850 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800282c:	f043 0220 	orr.w	r2, r3, #32
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	2220      	movs	r2, #32
 8002838:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	2200      	movs	r2, #0
 8002840:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	2200      	movs	r2, #0
 8002848:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	e00f      	b.n	8002870 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	699a      	ldr	r2, [r3, #24]
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	4013      	ands	r3, r2
 800285a:	68ba      	ldr	r2, [r7, #8]
 800285c:	429a      	cmp	r2, r3
 800285e:	bf0c      	ite	eq
 8002860:	2301      	moveq	r3, #1
 8002862:	2300      	movne	r3, #0
 8002864:	b2db      	uxtb	r3, r3
 8002866:	461a      	mov	r2, r3
 8002868:	79fb      	ldrb	r3, [r7, #7]
 800286a:	429a      	cmp	r2, r3
 800286c:	d0cd      	beq.n	800280a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800286e:	2300      	movs	r3, #0
}
 8002870:	4618      	mov	r0, r3
 8002872:	3710      	adds	r7, #16
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}

08002878 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b084      	sub	sp, #16
 800287c:	af00      	add	r7, sp, #0
 800287e:	60f8      	str	r0, [r7, #12]
 8002880:	60b9      	str	r1, [r7, #8]
 8002882:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002884:	e02c      	b.n	80028e0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002886:	687a      	ldr	r2, [r7, #4]
 8002888:	68b9      	ldr	r1, [r7, #8]
 800288a:	68f8      	ldr	r0, [r7, #12]
 800288c:	f000 f870 	bl	8002970 <I2C_IsAcknowledgeFailed>
 8002890:	4603      	mov	r3, r0
 8002892:	2b00      	cmp	r3, #0
 8002894:	d001      	beq.n	800289a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e02a      	b.n	80028f0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028a0:	d01e      	beq.n	80028e0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028a2:	f7ff faa9 	bl	8001df8 <HAL_GetTick>
 80028a6:	4602      	mov	r2, r0
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	1ad3      	subs	r3, r2, r3
 80028ac:	68ba      	ldr	r2, [r7, #8]
 80028ae:	429a      	cmp	r2, r3
 80028b0:	d302      	bcc.n	80028b8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d113      	bne.n	80028e0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028bc:	f043 0220 	orr.w	r2, r3, #32
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2220      	movs	r2, #32
 80028c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	2200      	movs	r2, #0
 80028d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	2200      	movs	r2, #0
 80028d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80028dc:	2301      	movs	r3, #1
 80028de:	e007      	b.n	80028f0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	699b      	ldr	r3, [r3, #24]
 80028e6:	f003 0302 	and.w	r3, r3, #2
 80028ea:	2b02      	cmp	r3, #2
 80028ec:	d1cb      	bne.n	8002886 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80028ee:	2300      	movs	r3, #0
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3710      	adds	r7, #16
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}

080028f8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b084      	sub	sp, #16
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	60f8      	str	r0, [r7, #12]
 8002900:	60b9      	str	r1, [r7, #8]
 8002902:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002904:	e028      	b.n	8002958 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002906:	687a      	ldr	r2, [r7, #4]
 8002908:	68b9      	ldr	r1, [r7, #8]
 800290a:	68f8      	ldr	r0, [r7, #12]
 800290c:	f000 f830 	bl	8002970 <I2C_IsAcknowledgeFailed>
 8002910:	4603      	mov	r3, r0
 8002912:	2b00      	cmp	r3, #0
 8002914:	d001      	beq.n	800291a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	e026      	b.n	8002968 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800291a:	f7ff fa6d 	bl	8001df8 <HAL_GetTick>
 800291e:	4602      	mov	r2, r0
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	1ad3      	subs	r3, r2, r3
 8002924:	68ba      	ldr	r2, [r7, #8]
 8002926:	429a      	cmp	r2, r3
 8002928:	d302      	bcc.n	8002930 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d113      	bne.n	8002958 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002934:	f043 0220 	orr.w	r2, r3, #32
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	2220      	movs	r2, #32
 8002940:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	2200      	movs	r2, #0
 8002948:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2200      	movs	r2, #0
 8002950:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	e007      	b.n	8002968 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	699b      	ldr	r3, [r3, #24]
 800295e:	f003 0320 	and.w	r3, r3, #32
 8002962:	2b20      	cmp	r3, #32
 8002964:	d1cf      	bne.n	8002906 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002966:	2300      	movs	r3, #0
}
 8002968:	4618      	mov	r0, r3
 800296a:	3710      	adds	r7, #16
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}

08002970 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b084      	sub	sp, #16
 8002974:	af00      	add	r7, sp, #0
 8002976:	60f8      	str	r0, [r7, #12]
 8002978:	60b9      	str	r1, [r7, #8]
 800297a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	699b      	ldr	r3, [r3, #24]
 8002982:	f003 0310 	and.w	r3, r3, #16
 8002986:	2b10      	cmp	r3, #16
 8002988:	d151      	bne.n	8002a2e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800298a:	e022      	b.n	80029d2 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002992:	d01e      	beq.n	80029d2 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002994:	f7ff fa30 	bl	8001df8 <HAL_GetTick>
 8002998:	4602      	mov	r2, r0
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	68ba      	ldr	r2, [r7, #8]
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d302      	bcc.n	80029aa <I2C_IsAcknowledgeFailed+0x3a>
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d113      	bne.n	80029d2 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ae:	f043 0220 	orr.w	r2, r3, #32
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	2220      	movs	r2, #32
 80029ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	2200      	movs	r2, #0
 80029c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	2200      	movs	r2, #0
 80029ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e02e      	b.n	8002a30 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	699b      	ldr	r3, [r3, #24]
 80029d8:	f003 0320 	and.w	r3, r3, #32
 80029dc:	2b20      	cmp	r3, #32
 80029de:	d1d5      	bne.n	800298c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	2210      	movs	r2, #16
 80029e6:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	2220      	movs	r2, #32
 80029ee:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80029f0:	68f8      	ldr	r0, [r7, #12]
 80029f2:	f7ff fedd 	bl	80027b0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	6859      	ldr	r1, [r3, #4]
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	4b0d      	ldr	r3, [pc, #52]	; (8002a38 <I2C_IsAcknowledgeFailed+0xc8>)
 8002a02:	400b      	ands	r3, r1
 8002a04:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a0a:	f043 0204 	orr.w	r2, r3, #4
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2220      	movs	r2, #32
 8002a16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	2200      	movs	r2, #0
 8002a26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e000      	b.n	8002a30 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8002a2e:	2300      	movs	r3, #0
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	3710      	adds	r7, #16
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}
 8002a38:	fe00e800 	.word	0xfe00e800

08002a3c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b085      	sub	sp, #20
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	60f8      	str	r0, [r7, #12]
 8002a44:	607b      	str	r3, [r7, #4]
 8002a46:	460b      	mov	r3, r1
 8002a48:	817b      	strh	r3, [r7, #10]
 8002a4a:	4613      	mov	r3, r2
 8002a4c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	685a      	ldr	r2, [r3, #4]
 8002a54:	69bb      	ldr	r3, [r7, #24]
 8002a56:	0d5b      	lsrs	r3, r3, #21
 8002a58:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002a5c:	4b0d      	ldr	r3, [pc, #52]	; (8002a94 <I2C_TransferConfig+0x58>)
 8002a5e:	430b      	orrs	r3, r1
 8002a60:	43db      	mvns	r3, r3
 8002a62:	ea02 0103 	and.w	r1, r2, r3
 8002a66:	897b      	ldrh	r3, [r7, #10]
 8002a68:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002a6c:	7a7b      	ldrb	r3, [r7, #9]
 8002a6e:	041b      	lsls	r3, r3, #16
 8002a70:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002a74:	431a      	orrs	r2, r3
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	431a      	orrs	r2, r3
 8002a7a:	69bb      	ldr	r3, [r7, #24]
 8002a7c:	431a      	orrs	r2, r3
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	430a      	orrs	r2, r1
 8002a84:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8002a86:	bf00      	nop
 8002a88:	3714      	adds	r7, #20
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr
 8002a92:	bf00      	nop
 8002a94:	03ff63ff 	.word	0x03ff63ff

08002a98 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b083      	sub	sp, #12
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
 8002aa0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	2b20      	cmp	r3, #32
 8002aac:	d138      	bne.n	8002b20 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d101      	bne.n	8002abc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002ab8:	2302      	movs	r3, #2
 8002aba:	e032      	b.n	8002b22 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2201      	movs	r2, #1
 8002ac0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2224      	movs	r2, #36	; 0x24
 8002ac8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f022 0201 	bic.w	r2, r2, #1
 8002ada:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002aea:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	6819      	ldr	r1, [r3, #0]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	683a      	ldr	r2, [r7, #0]
 8002af8:	430a      	orrs	r2, r1
 8002afa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f042 0201 	orr.w	r2, r2, #1
 8002b0a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2220      	movs	r2, #32
 8002b10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2200      	movs	r2, #0
 8002b18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	e000      	b.n	8002b22 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002b20:	2302      	movs	r3, #2
  }
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	370c      	adds	r7, #12
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr

08002b2e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002b2e:	b480      	push	{r7}
 8002b30:	b085      	sub	sp, #20
 8002b32:	af00      	add	r7, sp, #0
 8002b34:	6078      	str	r0, [r7, #4]
 8002b36:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b3e:	b2db      	uxtb	r3, r3
 8002b40:	2b20      	cmp	r3, #32
 8002b42:	d139      	bne.n	8002bb8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	d101      	bne.n	8002b52 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002b4e:	2302      	movs	r3, #2
 8002b50:	e033      	b.n	8002bba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2201      	movs	r2, #1
 8002b56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2224      	movs	r2, #36	; 0x24
 8002b5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f022 0201 	bic.w	r2, r2, #1
 8002b70:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002b80:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	021b      	lsls	r3, r3, #8
 8002b86:	68fa      	ldr	r2, [r7, #12]
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	68fa      	ldr	r2, [r7, #12]
 8002b92:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f042 0201 	orr.w	r2, r2, #1
 8002ba2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2220      	movs	r2, #32
 8002ba8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	e000      	b.n	8002bba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002bb8:	2302      	movs	r3, #2
  }
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3714      	adds	r7, #20
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr
	...

08002bc8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	1d3b      	adds	r3, r7, #4
 8002bd2:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002bd4:	1d3b      	adds	r3, r7, #4
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d102      	bne.n	8002be2 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	f000 bef4 	b.w	80039ca <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002be2:	1d3b      	adds	r3, r7, #4
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f003 0301 	and.w	r3, r3, #1
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	f000 816a 	beq.w	8002ec6 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002bf2:	4bb3      	ldr	r3, [pc, #716]	; (8002ec0 <HAL_RCC_OscConfig+0x2f8>)
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	f003 030c 	and.w	r3, r3, #12
 8002bfa:	2b04      	cmp	r3, #4
 8002bfc:	d00c      	beq.n	8002c18 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002bfe:	4bb0      	ldr	r3, [pc, #704]	; (8002ec0 <HAL_RCC_OscConfig+0x2f8>)
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	f003 030c 	and.w	r3, r3, #12
 8002c06:	2b08      	cmp	r3, #8
 8002c08:	d159      	bne.n	8002cbe <HAL_RCC_OscConfig+0xf6>
 8002c0a:	4bad      	ldr	r3, [pc, #692]	; (8002ec0 <HAL_RCC_OscConfig+0x2f8>)
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c16:	d152      	bne.n	8002cbe <HAL_RCC_OscConfig+0xf6>
 8002c18:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c1c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c20:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002c24:	fa93 f3a3 	rbit	r3, r3
 8002c28:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002c2c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c30:	fab3 f383 	clz	r3, r3
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	095b      	lsrs	r3, r3, #5
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	f043 0301 	orr.w	r3, r3, #1
 8002c3e:	b2db      	uxtb	r3, r3
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d102      	bne.n	8002c4a <HAL_RCC_OscConfig+0x82>
 8002c44:	4b9e      	ldr	r3, [pc, #632]	; (8002ec0 <HAL_RCC_OscConfig+0x2f8>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	e015      	b.n	8002c76 <HAL_RCC_OscConfig+0xae>
 8002c4a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c4e:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c52:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002c56:	fa93 f3a3 	rbit	r3, r3
 8002c5a:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002c5e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c62:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002c66:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002c6a:	fa93 f3a3 	rbit	r3, r3
 8002c6e:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002c72:	4b93      	ldr	r3, [pc, #588]	; (8002ec0 <HAL_RCC_OscConfig+0x2f8>)
 8002c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c76:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002c7a:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002c7e:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002c82:	fa92 f2a2 	rbit	r2, r2
 8002c86:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002c8a:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002c8e:	fab2 f282 	clz	r2, r2
 8002c92:	b2d2      	uxtb	r2, r2
 8002c94:	f042 0220 	orr.w	r2, r2, #32
 8002c98:	b2d2      	uxtb	r2, r2
 8002c9a:	f002 021f 	and.w	r2, r2, #31
 8002c9e:	2101      	movs	r1, #1
 8002ca0:	fa01 f202 	lsl.w	r2, r1, r2
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	f000 810c 	beq.w	8002ec4 <HAL_RCC_OscConfig+0x2fc>
 8002cac:	1d3b      	adds	r3, r7, #4
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	f040 8106 	bne.w	8002ec4 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	f000 be86 	b.w	80039ca <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cbe:	1d3b      	adds	r3, r7, #4
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cc8:	d106      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x110>
 8002cca:	4b7d      	ldr	r3, [pc, #500]	; (8002ec0 <HAL_RCC_OscConfig+0x2f8>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a7c      	ldr	r2, [pc, #496]	; (8002ec0 <HAL_RCC_OscConfig+0x2f8>)
 8002cd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cd4:	6013      	str	r3, [r2, #0]
 8002cd6:	e030      	b.n	8002d3a <HAL_RCC_OscConfig+0x172>
 8002cd8:	1d3b      	adds	r3, r7, #4
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d10c      	bne.n	8002cfc <HAL_RCC_OscConfig+0x134>
 8002ce2:	4b77      	ldr	r3, [pc, #476]	; (8002ec0 <HAL_RCC_OscConfig+0x2f8>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a76      	ldr	r2, [pc, #472]	; (8002ec0 <HAL_RCC_OscConfig+0x2f8>)
 8002ce8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cec:	6013      	str	r3, [r2, #0]
 8002cee:	4b74      	ldr	r3, [pc, #464]	; (8002ec0 <HAL_RCC_OscConfig+0x2f8>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a73      	ldr	r2, [pc, #460]	; (8002ec0 <HAL_RCC_OscConfig+0x2f8>)
 8002cf4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cf8:	6013      	str	r3, [r2, #0]
 8002cfa:	e01e      	b.n	8002d3a <HAL_RCC_OscConfig+0x172>
 8002cfc:	1d3b      	adds	r3, r7, #4
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d06:	d10c      	bne.n	8002d22 <HAL_RCC_OscConfig+0x15a>
 8002d08:	4b6d      	ldr	r3, [pc, #436]	; (8002ec0 <HAL_RCC_OscConfig+0x2f8>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a6c      	ldr	r2, [pc, #432]	; (8002ec0 <HAL_RCC_OscConfig+0x2f8>)
 8002d0e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d12:	6013      	str	r3, [r2, #0]
 8002d14:	4b6a      	ldr	r3, [pc, #424]	; (8002ec0 <HAL_RCC_OscConfig+0x2f8>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a69      	ldr	r2, [pc, #420]	; (8002ec0 <HAL_RCC_OscConfig+0x2f8>)
 8002d1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d1e:	6013      	str	r3, [r2, #0]
 8002d20:	e00b      	b.n	8002d3a <HAL_RCC_OscConfig+0x172>
 8002d22:	4b67      	ldr	r3, [pc, #412]	; (8002ec0 <HAL_RCC_OscConfig+0x2f8>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a66      	ldr	r2, [pc, #408]	; (8002ec0 <HAL_RCC_OscConfig+0x2f8>)
 8002d28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d2c:	6013      	str	r3, [r2, #0]
 8002d2e:	4b64      	ldr	r3, [pc, #400]	; (8002ec0 <HAL_RCC_OscConfig+0x2f8>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a63      	ldr	r2, [pc, #396]	; (8002ec0 <HAL_RCC_OscConfig+0x2f8>)
 8002d34:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d38:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002d3a:	4b61      	ldr	r3, [pc, #388]	; (8002ec0 <HAL_RCC_OscConfig+0x2f8>)
 8002d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d3e:	f023 020f 	bic.w	r2, r3, #15
 8002d42:	1d3b      	adds	r3, r7, #4
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	495d      	ldr	r1, [pc, #372]	; (8002ec0 <HAL_RCC_OscConfig+0x2f8>)
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d4e:	1d3b      	adds	r3, r7, #4
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d059      	beq.n	8002e0c <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d58:	f7ff f84e 	bl	8001df8 <HAL_GetTick>
 8002d5c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d60:	e00a      	b.n	8002d78 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d62:	f7ff f849 	bl	8001df8 <HAL_GetTick>
 8002d66:	4602      	mov	r2, r0
 8002d68:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d6c:	1ad3      	subs	r3, r2, r3
 8002d6e:	2b64      	cmp	r3, #100	; 0x64
 8002d70:	d902      	bls.n	8002d78 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8002d72:	2303      	movs	r3, #3
 8002d74:	f000 be29 	b.w	80039ca <HAL_RCC_OscConfig+0xe02>
 8002d78:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d7c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d80:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002d84:	fa93 f3a3 	rbit	r3, r3
 8002d88:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002d8c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d90:	fab3 f383 	clz	r3, r3
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	095b      	lsrs	r3, r3, #5
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	f043 0301 	orr.w	r3, r3, #1
 8002d9e:	b2db      	uxtb	r3, r3
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	d102      	bne.n	8002daa <HAL_RCC_OscConfig+0x1e2>
 8002da4:	4b46      	ldr	r3, [pc, #280]	; (8002ec0 <HAL_RCC_OscConfig+0x2f8>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	e015      	b.n	8002dd6 <HAL_RCC_OscConfig+0x20e>
 8002daa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002dae:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002db2:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002db6:	fa93 f3a3 	rbit	r3, r3
 8002dba:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002dbe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002dc2:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002dc6:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002dca:	fa93 f3a3 	rbit	r3, r3
 8002dce:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002dd2:	4b3b      	ldr	r3, [pc, #236]	; (8002ec0 <HAL_RCC_OscConfig+0x2f8>)
 8002dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002dda:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002dde:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002de2:	fa92 f2a2 	rbit	r2, r2
 8002de6:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002dea:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002dee:	fab2 f282 	clz	r2, r2
 8002df2:	b2d2      	uxtb	r2, r2
 8002df4:	f042 0220 	orr.w	r2, r2, #32
 8002df8:	b2d2      	uxtb	r2, r2
 8002dfa:	f002 021f 	and.w	r2, r2, #31
 8002dfe:	2101      	movs	r1, #1
 8002e00:	fa01 f202 	lsl.w	r2, r1, r2
 8002e04:	4013      	ands	r3, r2
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d0ab      	beq.n	8002d62 <HAL_RCC_OscConfig+0x19a>
 8002e0a:	e05c      	b.n	8002ec6 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e0c:	f7fe fff4 	bl	8001df8 <HAL_GetTick>
 8002e10:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e14:	e00a      	b.n	8002e2c <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e16:	f7fe ffef 	bl	8001df8 <HAL_GetTick>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e20:	1ad3      	subs	r3, r2, r3
 8002e22:	2b64      	cmp	r3, #100	; 0x64
 8002e24:	d902      	bls.n	8002e2c <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8002e26:	2303      	movs	r3, #3
 8002e28:	f000 bdcf 	b.w	80039ca <HAL_RCC_OscConfig+0xe02>
 8002e2c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e30:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e34:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002e38:	fa93 f3a3 	rbit	r3, r3
 8002e3c:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002e40:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e44:	fab3 f383 	clz	r3, r3
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	095b      	lsrs	r3, r3, #5
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	f043 0301 	orr.w	r3, r3, #1
 8002e52:	b2db      	uxtb	r3, r3
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d102      	bne.n	8002e5e <HAL_RCC_OscConfig+0x296>
 8002e58:	4b19      	ldr	r3, [pc, #100]	; (8002ec0 <HAL_RCC_OscConfig+0x2f8>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	e015      	b.n	8002e8a <HAL_RCC_OscConfig+0x2c2>
 8002e5e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e62:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e66:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002e6a:	fa93 f3a3 	rbit	r3, r3
 8002e6e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002e72:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e76:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002e7a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002e7e:	fa93 f3a3 	rbit	r3, r3
 8002e82:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002e86:	4b0e      	ldr	r3, [pc, #56]	; (8002ec0 <HAL_RCC_OscConfig+0x2f8>)
 8002e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e8a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002e8e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002e92:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002e96:	fa92 f2a2 	rbit	r2, r2
 8002e9a:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002e9e:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002ea2:	fab2 f282 	clz	r2, r2
 8002ea6:	b2d2      	uxtb	r2, r2
 8002ea8:	f042 0220 	orr.w	r2, r2, #32
 8002eac:	b2d2      	uxtb	r2, r2
 8002eae:	f002 021f 	and.w	r2, r2, #31
 8002eb2:	2101      	movs	r1, #1
 8002eb4:	fa01 f202 	lsl.w	r2, r1, r2
 8002eb8:	4013      	ands	r3, r2
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d1ab      	bne.n	8002e16 <HAL_RCC_OscConfig+0x24e>
 8002ebe:	e002      	b.n	8002ec6 <HAL_RCC_OscConfig+0x2fe>
 8002ec0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ec4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ec6:	1d3b      	adds	r3, r7, #4
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 0302 	and.w	r3, r3, #2
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	f000 816f 	beq.w	80031b4 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002ed6:	4bd0      	ldr	r3, [pc, #832]	; (8003218 <HAL_RCC_OscConfig+0x650>)
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	f003 030c 	and.w	r3, r3, #12
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d00b      	beq.n	8002efa <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002ee2:	4bcd      	ldr	r3, [pc, #820]	; (8003218 <HAL_RCC_OscConfig+0x650>)
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	f003 030c 	and.w	r3, r3, #12
 8002eea:	2b08      	cmp	r3, #8
 8002eec:	d16c      	bne.n	8002fc8 <HAL_RCC_OscConfig+0x400>
 8002eee:	4bca      	ldr	r3, [pc, #808]	; (8003218 <HAL_RCC_OscConfig+0x650>)
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d166      	bne.n	8002fc8 <HAL_RCC_OscConfig+0x400>
 8002efa:	2302      	movs	r3, #2
 8002efc:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f00:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002f04:	fa93 f3a3 	rbit	r3, r3
 8002f08:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002f0c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f10:	fab3 f383 	clz	r3, r3
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	095b      	lsrs	r3, r3, #5
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	f043 0301 	orr.w	r3, r3, #1
 8002f1e:	b2db      	uxtb	r3, r3
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	d102      	bne.n	8002f2a <HAL_RCC_OscConfig+0x362>
 8002f24:	4bbc      	ldr	r3, [pc, #752]	; (8003218 <HAL_RCC_OscConfig+0x650>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	e013      	b.n	8002f52 <HAL_RCC_OscConfig+0x38a>
 8002f2a:	2302      	movs	r3, #2
 8002f2c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f30:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002f34:	fa93 f3a3 	rbit	r3, r3
 8002f38:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002f3c:	2302      	movs	r3, #2
 8002f3e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002f42:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002f46:	fa93 f3a3 	rbit	r3, r3
 8002f4a:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002f4e:	4bb2      	ldr	r3, [pc, #712]	; (8003218 <HAL_RCC_OscConfig+0x650>)
 8002f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f52:	2202      	movs	r2, #2
 8002f54:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002f58:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002f5c:	fa92 f2a2 	rbit	r2, r2
 8002f60:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002f64:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002f68:	fab2 f282 	clz	r2, r2
 8002f6c:	b2d2      	uxtb	r2, r2
 8002f6e:	f042 0220 	orr.w	r2, r2, #32
 8002f72:	b2d2      	uxtb	r2, r2
 8002f74:	f002 021f 	and.w	r2, r2, #31
 8002f78:	2101      	movs	r1, #1
 8002f7a:	fa01 f202 	lsl.w	r2, r1, r2
 8002f7e:	4013      	ands	r3, r2
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d007      	beq.n	8002f94 <HAL_RCC_OscConfig+0x3cc>
 8002f84:	1d3b      	adds	r3, r7, #4
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	691b      	ldr	r3, [r3, #16]
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d002      	beq.n	8002f94 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	f000 bd1b 	b.w	80039ca <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f94:	4ba0      	ldr	r3, [pc, #640]	; (8003218 <HAL_RCC_OscConfig+0x650>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f9c:	1d3b      	adds	r3, r7, #4
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	695b      	ldr	r3, [r3, #20]
 8002fa2:	21f8      	movs	r1, #248	; 0xf8
 8002fa4:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fa8:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002fac:	fa91 f1a1 	rbit	r1, r1
 8002fb0:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002fb4:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002fb8:	fab1 f181 	clz	r1, r1
 8002fbc:	b2c9      	uxtb	r1, r1
 8002fbe:	408b      	lsls	r3, r1
 8002fc0:	4995      	ldr	r1, [pc, #596]	; (8003218 <HAL_RCC_OscConfig+0x650>)
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fc6:	e0f5      	b.n	80031b4 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002fc8:	1d3b      	adds	r3, r7, #4
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	691b      	ldr	r3, [r3, #16]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	f000 8085 	beq.w	80030de <HAL_RCC_OscConfig+0x516>
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fda:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002fde:	fa93 f3a3 	rbit	r3, r3
 8002fe2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002fe6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fea:	fab3 f383 	clz	r3, r3
 8002fee:	b2db      	uxtb	r3, r3
 8002ff0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002ff4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002ff8:	009b      	lsls	r3, r3, #2
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003000:	f7fe fefa 	bl	8001df8 <HAL_GetTick>
 8003004:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003008:	e00a      	b.n	8003020 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800300a:	f7fe fef5 	bl	8001df8 <HAL_GetTick>
 800300e:	4602      	mov	r2, r0
 8003010:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	2b02      	cmp	r3, #2
 8003018:	d902      	bls.n	8003020 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 800301a:	2303      	movs	r3, #3
 800301c:	f000 bcd5 	b.w	80039ca <HAL_RCC_OscConfig+0xe02>
 8003020:	2302      	movs	r3, #2
 8003022:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003026:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800302a:	fa93 f3a3 	rbit	r3, r3
 800302e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8003032:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003036:	fab3 f383 	clz	r3, r3
 800303a:	b2db      	uxtb	r3, r3
 800303c:	095b      	lsrs	r3, r3, #5
 800303e:	b2db      	uxtb	r3, r3
 8003040:	f043 0301 	orr.w	r3, r3, #1
 8003044:	b2db      	uxtb	r3, r3
 8003046:	2b01      	cmp	r3, #1
 8003048:	d102      	bne.n	8003050 <HAL_RCC_OscConfig+0x488>
 800304a:	4b73      	ldr	r3, [pc, #460]	; (8003218 <HAL_RCC_OscConfig+0x650>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	e013      	b.n	8003078 <HAL_RCC_OscConfig+0x4b0>
 8003050:	2302      	movs	r3, #2
 8003052:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003056:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800305a:	fa93 f3a3 	rbit	r3, r3
 800305e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003062:	2302      	movs	r3, #2
 8003064:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003068:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800306c:	fa93 f3a3 	rbit	r3, r3
 8003070:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8003074:	4b68      	ldr	r3, [pc, #416]	; (8003218 <HAL_RCC_OscConfig+0x650>)
 8003076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003078:	2202      	movs	r2, #2
 800307a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800307e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003082:	fa92 f2a2 	rbit	r2, r2
 8003086:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800308a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800308e:	fab2 f282 	clz	r2, r2
 8003092:	b2d2      	uxtb	r2, r2
 8003094:	f042 0220 	orr.w	r2, r2, #32
 8003098:	b2d2      	uxtb	r2, r2
 800309a:	f002 021f 	and.w	r2, r2, #31
 800309e:	2101      	movs	r1, #1
 80030a0:	fa01 f202 	lsl.w	r2, r1, r2
 80030a4:	4013      	ands	r3, r2
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d0af      	beq.n	800300a <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030aa:	4b5b      	ldr	r3, [pc, #364]	; (8003218 <HAL_RCC_OscConfig+0x650>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030b2:	1d3b      	adds	r3, r7, #4
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	695b      	ldr	r3, [r3, #20]
 80030b8:	21f8      	movs	r1, #248	; 0xf8
 80030ba:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030be:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80030c2:	fa91 f1a1 	rbit	r1, r1
 80030c6:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80030ca:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80030ce:	fab1 f181 	clz	r1, r1
 80030d2:	b2c9      	uxtb	r1, r1
 80030d4:	408b      	lsls	r3, r1
 80030d6:	4950      	ldr	r1, [pc, #320]	; (8003218 <HAL_RCC_OscConfig+0x650>)
 80030d8:	4313      	orrs	r3, r2
 80030da:	600b      	str	r3, [r1, #0]
 80030dc:	e06a      	b.n	80031b4 <HAL_RCC_OscConfig+0x5ec>
 80030de:	2301      	movs	r3, #1
 80030e0:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030e4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80030e8:	fa93 f3a3 	rbit	r3, r3
 80030ec:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80030f0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030f4:	fab3 f383 	clz	r3, r3
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80030fe:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	461a      	mov	r2, r3
 8003106:	2300      	movs	r3, #0
 8003108:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800310a:	f7fe fe75 	bl	8001df8 <HAL_GetTick>
 800310e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003112:	e00a      	b.n	800312a <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003114:	f7fe fe70 	bl	8001df8 <HAL_GetTick>
 8003118:	4602      	mov	r2, r0
 800311a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800311e:	1ad3      	subs	r3, r2, r3
 8003120:	2b02      	cmp	r3, #2
 8003122:	d902      	bls.n	800312a <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8003124:	2303      	movs	r3, #3
 8003126:	f000 bc50 	b.w	80039ca <HAL_RCC_OscConfig+0xe02>
 800312a:	2302      	movs	r3, #2
 800312c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003130:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003134:	fa93 f3a3 	rbit	r3, r3
 8003138:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800313c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003140:	fab3 f383 	clz	r3, r3
 8003144:	b2db      	uxtb	r3, r3
 8003146:	095b      	lsrs	r3, r3, #5
 8003148:	b2db      	uxtb	r3, r3
 800314a:	f043 0301 	orr.w	r3, r3, #1
 800314e:	b2db      	uxtb	r3, r3
 8003150:	2b01      	cmp	r3, #1
 8003152:	d102      	bne.n	800315a <HAL_RCC_OscConfig+0x592>
 8003154:	4b30      	ldr	r3, [pc, #192]	; (8003218 <HAL_RCC_OscConfig+0x650>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	e013      	b.n	8003182 <HAL_RCC_OscConfig+0x5ba>
 800315a:	2302      	movs	r3, #2
 800315c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003160:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003164:	fa93 f3a3 	rbit	r3, r3
 8003168:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800316c:	2302      	movs	r3, #2
 800316e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003172:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003176:	fa93 f3a3 	rbit	r3, r3
 800317a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800317e:	4b26      	ldr	r3, [pc, #152]	; (8003218 <HAL_RCC_OscConfig+0x650>)
 8003180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003182:	2202      	movs	r2, #2
 8003184:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8003188:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800318c:	fa92 f2a2 	rbit	r2, r2
 8003190:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8003194:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8003198:	fab2 f282 	clz	r2, r2
 800319c:	b2d2      	uxtb	r2, r2
 800319e:	f042 0220 	orr.w	r2, r2, #32
 80031a2:	b2d2      	uxtb	r2, r2
 80031a4:	f002 021f 	and.w	r2, r2, #31
 80031a8:	2101      	movs	r1, #1
 80031aa:	fa01 f202 	lsl.w	r2, r1, r2
 80031ae:	4013      	ands	r3, r2
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d1af      	bne.n	8003114 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031b4:	1d3b      	adds	r3, r7, #4
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f003 0308 	and.w	r3, r3, #8
 80031be:	2b00      	cmp	r3, #0
 80031c0:	f000 80da 	beq.w	8003378 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80031c4:	1d3b      	adds	r3, r7, #4
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	699b      	ldr	r3, [r3, #24]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d069      	beq.n	80032a2 <HAL_RCC_OscConfig+0x6da>
 80031ce:	2301      	movs	r3, #1
 80031d0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031d4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80031d8:	fa93 f3a3 	rbit	r3, r3
 80031dc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80031e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031e4:	fab3 f383 	clz	r3, r3
 80031e8:	b2db      	uxtb	r3, r3
 80031ea:	461a      	mov	r2, r3
 80031ec:	4b0b      	ldr	r3, [pc, #44]	; (800321c <HAL_RCC_OscConfig+0x654>)
 80031ee:	4413      	add	r3, r2
 80031f0:	009b      	lsls	r3, r3, #2
 80031f2:	461a      	mov	r2, r3
 80031f4:	2301      	movs	r3, #1
 80031f6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031f8:	f7fe fdfe 	bl	8001df8 <HAL_GetTick>
 80031fc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003200:	e00e      	b.n	8003220 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003202:	f7fe fdf9 	bl	8001df8 <HAL_GetTick>
 8003206:	4602      	mov	r2, r0
 8003208:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800320c:	1ad3      	subs	r3, r2, r3
 800320e:	2b02      	cmp	r3, #2
 8003210:	d906      	bls.n	8003220 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8003212:	2303      	movs	r3, #3
 8003214:	e3d9      	b.n	80039ca <HAL_RCC_OscConfig+0xe02>
 8003216:	bf00      	nop
 8003218:	40021000 	.word	0x40021000
 800321c:	10908120 	.word	0x10908120
 8003220:	2302      	movs	r3, #2
 8003222:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003226:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800322a:	fa93 f3a3 	rbit	r3, r3
 800322e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003232:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003236:	2202      	movs	r2, #2
 8003238:	601a      	str	r2, [r3, #0]
 800323a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	fa93 f2a3 	rbit	r2, r3
 8003244:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8003248:	601a      	str	r2, [r3, #0]
 800324a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800324e:	2202      	movs	r2, #2
 8003250:	601a      	str	r2, [r3, #0]
 8003252:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	fa93 f2a3 	rbit	r2, r3
 800325c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8003260:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003262:	4ba5      	ldr	r3, [pc, #660]	; (80034f8 <HAL_RCC_OscConfig+0x930>)
 8003264:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003266:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800326a:	2102      	movs	r1, #2
 800326c:	6019      	str	r1, [r3, #0]
 800326e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	fa93 f1a3 	rbit	r1, r3
 8003278:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800327c:	6019      	str	r1, [r3, #0]
  return result;
 800327e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	fab3 f383 	clz	r3, r3
 8003288:	b2db      	uxtb	r3, r3
 800328a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800328e:	b2db      	uxtb	r3, r3
 8003290:	f003 031f 	and.w	r3, r3, #31
 8003294:	2101      	movs	r1, #1
 8003296:	fa01 f303 	lsl.w	r3, r1, r3
 800329a:	4013      	ands	r3, r2
 800329c:	2b00      	cmp	r3, #0
 800329e:	d0b0      	beq.n	8003202 <HAL_RCC_OscConfig+0x63a>
 80032a0:	e06a      	b.n	8003378 <HAL_RCC_OscConfig+0x7b0>
 80032a2:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80032a6:	2201      	movs	r2, #1
 80032a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032aa:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	fa93 f2a3 	rbit	r2, r3
 80032b4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80032b8:	601a      	str	r2, [r3, #0]
  return result;
 80032ba:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80032be:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032c0:	fab3 f383 	clz	r3, r3
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	461a      	mov	r2, r3
 80032c8:	4b8c      	ldr	r3, [pc, #560]	; (80034fc <HAL_RCC_OscConfig+0x934>)
 80032ca:	4413      	add	r3, r2
 80032cc:	009b      	lsls	r3, r3, #2
 80032ce:	461a      	mov	r2, r3
 80032d0:	2300      	movs	r3, #0
 80032d2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032d4:	f7fe fd90 	bl	8001df8 <HAL_GetTick>
 80032d8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032dc:	e009      	b.n	80032f2 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032de:	f7fe fd8b 	bl	8001df8 <HAL_GetTick>
 80032e2:	4602      	mov	r2, r0
 80032e4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80032e8:	1ad3      	subs	r3, r2, r3
 80032ea:	2b02      	cmp	r3, #2
 80032ec:	d901      	bls.n	80032f2 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 80032ee:	2303      	movs	r3, #3
 80032f0:	e36b      	b.n	80039ca <HAL_RCC_OscConfig+0xe02>
 80032f2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80032f6:	2202      	movs	r2, #2
 80032f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032fa:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	fa93 f2a3 	rbit	r2, r3
 8003304:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003308:	601a      	str	r2, [r3, #0]
 800330a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800330e:	2202      	movs	r2, #2
 8003310:	601a      	str	r2, [r3, #0]
 8003312:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	fa93 f2a3 	rbit	r2, r3
 800331c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003320:	601a      	str	r2, [r3, #0]
 8003322:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003326:	2202      	movs	r2, #2
 8003328:	601a      	str	r2, [r3, #0]
 800332a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	fa93 f2a3 	rbit	r2, r3
 8003334:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003338:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800333a:	4b6f      	ldr	r3, [pc, #444]	; (80034f8 <HAL_RCC_OscConfig+0x930>)
 800333c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800333e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003342:	2102      	movs	r1, #2
 8003344:	6019      	str	r1, [r3, #0]
 8003346:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	fa93 f1a3 	rbit	r1, r3
 8003350:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003354:	6019      	str	r1, [r3, #0]
  return result;
 8003356:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	fab3 f383 	clz	r3, r3
 8003360:	b2db      	uxtb	r3, r3
 8003362:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003366:	b2db      	uxtb	r3, r3
 8003368:	f003 031f 	and.w	r3, r3, #31
 800336c:	2101      	movs	r1, #1
 800336e:	fa01 f303 	lsl.w	r3, r1, r3
 8003372:	4013      	ands	r3, r2
 8003374:	2b00      	cmp	r3, #0
 8003376:	d1b2      	bne.n	80032de <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003378:	1d3b      	adds	r3, r7, #4
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 0304 	and.w	r3, r3, #4
 8003382:	2b00      	cmp	r3, #0
 8003384:	f000 8158 	beq.w	8003638 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003388:	2300      	movs	r3, #0
 800338a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800338e:	4b5a      	ldr	r3, [pc, #360]	; (80034f8 <HAL_RCC_OscConfig+0x930>)
 8003390:	69db      	ldr	r3, [r3, #28]
 8003392:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003396:	2b00      	cmp	r3, #0
 8003398:	d112      	bne.n	80033c0 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800339a:	4b57      	ldr	r3, [pc, #348]	; (80034f8 <HAL_RCC_OscConfig+0x930>)
 800339c:	69db      	ldr	r3, [r3, #28]
 800339e:	4a56      	ldr	r2, [pc, #344]	; (80034f8 <HAL_RCC_OscConfig+0x930>)
 80033a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033a4:	61d3      	str	r3, [r2, #28]
 80033a6:	4b54      	ldr	r3, [pc, #336]	; (80034f8 <HAL_RCC_OscConfig+0x930>)
 80033a8:	69db      	ldr	r3, [r3, #28]
 80033aa:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80033ae:	f107 0308 	add.w	r3, r7, #8
 80033b2:	601a      	str	r2, [r3, #0]
 80033b4:	f107 0308 	add.w	r3, r7, #8
 80033b8:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80033ba:	2301      	movs	r3, #1
 80033bc:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033c0:	4b4f      	ldr	r3, [pc, #316]	; (8003500 <HAL_RCC_OscConfig+0x938>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d11a      	bne.n	8003402 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033cc:	4b4c      	ldr	r3, [pc, #304]	; (8003500 <HAL_RCC_OscConfig+0x938>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a4b      	ldr	r2, [pc, #300]	; (8003500 <HAL_RCC_OscConfig+0x938>)
 80033d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033d6:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033d8:	f7fe fd0e 	bl	8001df8 <HAL_GetTick>
 80033dc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033e0:	e009      	b.n	80033f6 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033e2:	f7fe fd09 	bl	8001df8 <HAL_GetTick>
 80033e6:	4602      	mov	r2, r0
 80033e8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80033ec:	1ad3      	subs	r3, r2, r3
 80033ee:	2b64      	cmp	r3, #100	; 0x64
 80033f0:	d901      	bls.n	80033f6 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 80033f2:	2303      	movs	r3, #3
 80033f4:	e2e9      	b.n	80039ca <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033f6:	4b42      	ldr	r3, [pc, #264]	; (8003500 <HAL_RCC_OscConfig+0x938>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d0ef      	beq.n	80033e2 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003402:	1d3b      	adds	r3, r7, #4
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	68db      	ldr	r3, [r3, #12]
 8003408:	2b01      	cmp	r3, #1
 800340a:	d106      	bne.n	800341a <HAL_RCC_OscConfig+0x852>
 800340c:	4b3a      	ldr	r3, [pc, #232]	; (80034f8 <HAL_RCC_OscConfig+0x930>)
 800340e:	6a1b      	ldr	r3, [r3, #32]
 8003410:	4a39      	ldr	r2, [pc, #228]	; (80034f8 <HAL_RCC_OscConfig+0x930>)
 8003412:	f043 0301 	orr.w	r3, r3, #1
 8003416:	6213      	str	r3, [r2, #32]
 8003418:	e02f      	b.n	800347a <HAL_RCC_OscConfig+0x8b2>
 800341a:	1d3b      	adds	r3, r7, #4
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	68db      	ldr	r3, [r3, #12]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d10c      	bne.n	800343e <HAL_RCC_OscConfig+0x876>
 8003424:	4b34      	ldr	r3, [pc, #208]	; (80034f8 <HAL_RCC_OscConfig+0x930>)
 8003426:	6a1b      	ldr	r3, [r3, #32]
 8003428:	4a33      	ldr	r2, [pc, #204]	; (80034f8 <HAL_RCC_OscConfig+0x930>)
 800342a:	f023 0301 	bic.w	r3, r3, #1
 800342e:	6213      	str	r3, [r2, #32]
 8003430:	4b31      	ldr	r3, [pc, #196]	; (80034f8 <HAL_RCC_OscConfig+0x930>)
 8003432:	6a1b      	ldr	r3, [r3, #32]
 8003434:	4a30      	ldr	r2, [pc, #192]	; (80034f8 <HAL_RCC_OscConfig+0x930>)
 8003436:	f023 0304 	bic.w	r3, r3, #4
 800343a:	6213      	str	r3, [r2, #32]
 800343c:	e01d      	b.n	800347a <HAL_RCC_OscConfig+0x8b2>
 800343e:	1d3b      	adds	r3, r7, #4
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	68db      	ldr	r3, [r3, #12]
 8003444:	2b05      	cmp	r3, #5
 8003446:	d10c      	bne.n	8003462 <HAL_RCC_OscConfig+0x89a>
 8003448:	4b2b      	ldr	r3, [pc, #172]	; (80034f8 <HAL_RCC_OscConfig+0x930>)
 800344a:	6a1b      	ldr	r3, [r3, #32]
 800344c:	4a2a      	ldr	r2, [pc, #168]	; (80034f8 <HAL_RCC_OscConfig+0x930>)
 800344e:	f043 0304 	orr.w	r3, r3, #4
 8003452:	6213      	str	r3, [r2, #32]
 8003454:	4b28      	ldr	r3, [pc, #160]	; (80034f8 <HAL_RCC_OscConfig+0x930>)
 8003456:	6a1b      	ldr	r3, [r3, #32]
 8003458:	4a27      	ldr	r2, [pc, #156]	; (80034f8 <HAL_RCC_OscConfig+0x930>)
 800345a:	f043 0301 	orr.w	r3, r3, #1
 800345e:	6213      	str	r3, [r2, #32]
 8003460:	e00b      	b.n	800347a <HAL_RCC_OscConfig+0x8b2>
 8003462:	4b25      	ldr	r3, [pc, #148]	; (80034f8 <HAL_RCC_OscConfig+0x930>)
 8003464:	6a1b      	ldr	r3, [r3, #32]
 8003466:	4a24      	ldr	r2, [pc, #144]	; (80034f8 <HAL_RCC_OscConfig+0x930>)
 8003468:	f023 0301 	bic.w	r3, r3, #1
 800346c:	6213      	str	r3, [r2, #32]
 800346e:	4b22      	ldr	r3, [pc, #136]	; (80034f8 <HAL_RCC_OscConfig+0x930>)
 8003470:	6a1b      	ldr	r3, [r3, #32]
 8003472:	4a21      	ldr	r2, [pc, #132]	; (80034f8 <HAL_RCC_OscConfig+0x930>)
 8003474:	f023 0304 	bic.w	r3, r3, #4
 8003478:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800347a:	1d3b      	adds	r3, r7, #4
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	68db      	ldr	r3, [r3, #12]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d06b      	beq.n	800355c <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003484:	f7fe fcb8 	bl	8001df8 <HAL_GetTick>
 8003488:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800348c:	e00b      	b.n	80034a6 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800348e:	f7fe fcb3 	bl	8001df8 <HAL_GetTick>
 8003492:	4602      	mov	r2, r0
 8003494:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003498:	1ad3      	subs	r3, r2, r3
 800349a:	f241 3288 	movw	r2, #5000	; 0x1388
 800349e:	4293      	cmp	r3, r2
 80034a0:	d901      	bls.n	80034a6 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 80034a2:	2303      	movs	r3, #3
 80034a4:	e291      	b.n	80039ca <HAL_RCC_OscConfig+0xe02>
 80034a6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80034aa:	2202      	movs	r2, #2
 80034ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ae:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	fa93 f2a3 	rbit	r2, r3
 80034b8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80034bc:	601a      	str	r2, [r3, #0]
 80034be:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80034c2:	2202      	movs	r2, #2
 80034c4:	601a      	str	r2, [r3, #0]
 80034c6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	fa93 f2a3 	rbit	r2, r3
 80034d0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80034d4:	601a      	str	r2, [r3, #0]
  return result;
 80034d6:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80034da:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034dc:	fab3 f383 	clz	r3, r3
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	095b      	lsrs	r3, r3, #5
 80034e4:	b2db      	uxtb	r3, r3
 80034e6:	f043 0302 	orr.w	r3, r3, #2
 80034ea:	b2db      	uxtb	r3, r3
 80034ec:	2b02      	cmp	r3, #2
 80034ee:	d109      	bne.n	8003504 <HAL_RCC_OscConfig+0x93c>
 80034f0:	4b01      	ldr	r3, [pc, #4]	; (80034f8 <HAL_RCC_OscConfig+0x930>)
 80034f2:	6a1b      	ldr	r3, [r3, #32]
 80034f4:	e014      	b.n	8003520 <HAL_RCC_OscConfig+0x958>
 80034f6:	bf00      	nop
 80034f8:	40021000 	.word	0x40021000
 80034fc:	10908120 	.word	0x10908120
 8003500:	40007000 	.word	0x40007000
 8003504:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003508:	2202      	movs	r2, #2
 800350a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800350c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	fa93 f2a3 	rbit	r2, r3
 8003516:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800351a:	601a      	str	r2, [r3, #0]
 800351c:	4bbb      	ldr	r3, [pc, #748]	; (800380c <HAL_RCC_OscConfig+0xc44>)
 800351e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003520:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003524:	2102      	movs	r1, #2
 8003526:	6011      	str	r1, [r2, #0]
 8003528:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800352c:	6812      	ldr	r2, [r2, #0]
 800352e:	fa92 f1a2 	rbit	r1, r2
 8003532:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8003536:	6011      	str	r1, [r2, #0]
  return result;
 8003538:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800353c:	6812      	ldr	r2, [r2, #0]
 800353e:	fab2 f282 	clz	r2, r2
 8003542:	b2d2      	uxtb	r2, r2
 8003544:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003548:	b2d2      	uxtb	r2, r2
 800354a:	f002 021f 	and.w	r2, r2, #31
 800354e:	2101      	movs	r1, #1
 8003550:	fa01 f202 	lsl.w	r2, r1, r2
 8003554:	4013      	ands	r3, r2
 8003556:	2b00      	cmp	r3, #0
 8003558:	d099      	beq.n	800348e <HAL_RCC_OscConfig+0x8c6>
 800355a:	e063      	b.n	8003624 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800355c:	f7fe fc4c 	bl	8001df8 <HAL_GetTick>
 8003560:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003564:	e00b      	b.n	800357e <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003566:	f7fe fc47 	bl	8001df8 <HAL_GetTick>
 800356a:	4602      	mov	r2, r0
 800356c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003570:	1ad3      	subs	r3, r2, r3
 8003572:	f241 3288 	movw	r2, #5000	; 0x1388
 8003576:	4293      	cmp	r3, r2
 8003578:	d901      	bls.n	800357e <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 800357a:	2303      	movs	r3, #3
 800357c:	e225      	b.n	80039ca <HAL_RCC_OscConfig+0xe02>
 800357e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003582:	2202      	movs	r2, #2
 8003584:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003586:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	fa93 f2a3 	rbit	r2, r3
 8003590:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003594:	601a      	str	r2, [r3, #0]
 8003596:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800359a:	2202      	movs	r2, #2
 800359c:	601a      	str	r2, [r3, #0]
 800359e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	fa93 f2a3 	rbit	r2, r3
 80035a8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80035ac:	601a      	str	r2, [r3, #0]
  return result;
 80035ae:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80035b2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035b4:	fab3 f383 	clz	r3, r3
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	095b      	lsrs	r3, r3, #5
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	f043 0302 	orr.w	r3, r3, #2
 80035c2:	b2db      	uxtb	r3, r3
 80035c4:	2b02      	cmp	r3, #2
 80035c6:	d102      	bne.n	80035ce <HAL_RCC_OscConfig+0xa06>
 80035c8:	4b90      	ldr	r3, [pc, #576]	; (800380c <HAL_RCC_OscConfig+0xc44>)
 80035ca:	6a1b      	ldr	r3, [r3, #32]
 80035cc:	e00d      	b.n	80035ea <HAL_RCC_OscConfig+0xa22>
 80035ce:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80035d2:	2202      	movs	r2, #2
 80035d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035d6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	fa93 f2a3 	rbit	r2, r3
 80035e0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80035e4:	601a      	str	r2, [r3, #0]
 80035e6:	4b89      	ldr	r3, [pc, #548]	; (800380c <HAL_RCC_OscConfig+0xc44>)
 80035e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ea:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80035ee:	2102      	movs	r1, #2
 80035f0:	6011      	str	r1, [r2, #0]
 80035f2:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80035f6:	6812      	ldr	r2, [r2, #0]
 80035f8:	fa92 f1a2 	rbit	r1, r2
 80035fc:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8003600:	6011      	str	r1, [r2, #0]
  return result;
 8003602:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8003606:	6812      	ldr	r2, [r2, #0]
 8003608:	fab2 f282 	clz	r2, r2
 800360c:	b2d2      	uxtb	r2, r2
 800360e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003612:	b2d2      	uxtb	r2, r2
 8003614:	f002 021f 	and.w	r2, r2, #31
 8003618:	2101      	movs	r1, #1
 800361a:	fa01 f202 	lsl.w	r2, r1, r2
 800361e:	4013      	ands	r3, r2
 8003620:	2b00      	cmp	r3, #0
 8003622:	d1a0      	bne.n	8003566 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003624:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003628:	2b01      	cmp	r3, #1
 800362a:	d105      	bne.n	8003638 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800362c:	4b77      	ldr	r3, [pc, #476]	; (800380c <HAL_RCC_OscConfig+0xc44>)
 800362e:	69db      	ldr	r3, [r3, #28]
 8003630:	4a76      	ldr	r2, [pc, #472]	; (800380c <HAL_RCC_OscConfig+0xc44>)
 8003632:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003636:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003638:	1d3b      	adds	r3, r7, #4
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	69db      	ldr	r3, [r3, #28]
 800363e:	2b00      	cmp	r3, #0
 8003640:	f000 81c2 	beq.w	80039c8 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003644:	4b71      	ldr	r3, [pc, #452]	; (800380c <HAL_RCC_OscConfig+0xc44>)
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	f003 030c 	and.w	r3, r3, #12
 800364c:	2b08      	cmp	r3, #8
 800364e:	f000 819c 	beq.w	800398a <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003652:	1d3b      	adds	r3, r7, #4
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	69db      	ldr	r3, [r3, #28]
 8003658:	2b02      	cmp	r3, #2
 800365a:	f040 8114 	bne.w	8003886 <HAL_RCC_OscConfig+0xcbe>
 800365e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003662:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003666:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003668:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	fa93 f2a3 	rbit	r2, r3
 8003672:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003676:	601a      	str	r2, [r3, #0]
  return result;
 8003678:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800367c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800367e:	fab3 f383 	clz	r3, r3
 8003682:	b2db      	uxtb	r3, r3
 8003684:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003688:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800368c:	009b      	lsls	r3, r3, #2
 800368e:	461a      	mov	r2, r3
 8003690:	2300      	movs	r3, #0
 8003692:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003694:	f7fe fbb0 	bl	8001df8 <HAL_GetTick>
 8003698:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800369c:	e009      	b.n	80036b2 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800369e:	f7fe fbab 	bl	8001df8 <HAL_GetTick>
 80036a2:	4602      	mov	r2, r0
 80036a4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80036a8:	1ad3      	subs	r3, r2, r3
 80036aa:	2b02      	cmp	r3, #2
 80036ac:	d901      	bls.n	80036b2 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 80036ae:	2303      	movs	r3, #3
 80036b0:	e18b      	b.n	80039ca <HAL_RCC_OscConfig+0xe02>
 80036b2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80036b6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80036ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036bc:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	fa93 f2a3 	rbit	r2, r3
 80036c6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80036ca:	601a      	str	r2, [r3, #0]
  return result;
 80036cc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80036d0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036d2:	fab3 f383 	clz	r3, r3
 80036d6:	b2db      	uxtb	r3, r3
 80036d8:	095b      	lsrs	r3, r3, #5
 80036da:	b2db      	uxtb	r3, r3
 80036dc:	f043 0301 	orr.w	r3, r3, #1
 80036e0:	b2db      	uxtb	r3, r3
 80036e2:	2b01      	cmp	r3, #1
 80036e4:	d102      	bne.n	80036ec <HAL_RCC_OscConfig+0xb24>
 80036e6:	4b49      	ldr	r3, [pc, #292]	; (800380c <HAL_RCC_OscConfig+0xc44>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	e01b      	b.n	8003724 <HAL_RCC_OscConfig+0xb5c>
 80036ec:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80036f0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80036f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036f6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	fa93 f2a3 	rbit	r2, r3
 8003700:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003704:	601a      	str	r2, [r3, #0]
 8003706:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800370a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800370e:	601a      	str	r2, [r3, #0]
 8003710:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	fa93 f2a3 	rbit	r2, r3
 800371a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800371e:	601a      	str	r2, [r3, #0]
 8003720:	4b3a      	ldr	r3, [pc, #232]	; (800380c <HAL_RCC_OscConfig+0xc44>)
 8003722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003724:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003728:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800372c:	6011      	str	r1, [r2, #0]
 800372e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003732:	6812      	ldr	r2, [r2, #0]
 8003734:	fa92 f1a2 	rbit	r1, r2
 8003738:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800373c:	6011      	str	r1, [r2, #0]
  return result;
 800373e:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003742:	6812      	ldr	r2, [r2, #0]
 8003744:	fab2 f282 	clz	r2, r2
 8003748:	b2d2      	uxtb	r2, r2
 800374a:	f042 0220 	orr.w	r2, r2, #32
 800374e:	b2d2      	uxtb	r2, r2
 8003750:	f002 021f 	and.w	r2, r2, #31
 8003754:	2101      	movs	r1, #1
 8003756:	fa01 f202 	lsl.w	r2, r1, r2
 800375a:	4013      	ands	r3, r2
 800375c:	2b00      	cmp	r3, #0
 800375e:	d19e      	bne.n	800369e <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003760:	4b2a      	ldr	r3, [pc, #168]	; (800380c <HAL_RCC_OscConfig+0xc44>)
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003768:	1d3b      	adds	r3, r7, #4
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800376e:	1d3b      	adds	r3, r7, #4
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	6a1b      	ldr	r3, [r3, #32]
 8003774:	430b      	orrs	r3, r1
 8003776:	4925      	ldr	r1, [pc, #148]	; (800380c <HAL_RCC_OscConfig+0xc44>)
 8003778:	4313      	orrs	r3, r2
 800377a:	604b      	str	r3, [r1, #4]
 800377c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003780:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003784:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003786:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	fa93 f2a3 	rbit	r2, r3
 8003790:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003794:	601a      	str	r2, [r3, #0]
  return result;
 8003796:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800379a:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800379c:	fab3 f383 	clz	r3, r3
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80037a6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80037aa:	009b      	lsls	r3, r3, #2
 80037ac:	461a      	mov	r2, r3
 80037ae:	2301      	movs	r3, #1
 80037b0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037b2:	f7fe fb21 	bl	8001df8 <HAL_GetTick>
 80037b6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80037ba:	e009      	b.n	80037d0 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037bc:	f7fe fb1c 	bl	8001df8 <HAL_GetTick>
 80037c0:	4602      	mov	r2, r0
 80037c2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80037c6:	1ad3      	subs	r3, r2, r3
 80037c8:	2b02      	cmp	r3, #2
 80037ca:	d901      	bls.n	80037d0 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80037cc:	2303      	movs	r3, #3
 80037ce:	e0fc      	b.n	80039ca <HAL_RCC_OscConfig+0xe02>
 80037d0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80037d4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80037d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037da:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	fa93 f2a3 	rbit	r2, r3
 80037e4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80037e8:	601a      	str	r2, [r3, #0]
  return result;
 80037ea:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80037ee:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80037f0:	fab3 f383 	clz	r3, r3
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	095b      	lsrs	r3, r3, #5
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	f043 0301 	orr.w	r3, r3, #1
 80037fe:	b2db      	uxtb	r3, r3
 8003800:	2b01      	cmp	r3, #1
 8003802:	d105      	bne.n	8003810 <HAL_RCC_OscConfig+0xc48>
 8003804:	4b01      	ldr	r3, [pc, #4]	; (800380c <HAL_RCC_OscConfig+0xc44>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	e01e      	b.n	8003848 <HAL_RCC_OscConfig+0xc80>
 800380a:	bf00      	nop
 800380c:	40021000 	.word	0x40021000
 8003810:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003814:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003818:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800381a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	fa93 f2a3 	rbit	r2, r3
 8003824:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003828:	601a      	str	r2, [r3, #0]
 800382a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800382e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003832:	601a      	str	r2, [r3, #0]
 8003834:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	fa93 f2a3 	rbit	r2, r3
 800383e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003842:	601a      	str	r2, [r3, #0]
 8003844:	4b63      	ldr	r3, [pc, #396]	; (80039d4 <HAL_RCC_OscConfig+0xe0c>)
 8003846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003848:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800384c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003850:	6011      	str	r1, [r2, #0]
 8003852:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003856:	6812      	ldr	r2, [r2, #0]
 8003858:	fa92 f1a2 	rbit	r1, r2
 800385c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003860:	6011      	str	r1, [r2, #0]
  return result;
 8003862:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003866:	6812      	ldr	r2, [r2, #0]
 8003868:	fab2 f282 	clz	r2, r2
 800386c:	b2d2      	uxtb	r2, r2
 800386e:	f042 0220 	orr.w	r2, r2, #32
 8003872:	b2d2      	uxtb	r2, r2
 8003874:	f002 021f 	and.w	r2, r2, #31
 8003878:	2101      	movs	r1, #1
 800387a:	fa01 f202 	lsl.w	r2, r1, r2
 800387e:	4013      	ands	r3, r2
 8003880:	2b00      	cmp	r3, #0
 8003882:	d09b      	beq.n	80037bc <HAL_RCC_OscConfig+0xbf4>
 8003884:	e0a0      	b.n	80039c8 <HAL_RCC_OscConfig+0xe00>
 8003886:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800388a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800388e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003890:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	fa93 f2a3 	rbit	r2, r3
 800389a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800389e:	601a      	str	r2, [r3, #0]
  return result;
 80038a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80038a4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038a6:	fab3 f383 	clz	r3, r3
 80038aa:	b2db      	uxtb	r3, r3
 80038ac:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80038b0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80038b4:	009b      	lsls	r3, r3, #2
 80038b6:	461a      	mov	r2, r3
 80038b8:	2300      	movs	r3, #0
 80038ba:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038bc:	f7fe fa9c 	bl	8001df8 <HAL_GetTick>
 80038c0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038c4:	e009      	b.n	80038da <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038c6:	f7fe fa97 	bl	8001df8 <HAL_GetTick>
 80038ca:	4602      	mov	r2, r0
 80038cc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80038d0:	1ad3      	subs	r3, r2, r3
 80038d2:	2b02      	cmp	r3, #2
 80038d4:	d901      	bls.n	80038da <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80038d6:	2303      	movs	r3, #3
 80038d8:	e077      	b.n	80039ca <HAL_RCC_OscConfig+0xe02>
 80038da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80038de:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80038e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038e4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	fa93 f2a3 	rbit	r2, r3
 80038ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80038f2:	601a      	str	r2, [r3, #0]
  return result;
 80038f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80038f8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038fa:	fab3 f383 	clz	r3, r3
 80038fe:	b2db      	uxtb	r3, r3
 8003900:	095b      	lsrs	r3, r3, #5
 8003902:	b2db      	uxtb	r3, r3
 8003904:	f043 0301 	orr.w	r3, r3, #1
 8003908:	b2db      	uxtb	r3, r3
 800390a:	2b01      	cmp	r3, #1
 800390c:	d102      	bne.n	8003914 <HAL_RCC_OscConfig+0xd4c>
 800390e:	4b31      	ldr	r3, [pc, #196]	; (80039d4 <HAL_RCC_OscConfig+0xe0c>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	e01b      	b.n	800394c <HAL_RCC_OscConfig+0xd84>
 8003914:	f107 0320 	add.w	r3, r7, #32
 8003918:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800391c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800391e:	f107 0320 	add.w	r3, r7, #32
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	fa93 f2a3 	rbit	r2, r3
 8003928:	f107 031c 	add.w	r3, r7, #28
 800392c:	601a      	str	r2, [r3, #0]
 800392e:	f107 0318 	add.w	r3, r7, #24
 8003932:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003936:	601a      	str	r2, [r3, #0]
 8003938:	f107 0318 	add.w	r3, r7, #24
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	fa93 f2a3 	rbit	r2, r3
 8003942:	f107 0314 	add.w	r3, r7, #20
 8003946:	601a      	str	r2, [r3, #0]
 8003948:	4b22      	ldr	r3, [pc, #136]	; (80039d4 <HAL_RCC_OscConfig+0xe0c>)
 800394a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800394c:	f107 0210 	add.w	r2, r7, #16
 8003950:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003954:	6011      	str	r1, [r2, #0]
 8003956:	f107 0210 	add.w	r2, r7, #16
 800395a:	6812      	ldr	r2, [r2, #0]
 800395c:	fa92 f1a2 	rbit	r1, r2
 8003960:	f107 020c 	add.w	r2, r7, #12
 8003964:	6011      	str	r1, [r2, #0]
  return result;
 8003966:	f107 020c 	add.w	r2, r7, #12
 800396a:	6812      	ldr	r2, [r2, #0]
 800396c:	fab2 f282 	clz	r2, r2
 8003970:	b2d2      	uxtb	r2, r2
 8003972:	f042 0220 	orr.w	r2, r2, #32
 8003976:	b2d2      	uxtb	r2, r2
 8003978:	f002 021f 	and.w	r2, r2, #31
 800397c:	2101      	movs	r1, #1
 800397e:	fa01 f202 	lsl.w	r2, r1, r2
 8003982:	4013      	ands	r3, r2
 8003984:	2b00      	cmp	r3, #0
 8003986:	d19e      	bne.n	80038c6 <HAL_RCC_OscConfig+0xcfe>
 8003988:	e01e      	b.n	80039c8 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800398a:	1d3b      	adds	r3, r7, #4
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	69db      	ldr	r3, [r3, #28]
 8003990:	2b01      	cmp	r3, #1
 8003992:	d101      	bne.n	8003998 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8003994:	2301      	movs	r3, #1
 8003996:	e018      	b.n	80039ca <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003998:	4b0e      	ldr	r3, [pc, #56]	; (80039d4 <HAL_RCC_OscConfig+0xe0c>)
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80039a0:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80039a4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80039a8:	1d3b      	adds	r3, r7, #4
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	6a1b      	ldr	r3, [r3, #32]
 80039ae:	429a      	cmp	r2, r3
 80039b0:	d108      	bne.n	80039c4 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80039b2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80039b6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80039ba:	1d3b      	adds	r3, r7, #4
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80039c0:	429a      	cmp	r2, r3
 80039c2:	d001      	beq.n	80039c8 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 80039c4:	2301      	movs	r3, #1
 80039c6:	e000      	b.n	80039ca <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 80039c8:	2300      	movs	r3, #0
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}
 80039d4:	40021000 	.word	0x40021000

080039d8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b09e      	sub	sp, #120	; 0x78
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
 80039e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80039e2:	2300      	movs	r3, #0
 80039e4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d101      	bne.n	80039f0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	e162      	b.n	8003cb6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80039f0:	4b90      	ldr	r3, [pc, #576]	; (8003c34 <HAL_RCC_ClockConfig+0x25c>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f003 0307 	and.w	r3, r3, #7
 80039f8:	683a      	ldr	r2, [r7, #0]
 80039fa:	429a      	cmp	r2, r3
 80039fc:	d910      	bls.n	8003a20 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039fe:	4b8d      	ldr	r3, [pc, #564]	; (8003c34 <HAL_RCC_ClockConfig+0x25c>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f023 0207 	bic.w	r2, r3, #7
 8003a06:	498b      	ldr	r1, [pc, #556]	; (8003c34 <HAL_RCC_ClockConfig+0x25c>)
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a0e:	4b89      	ldr	r3, [pc, #548]	; (8003c34 <HAL_RCC_ClockConfig+0x25c>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f003 0307 	and.w	r3, r3, #7
 8003a16:	683a      	ldr	r2, [r7, #0]
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	d001      	beq.n	8003a20 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	e14a      	b.n	8003cb6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f003 0302 	and.w	r3, r3, #2
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d008      	beq.n	8003a3e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a2c:	4b82      	ldr	r3, [pc, #520]	; (8003c38 <HAL_RCC_ClockConfig+0x260>)
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	497f      	ldr	r1, [pc, #508]	; (8003c38 <HAL_RCC_ClockConfig+0x260>)
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f003 0301 	and.w	r3, r3, #1
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	f000 80dc 	beq.w	8003c04 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	d13c      	bne.n	8003ace <HAL_RCC_ClockConfig+0xf6>
 8003a54:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003a58:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a5a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a5c:	fa93 f3a3 	rbit	r3, r3
 8003a60:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003a62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a64:	fab3 f383 	clz	r3, r3
 8003a68:	b2db      	uxtb	r3, r3
 8003a6a:	095b      	lsrs	r3, r3, #5
 8003a6c:	b2db      	uxtb	r3, r3
 8003a6e:	f043 0301 	orr.w	r3, r3, #1
 8003a72:	b2db      	uxtb	r3, r3
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	d102      	bne.n	8003a7e <HAL_RCC_ClockConfig+0xa6>
 8003a78:	4b6f      	ldr	r3, [pc, #444]	; (8003c38 <HAL_RCC_ClockConfig+0x260>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	e00f      	b.n	8003a9e <HAL_RCC_ClockConfig+0xc6>
 8003a7e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003a82:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a84:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003a86:	fa93 f3a3 	rbit	r3, r3
 8003a8a:	667b      	str	r3, [r7, #100]	; 0x64
 8003a8c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003a90:	663b      	str	r3, [r7, #96]	; 0x60
 8003a92:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a94:	fa93 f3a3 	rbit	r3, r3
 8003a98:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a9a:	4b67      	ldr	r3, [pc, #412]	; (8003c38 <HAL_RCC_ClockConfig+0x260>)
 8003a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a9e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003aa2:	65ba      	str	r2, [r7, #88]	; 0x58
 8003aa4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003aa6:	fa92 f2a2 	rbit	r2, r2
 8003aaa:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003aac:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003aae:	fab2 f282 	clz	r2, r2
 8003ab2:	b2d2      	uxtb	r2, r2
 8003ab4:	f042 0220 	orr.w	r2, r2, #32
 8003ab8:	b2d2      	uxtb	r2, r2
 8003aba:	f002 021f 	and.w	r2, r2, #31
 8003abe:	2101      	movs	r1, #1
 8003ac0:	fa01 f202 	lsl.w	r2, r1, r2
 8003ac4:	4013      	ands	r3, r2
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d17b      	bne.n	8003bc2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	e0f3      	b.n	8003cb6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	2b02      	cmp	r3, #2
 8003ad4:	d13c      	bne.n	8003b50 <HAL_RCC_ClockConfig+0x178>
 8003ad6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003ada:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003adc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ade:	fa93 f3a3 	rbit	r3, r3
 8003ae2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003ae4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ae6:	fab3 f383 	clz	r3, r3
 8003aea:	b2db      	uxtb	r3, r3
 8003aec:	095b      	lsrs	r3, r3, #5
 8003aee:	b2db      	uxtb	r3, r3
 8003af0:	f043 0301 	orr.w	r3, r3, #1
 8003af4:	b2db      	uxtb	r3, r3
 8003af6:	2b01      	cmp	r3, #1
 8003af8:	d102      	bne.n	8003b00 <HAL_RCC_ClockConfig+0x128>
 8003afa:	4b4f      	ldr	r3, [pc, #316]	; (8003c38 <HAL_RCC_ClockConfig+0x260>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	e00f      	b.n	8003b20 <HAL_RCC_ClockConfig+0x148>
 8003b00:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b04:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b08:	fa93 f3a3 	rbit	r3, r3
 8003b0c:	647b      	str	r3, [r7, #68]	; 0x44
 8003b0e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b12:	643b      	str	r3, [r7, #64]	; 0x40
 8003b14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b16:	fa93 f3a3 	rbit	r3, r3
 8003b1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b1c:	4b46      	ldr	r3, [pc, #280]	; (8003c38 <HAL_RCC_ClockConfig+0x260>)
 8003b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b20:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003b24:	63ba      	str	r2, [r7, #56]	; 0x38
 8003b26:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003b28:	fa92 f2a2 	rbit	r2, r2
 8003b2c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003b2e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b30:	fab2 f282 	clz	r2, r2
 8003b34:	b2d2      	uxtb	r2, r2
 8003b36:	f042 0220 	orr.w	r2, r2, #32
 8003b3a:	b2d2      	uxtb	r2, r2
 8003b3c:	f002 021f 	and.w	r2, r2, #31
 8003b40:	2101      	movs	r1, #1
 8003b42:	fa01 f202 	lsl.w	r2, r1, r2
 8003b46:	4013      	ands	r3, r2
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d13a      	bne.n	8003bc2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	e0b2      	b.n	8003cb6 <HAL_RCC_ClockConfig+0x2de>
 8003b50:	2302      	movs	r3, #2
 8003b52:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b56:	fa93 f3a3 	rbit	r3, r3
 8003b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003b5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b5e:	fab3 f383 	clz	r3, r3
 8003b62:	b2db      	uxtb	r3, r3
 8003b64:	095b      	lsrs	r3, r3, #5
 8003b66:	b2db      	uxtb	r3, r3
 8003b68:	f043 0301 	orr.w	r3, r3, #1
 8003b6c:	b2db      	uxtb	r3, r3
 8003b6e:	2b01      	cmp	r3, #1
 8003b70:	d102      	bne.n	8003b78 <HAL_RCC_ClockConfig+0x1a0>
 8003b72:	4b31      	ldr	r3, [pc, #196]	; (8003c38 <HAL_RCC_ClockConfig+0x260>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	e00d      	b.n	8003b94 <HAL_RCC_ClockConfig+0x1bc>
 8003b78:	2302      	movs	r3, #2
 8003b7a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b7e:	fa93 f3a3 	rbit	r3, r3
 8003b82:	627b      	str	r3, [r7, #36]	; 0x24
 8003b84:	2302      	movs	r3, #2
 8003b86:	623b      	str	r3, [r7, #32]
 8003b88:	6a3b      	ldr	r3, [r7, #32]
 8003b8a:	fa93 f3a3 	rbit	r3, r3
 8003b8e:	61fb      	str	r3, [r7, #28]
 8003b90:	4b29      	ldr	r3, [pc, #164]	; (8003c38 <HAL_RCC_ClockConfig+0x260>)
 8003b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b94:	2202      	movs	r2, #2
 8003b96:	61ba      	str	r2, [r7, #24]
 8003b98:	69ba      	ldr	r2, [r7, #24]
 8003b9a:	fa92 f2a2 	rbit	r2, r2
 8003b9e:	617a      	str	r2, [r7, #20]
  return result;
 8003ba0:	697a      	ldr	r2, [r7, #20]
 8003ba2:	fab2 f282 	clz	r2, r2
 8003ba6:	b2d2      	uxtb	r2, r2
 8003ba8:	f042 0220 	orr.w	r2, r2, #32
 8003bac:	b2d2      	uxtb	r2, r2
 8003bae:	f002 021f 	and.w	r2, r2, #31
 8003bb2:	2101      	movs	r1, #1
 8003bb4:	fa01 f202 	lsl.w	r2, r1, r2
 8003bb8:	4013      	ands	r3, r2
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d101      	bne.n	8003bc2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e079      	b.n	8003cb6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003bc2:	4b1d      	ldr	r3, [pc, #116]	; (8003c38 <HAL_RCC_ClockConfig+0x260>)
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	f023 0203 	bic.w	r2, r3, #3
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	491a      	ldr	r1, [pc, #104]	; (8003c38 <HAL_RCC_ClockConfig+0x260>)
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003bd4:	f7fe f910 	bl	8001df8 <HAL_GetTick>
 8003bd8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bda:	e00a      	b.n	8003bf2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bdc:	f7fe f90c 	bl	8001df8 <HAL_GetTick>
 8003be0:	4602      	mov	r2, r0
 8003be2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003be4:	1ad3      	subs	r3, r2, r3
 8003be6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d901      	bls.n	8003bf2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003bee:	2303      	movs	r3, #3
 8003bf0:	e061      	b.n	8003cb6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bf2:	4b11      	ldr	r3, [pc, #68]	; (8003c38 <HAL_RCC_ClockConfig+0x260>)
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	f003 020c 	and.w	r2, r3, #12
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	009b      	lsls	r3, r3, #2
 8003c00:	429a      	cmp	r2, r3
 8003c02:	d1eb      	bne.n	8003bdc <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c04:	4b0b      	ldr	r3, [pc, #44]	; (8003c34 <HAL_RCC_ClockConfig+0x25c>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f003 0307 	and.w	r3, r3, #7
 8003c0c:	683a      	ldr	r2, [r7, #0]
 8003c0e:	429a      	cmp	r2, r3
 8003c10:	d214      	bcs.n	8003c3c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c12:	4b08      	ldr	r3, [pc, #32]	; (8003c34 <HAL_RCC_ClockConfig+0x25c>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f023 0207 	bic.w	r2, r3, #7
 8003c1a:	4906      	ldr	r1, [pc, #24]	; (8003c34 <HAL_RCC_ClockConfig+0x25c>)
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c22:	4b04      	ldr	r3, [pc, #16]	; (8003c34 <HAL_RCC_ClockConfig+0x25c>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 0307 	and.w	r3, r3, #7
 8003c2a:	683a      	ldr	r2, [r7, #0]
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	d005      	beq.n	8003c3c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	e040      	b.n	8003cb6 <HAL_RCC_ClockConfig+0x2de>
 8003c34:	40022000 	.word	0x40022000
 8003c38:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f003 0304 	and.w	r3, r3, #4
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d008      	beq.n	8003c5a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c48:	4b1d      	ldr	r3, [pc, #116]	; (8003cc0 <HAL_RCC_ClockConfig+0x2e8>)
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	68db      	ldr	r3, [r3, #12]
 8003c54:	491a      	ldr	r1, [pc, #104]	; (8003cc0 <HAL_RCC_ClockConfig+0x2e8>)
 8003c56:	4313      	orrs	r3, r2
 8003c58:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f003 0308 	and.w	r3, r3, #8
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d009      	beq.n	8003c7a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c66:	4b16      	ldr	r3, [pc, #88]	; (8003cc0 <HAL_RCC_ClockConfig+0x2e8>)
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	691b      	ldr	r3, [r3, #16]
 8003c72:	00db      	lsls	r3, r3, #3
 8003c74:	4912      	ldr	r1, [pc, #72]	; (8003cc0 <HAL_RCC_ClockConfig+0x2e8>)
 8003c76:	4313      	orrs	r3, r2
 8003c78:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003c7a:	f000 f829 	bl	8003cd0 <HAL_RCC_GetSysClockFreq>
 8003c7e:	4601      	mov	r1, r0
 8003c80:	4b0f      	ldr	r3, [pc, #60]	; (8003cc0 <HAL_RCC_ClockConfig+0x2e8>)
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c88:	22f0      	movs	r2, #240	; 0xf0
 8003c8a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c8c:	693a      	ldr	r2, [r7, #16]
 8003c8e:	fa92 f2a2 	rbit	r2, r2
 8003c92:	60fa      	str	r2, [r7, #12]
  return result;
 8003c94:	68fa      	ldr	r2, [r7, #12]
 8003c96:	fab2 f282 	clz	r2, r2
 8003c9a:	b2d2      	uxtb	r2, r2
 8003c9c:	40d3      	lsrs	r3, r2
 8003c9e:	4a09      	ldr	r2, [pc, #36]	; (8003cc4 <HAL_RCC_ClockConfig+0x2ec>)
 8003ca0:	5cd3      	ldrb	r3, [r2, r3]
 8003ca2:	fa21 f303 	lsr.w	r3, r1, r3
 8003ca6:	4a08      	ldr	r2, [pc, #32]	; (8003cc8 <HAL_RCC_ClockConfig+0x2f0>)
 8003ca8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003caa:	4b08      	ldr	r3, [pc, #32]	; (8003ccc <HAL_RCC_ClockConfig+0x2f4>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f7fe f85e 	bl	8001d70 <HAL_InitTick>
  
  return HAL_OK;
 8003cb4:	2300      	movs	r3, #0
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	3778      	adds	r7, #120	; 0x78
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}
 8003cbe:	bf00      	nop
 8003cc0:	40021000 	.word	0x40021000
 8003cc4:	0800409c 	.word	0x0800409c
 8003cc8:	2000003c 	.word	0x2000003c
 8003ccc:	20000040 	.word	0x20000040

08003cd0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b08b      	sub	sp, #44	; 0x2c
 8003cd4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	61fb      	str	r3, [r7, #28]
 8003cda:	2300      	movs	r3, #0
 8003cdc:	61bb      	str	r3, [r7, #24]
 8003cde:	2300      	movs	r3, #0
 8003ce0:	627b      	str	r3, [r7, #36]	; 0x24
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003cea:	4b29      	ldr	r3, [pc, #164]	; (8003d90 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003cf0:	69fb      	ldr	r3, [r7, #28]
 8003cf2:	f003 030c 	and.w	r3, r3, #12
 8003cf6:	2b04      	cmp	r3, #4
 8003cf8:	d002      	beq.n	8003d00 <HAL_RCC_GetSysClockFreq+0x30>
 8003cfa:	2b08      	cmp	r3, #8
 8003cfc:	d003      	beq.n	8003d06 <HAL_RCC_GetSysClockFreq+0x36>
 8003cfe:	e03c      	b.n	8003d7a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003d00:	4b24      	ldr	r3, [pc, #144]	; (8003d94 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003d02:	623b      	str	r3, [r7, #32]
      break;
 8003d04:	e03c      	b.n	8003d80 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003d06:	69fb      	ldr	r3, [r7, #28]
 8003d08:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003d0c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003d10:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d12:	68ba      	ldr	r2, [r7, #8]
 8003d14:	fa92 f2a2 	rbit	r2, r2
 8003d18:	607a      	str	r2, [r7, #4]
  return result;
 8003d1a:	687a      	ldr	r2, [r7, #4]
 8003d1c:	fab2 f282 	clz	r2, r2
 8003d20:	b2d2      	uxtb	r2, r2
 8003d22:	40d3      	lsrs	r3, r2
 8003d24:	4a1c      	ldr	r2, [pc, #112]	; (8003d98 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003d26:	5cd3      	ldrb	r3, [r2, r3]
 8003d28:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003d2a:	4b19      	ldr	r3, [pc, #100]	; (8003d90 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d2e:	f003 030f 	and.w	r3, r3, #15
 8003d32:	220f      	movs	r2, #15
 8003d34:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d36:	693a      	ldr	r2, [r7, #16]
 8003d38:	fa92 f2a2 	rbit	r2, r2
 8003d3c:	60fa      	str	r2, [r7, #12]
  return result;
 8003d3e:	68fa      	ldr	r2, [r7, #12]
 8003d40:	fab2 f282 	clz	r2, r2
 8003d44:	b2d2      	uxtb	r2, r2
 8003d46:	40d3      	lsrs	r3, r2
 8003d48:	4a14      	ldr	r2, [pc, #80]	; (8003d9c <HAL_RCC_GetSysClockFreq+0xcc>)
 8003d4a:	5cd3      	ldrb	r3, [r2, r3]
 8003d4c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003d4e:	69fb      	ldr	r3, [r7, #28]
 8003d50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d008      	beq.n	8003d6a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003d58:	4a0e      	ldr	r2, [pc, #56]	; (8003d94 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003d5a:	69bb      	ldr	r3, [r7, #24]
 8003d5c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	fb02 f303 	mul.w	r3, r2, r3
 8003d66:	627b      	str	r3, [r7, #36]	; 0x24
 8003d68:	e004      	b.n	8003d74 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	4a0c      	ldr	r2, [pc, #48]	; (8003da0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003d6e:	fb02 f303 	mul.w	r3, r2, r3
 8003d72:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d76:	623b      	str	r3, [r7, #32]
      break;
 8003d78:	e002      	b.n	8003d80 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003d7a:	4b06      	ldr	r3, [pc, #24]	; (8003d94 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003d7c:	623b      	str	r3, [r7, #32]
      break;
 8003d7e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d80:	6a3b      	ldr	r3, [r7, #32]
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	372c      	adds	r7, #44	; 0x2c
 8003d86:	46bd      	mov	sp, r7
 8003d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8c:	4770      	bx	lr
 8003d8e:	bf00      	nop
 8003d90:	40021000 	.word	0x40021000
 8003d94:	007a1200 	.word	0x007a1200
 8003d98:	080040ac 	.word	0x080040ac
 8003d9c:	080040bc 	.word	0x080040bc
 8003da0:	003d0900 	.word	0x003d0900

08003da4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b092      	sub	sp, #72	; 0x48
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003dac:	2300      	movs	r3, #0
 8003dae:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003db0:	2300      	movs	r3, #0
 8003db2:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	f000 80d0 	beq.w	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003dc8:	4b8e      	ldr	r3, [pc, #568]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dca:	69db      	ldr	r3, [r3, #28]
 8003dcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d10e      	bne.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003dd4:	4b8b      	ldr	r3, [pc, #556]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dd6:	69db      	ldr	r3, [r3, #28]
 8003dd8:	4a8a      	ldr	r2, [pc, #552]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dde:	61d3      	str	r3, [r2, #28]
 8003de0:	4b88      	ldr	r3, [pc, #544]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003de2:	69db      	ldr	r3, [r3, #28]
 8003de4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003de8:	60bb      	str	r3, [r7, #8]
 8003dea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003dec:	2301      	movs	r3, #1
 8003dee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003df2:	4b85      	ldr	r3, [pc, #532]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d118      	bne.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003dfe:	4b82      	ldr	r3, [pc, #520]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a81      	ldr	r2, [pc, #516]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003e04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e08:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e0a:	f7fd fff5 	bl	8001df8 <HAL_GetTick>
 8003e0e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e10:	e008      	b.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e12:	f7fd fff1 	bl	8001df8 <HAL_GetTick>
 8003e16:	4602      	mov	r2, r0
 8003e18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e1a:	1ad3      	subs	r3, r2, r3
 8003e1c:	2b64      	cmp	r3, #100	; 0x64
 8003e1e:	d901      	bls.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003e20:	2303      	movs	r3, #3
 8003e22:	e0ea      	b.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x256>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e24:	4b78      	ldr	r3, [pc, #480]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d0f0      	beq.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003e30:	4b74      	ldr	r3, [pc, #464]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e32:	6a1b      	ldr	r3, [r3, #32]
 8003e34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e38:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003e3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d07d      	beq.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e48:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003e4a:	429a      	cmp	r2, r3
 8003e4c:	d076      	beq.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003e4e:	4b6d      	ldr	r3, [pc, #436]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e50:	6a1b      	ldr	r3, [r3, #32]
 8003e52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e58:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003e5c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e60:	fa93 f3a3 	rbit	r3, r3
 8003e64:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003e66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003e68:	fab3 f383 	clz	r3, r3
 8003e6c:	b2db      	uxtb	r3, r3
 8003e6e:	461a      	mov	r2, r3
 8003e70:	4b66      	ldr	r3, [pc, #408]	; (800400c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003e72:	4413      	add	r3, r2
 8003e74:	009b      	lsls	r3, r3, #2
 8003e76:	461a      	mov	r2, r3
 8003e78:	2301      	movs	r3, #1
 8003e7a:	6013      	str	r3, [r2, #0]
 8003e7c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003e80:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e84:	fa93 f3a3 	rbit	r3, r3
 8003e88:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003e8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003e8c:	fab3 f383 	clz	r3, r3
 8003e90:	b2db      	uxtb	r3, r3
 8003e92:	461a      	mov	r2, r3
 8003e94:	4b5d      	ldr	r3, [pc, #372]	; (800400c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003e96:	4413      	add	r3, r2
 8003e98:	009b      	lsls	r3, r3, #2
 8003e9a:	461a      	mov	r2, r3
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003ea0:	4a58      	ldr	r2, [pc, #352]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ea2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ea4:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003ea6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ea8:	f003 0301 	and.w	r3, r3, #1
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d045      	beq.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eb0:	f7fd ffa2 	bl	8001df8 <HAL_GetTick>
 8003eb4:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003eb6:	e00a      	b.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003eb8:	f7fd ff9e 	bl	8001df8 <HAL_GetTick>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ec0:	1ad3      	subs	r3, r2, r3
 8003ec2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d901      	bls.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003eca:	2303      	movs	r3, #3
 8003ecc:	e095      	b.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x256>
 8003ece:	2302      	movs	r3, #2
 8003ed0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ed4:	fa93 f3a3 	rbit	r3, r3
 8003ed8:	627b      	str	r3, [r7, #36]	; 0x24
 8003eda:	2302      	movs	r3, #2
 8003edc:	623b      	str	r3, [r7, #32]
 8003ede:	6a3b      	ldr	r3, [r7, #32]
 8003ee0:	fa93 f3a3 	rbit	r3, r3
 8003ee4:	61fb      	str	r3, [r7, #28]
  return result;
 8003ee6:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ee8:	fab3 f383 	clz	r3, r3
 8003eec:	b2db      	uxtb	r3, r3
 8003eee:	095b      	lsrs	r3, r3, #5
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	f043 0302 	orr.w	r3, r3, #2
 8003ef6:	b2db      	uxtb	r3, r3
 8003ef8:	2b02      	cmp	r3, #2
 8003efa:	d102      	bne.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003efc:	4b41      	ldr	r3, [pc, #260]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003efe:	6a1b      	ldr	r3, [r3, #32]
 8003f00:	e007      	b.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8003f02:	2302      	movs	r3, #2
 8003f04:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f06:	69bb      	ldr	r3, [r7, #24]
 8003f08:	fa93 f3a3 	rbit	r3, r3
 8003f0c:	617b      	str	r3, [r7, #20]
 8003f0e:	4b3d      	ldr	r3, [pc, #244]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f12:	2202      	movs	r2, #2
 8003f14:	613a      	str	r2, [r7, #16]
 8003f16:	693a      	ldr	r2, [r7, #16]
 8003f18:	fa92 f2a2 	rbit	r2, r2
 8003f1c:	60fa      	str	r2, [r7, #12]
  return result;
 8003f1e:	68fa      	ldr	r2, [r7, #12]
 8003f20:	fab2 f282 	clz	r2, r2
 8003f24:	b2d2      	uxtb	r2, r2
 8003f26:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f2a:	b2d2      	uxtb	r2, r2
 8003f2c:	f002 021f 	and.w	r2, r2, #31
 8003f30:	2101      	movs	r1, #1
 8003f32:	fa01 f202 	lsl.w	r2, r1, r2
 8003f36:	4013      	ands	r3, r2
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d0bd      	beq.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003f3c:	4b31      	ldr	r3, [pc, #196]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f3e:	6a1b      	ldr	r3, [r3, #32]
 8003f40:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	492e      	ldr	r1, [pc, #184]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003f4e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003f52:	2b01      	cmp	r3, #1
 8003f54:	d105      	bne.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f56:	4b2b      	ldr	r3, [pc, #172]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f58:	69db      	ldr	r3, [r3, #28]
 8003f5a:	4a2a      	ldr	r2, [pc, #168]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f60:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f003 0301 	and.w	r3, r3, #1
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d008      	beq.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003f6e:	4b25      	ldr	r3, [pc, #148]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f72:	f023 0203 	bic.w	r2, r3, #3
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	4922      	ldr	r1, [pc, #136]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f003 0320 	and.w	r3, r3, #32
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d008      	beq.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003f8c:	4b1d      	ldr	r3, [pc, #116]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f90:	f023 0210 	bic.w	r2, r3, #16
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	68db      	ldr	r3, [r3, #12]
 8003f98:	491a      	ldr	r1, [pc, #104]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d008      	beq.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003faa:	4b16      	ldr	r3, [pc, #88]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fae:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	691b      	ldr	r3, [r3, #16]
 8003fb6:	4913      	ldr	r1, [pc, #76]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d008      	beq.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003fc8:	4b0e      	ldr	r3, [pc, #56]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fcc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	695b      	ldr	r3, [r3, #20]
 8003fd4:	490b      	ldr	r1, [pc, #44]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d008      	beq.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003fe6:	4b07      	ldr	r3, [pc, #28]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	699b      	ldr	r3, [r3, #24]
 8003ff2:	4904      	ldr	r1, [pc, #16]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003ff8:	2300      	movs	r3, #0
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	3748      	adds	r7, #72	; 0x48
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}
 8004002:	bf00      	nop
 8004004:	40021000 	.word	0x40021000
 8004008:	40007000 	.word	0x40007000
 800400c:	10908100 	.word	0x10908100

08004010 <__libc_init_array>:
 8004010:	b570      	push	{r4, r5, r6, lr}
 8004012:	4e0d      	ldr	r6, [pc, #52]	; (8004048 <__libc_init_array+0x38>)
 8004014:	4c0d      	ldr	r4, [pc, #52]	; (800404c <__libc_init_array+0x3c>)
 8004016:	1ba4      	subs	r4, r4, r6
 8004018:	10a4      	asrs	r4, r4, #2
 800401a:	2500      	movs	r5, #0
 800401c:	42a5      	cmp	r5, r4
 800401e:	d109      	bne.n	8004034 <__libc_init_array+0x24>
 8004020:	4e0b      	ldr	r6, [pc, #44]	; (8004050 <__libc_init_array+0x40>)
 8004022:	4c0c      	ldr	r4, [pc, #48]	; (8004054 <__libc_init_array+0x44>)
 8004024:	f000 f820 	bl	8004068 <_init>
 8004028:	1ba4      	subs	r4, r4, r6
 800402a:	10a4      	asrs	r4, r4, #2
 800402c:	2500      	movs	r5, #0
 800402e:	42a5      	cmp	r5, r4
 8004030:	d105      	bne.n	800403e <__libc_init_array+0x2e>
 8004032:	bd70      	pop	{r4, r5, r6, pc}
 8004034:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004038:	4798      	blx	r3
 800403a:	3501      	adds	r5, #1
 800403c:	e7ee      	b.n	800401c <__libc_init_array+0xc>
 800403e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004042:	4798      	blx	r3
 8004044:	3501      	adds	r5, #1
 8004046:	e7f2      	b.n	800402e <__libc_init_array+0x1e>
 8004048:	080040cc 	.word	0x080040cc
 800404c:	080040cc 	.word	0x080040cc
 8004050:	080040cc 	.word	0x080040cc
 8004054:	080040d0 	.word	0x080040d0

08004058 <memset>:
 8004058:	4402      	add	r2, r0
 800405a:	4603      	mov	r3, r0
 800405c:	4293      	cmp	r3, r2
 800405e:	d100      	bne.n	8004062 <memset+0xa>
 8004060:	4770      	bx	lr
 8004062:	f803 1b01 	strb.w	r1, [r3], #1
 8004066:	e7f9      	b.n	800405c <memset+0x4>

08004068 <_init>:
 8004068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800406a:	bf00      	nop
 800406c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800406e:	bc08      	pop	{r3}
 8004070:	469e      	mov	lr, r3
 8004072:	4770      	bx	lr

08004074 <_fini>:
 8004074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004076:	bf00      	nop
 8004078:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800407a:	bc08      	pop	{r3}
 800407c:	469e      	mov	lr, r3
 800407e:	4770      	bx	lr
